
GloveForDeaf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002df2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00002df2  00002e66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00002ec0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002ef0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00002f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017dd  00000000  00000000  00003014  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000849  00000000  00000000  000047f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001533  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000027c  00000000  00000000  00006570  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000665  00000000  00000000  000067ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004d0  00000000  00000000  00006e51  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00007321  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	f8 10       	cpse	r15, r8
      56:	14 11       	cpse	r17, r4
      58:	30 11       	cpse	r19, r0
      5a:	4c 11       	cpse	r20, r12
      5c:	68 11       	cpse	r22, r8
      5e:	84 11       	cpse	r24, r4
      60:	a0 11       	cpse	r26, r0
      62:	bc 11       	cpse	r27, r12
      64:	20 12       	cpse	r2, r16
      66:	4e 12       	cpse	r4, r30
      68:	7c 12       	cpse	r7, r28
      6a:	aa 12       	cpse	r10, r26
      6c:	d8 12       	cpse	r13, r24
      6e:	06 13       	cpse	r16, r22
      70:	34 13       	cpse	r19, r20
      72:	62 13       	cpse	r22, r18

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf e5       	ldi	r28, 0x5F	; 95
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	10 e0       	ldi	r17, 0x00	; 0
      82:	a0 e6       	ldi	r26, 0x60	; 96
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	e2 ef       	ldi	r30, 0xF2	; 242
      88:	fd e2       	ldi	r31, 0x2D	; 45
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	aa 3b       	cpi	r26, 0xBA	; 186
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
      96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
      9a:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:
#include "main.h"



int main(void)
{
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
      ae:	c6 5a       	subi	r28, 0xA6	; 166
      b0:	d1 09       	sbc	r29, r1
      b2:	0f b6       	in	r0, 0x3f	; 63
      b4:	f8 94       	cli
      b6:	de bf       	out	0x3e, r29	; 62
      b8:	0f be       	out	0x3f, r0	; 63
      ba:	cd bf       	out	0x3d, r28	; 61
	//Fingers
	 Uint16_t F1 = 0;
      bc:	1a 82       	std	Y+2, r1	; 0x02
      be:	19 82       	std	Y+1, r1	; 0x01
	 Uint16_t F2 = 0;
      c0:	1c 82       	std	Y+4, r1	; 0x04
      c2:	1b 82       	std	Y+3, r1	; 0x03
	 Uint16_t F3 = 0;
      c4:	1e 82       	std	Y+6, r1	; 0x06
      c6:	1d 82       	std	Y+5, r1	; 0x05
	 Uint16_t F4 = 0;
      c8:	18 86       	std	Y+8, r1	; 0x08
      ca:	1f 82       	std	Y+7, r1	; 0x07
	 Uint16_t F5 = 0;
      cc:	1a 86       	std	Y+10, r1	; 0x0a
      ce:	19 86       	std	Y+9, r1	; 0x09
	 Uint16_t x = 0;
      d0:	1c 86       	std	Y+12, r1	; 0x0c
      d2:	1b 86       	std	Y+11, r1	; 0x0b

	//lcd init
	LCD_Initialize();
      d4:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <LCD_Initialize>
	LCD_Clear();
      d8:	0e 94 8b 0b 	call	0x1716	; 0x1716 <LCD_Clear>
	
	///avcc
	//prescaler 128
	ADC_Initialization(AVCC, ADC_PRE128);
      dc:	67 e0       	ldi	r22, 0x07	; 7
      de:	81 e0       	ldi	r24, 0x01	; 1
      e0:	0e 94 97 10 	call	0x212e	; 0x212e <ADC_Initialization>
	
	DIO_SetPin_Direction(DIO_PORTC, DIO_PIN0, DIO_OUTPUT);
      e4:	41 e0       	ldi	r20, 0x01	; 1
      e6:	60 e0       	ldi	r22, 0x00	; 0
      e8:	82 e0       	ldi	r24, 0x02	; 2
      ea:	0e 94 b5 13 	call	0x276a	; 0x276a <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTC, DIO_PIN1, DIO_OUTPUT);
      ee:	41 e0       	ldi	r20, 0x01	; 1
      f0:	61 e0       	ldi	r22, 0x01	; 1
      f2:	82 e0       	ldi	r24, 0x02	; 2
      f4:	0e 94 b5 13 	call	0x276a	; 0x276a <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTC, DIO_PIN2, DIO_OUTPUT);
      f8:	41 e0       	ldi	r20, 0x01	; 1
      fa:	62 e0       	ldi	r22, 0x02	; 2
      fc:	82 e0       	ldi	r24, 0x02	; 2
      fe:	0e 94 b5 13 	call	0x276a	; 0x276a <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTC, DIO_PIN3, DIO_OUTPUT);
     102:	41 e0       	ldi	r20, 0x01	; 1
     104:	63 e0       	ldi	r22, 0x03	; 3
     106:	82 e0       	ldi	r24, 0x02	; 2
     108:	0e 94 b5 13 	call	0x276a	; 0x276a <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);
     10c:	41 e0       	ldi	r20, 0x01	; 1
     10e:	64 e0       	ldi	r22, 0x04	; 4
     110:	82 e0       	ldi	r24, 0x02	; 2
     112:	0e 94 b5 13 	call	0x276a	; 0x276a <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTC, DIO_PIN5, DIO_OUTPUT);
     116:	41 e0       	ldi	r20, 0x01	; 1
     118:	65 e0       	ldi	r22, 0x05	; 5
     11a:	82 e0       	ldi	r24, 0x02	; 2
     11c:	0e 94 b5 13 	call	0x276a	; 0x276a <DIO_SetPin_Direction>
	DIO_SetPin_Value(DIO_PORTC, DIO_PIN5, DIO_HIGH);
     120:	41 e0       	ldi	r20, 0x01	; 1
     122:	65 e0       	ldi	r22, 0x05	; 5
     124:	82 e0       	ldi	r24, 0x02	; 2
     126:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	a8 ec       	ldi	r26, 0xC8	; 200
     130:	b3 e4       	ldi	r27, 0x43	; 67
     132:	8d 87       	std	Y+13, r24	; 0x0d
     134:	9e 87       	std	Y+14, r25	; 0x0e
     136:	af 87       	std	Y+15, r26	; 0x0f
     138:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	4a e7       	ldi	r20, 0x7A	; 122
     140:	55 e4       	ldi	r21, 0x45	; 69
     142:	6d 85       	ldd	r22, Y+13	; 0x0d
     144:	7e 85       	ldd	r23, Y+14	; 0x0e
     146:	8f 85       	ldd	r24, Y+15	; 0x0f
     148:	98 89       	ldd	r25, Y+16	; 0x10
     14a:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     14e:	dc 01       	movw	r26, r24
     150:	cb 01       	movw	r24, r22
     152:	89 8b       	std	Y+17, r24	; 0x11
     154:	9a 8b       	std	Y+18, r25	; 0x12
     156:	ab 8b       	std	Y+19, r26	; 0x13
     158:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     15a:	20 e0       	ldi	r18, 0x00	; 0
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	40 e8       	ldi	r20, 0x80	; 128
     160:	5f e3       	ldi	r21, 0x3F	; 63
     162:	69 89       	ldd	r22, Y+17	; 0x11
     164:	7a 89       	ldd	r23, Y+18	; 0x12
     166:	8b 89       	ldd	r24, Y+19	; 0x13
     168:	9c 89       	ldd	r25, Y+20	; 0x14
     16a:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
     16e:	88 23       	and	r24, r24
     170:	2c f4       	brge	.+10     	; 0x17c <main+0xda>
		__ticks = 1;
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	9e 8b       	std	Y+22, r25	; 0x16
     178:	8d 8b       	std	Y+21, r24	; 0x15
     17a:	3f c0       	rjmp	.+126    	; 0x1fa <main+0x158>
	else if (__tmp > 65535)
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	3f ef       	ldi	r19, 0xFF	; 255
     180:	4f e7       	ldi	r20, 0x7F	; 127
     182:	57 e4       	ldi	r21, 0x47	; 71
     184:	69 89       	ldd	r22, Y+17	; 0x11
     186:	7a 89       	ldd	r23, Y+18	; 0x12
     188:	8b 89       	ldd	r24, Y+19	; 0x13
     18a:	9c 89       	ldd	r25, Y+20	; 0x14
     18c:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
     190:	18 16       	cp	r1, r24
     192:	4c f5       	brge	.+82     	; 0x1e6 <main+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     194:	20 e0       	ldi	r18, 0x00	; 0
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	40 e2       	ldi	r20, 0x20	; 32
     19a:	51 e4       	ldi	r21, 0x41	; 65
     19c:	6d 85       	ldd	r22, Y+13	; 0x0d
     19e:	7e 85       	ldd	r23, Y+14	; 0x0e
     1a0:	8f 85       	ldd	r24, Y+15	; 0x0f
     1a2:	98 89       	ldd	r25, Y+16	; 0x10
     1a4:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     1a8:	dc 01       	movw	r26, r24
     1aa:	cb 01       	movw	r24, r22
     1ac:	bc 01       	movw	r22, r24
     1ae:	cd 01       	movw	r24, r26
     1b0:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     1b4:	dc 01       	movw	r26, r24
     1b6:	cb 01       	movw	r24, r22
     1b8:	9e 8b       	std	Y+22, r25	; 0x16
     1ba:	8d 8b       	std	Y+21, r24	; 0x15
     1bc:	0f c0       	rjmp	.+30     	; 0x1dc <main+0x13a>
     1be:	80 e9       	ldi	r24, 0x90	; 144
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	98 8f       	std	Y+24, r25	; 0x18
     1c4:	8f 8b       	std	Y+23, r24	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1c6:	8f 89       	ldd	r24, Y+23	; 0x17
     1c8:	98 8d       	ldd	r25, Y+24	; 0x18
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0x128>
     1ce:	98 8f       	std	Y+24, r25	; 0x18
     1d0:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1d2:	8d 89       	ldd	r24, Y+21	; 0x15
     1d4:	9e 89       	ldd	r25, Y+22	; 0x16
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	9e 8b       	std	Y+22, r25	; 0x16
     1da:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1dc:	8d 89       	ldd	r24, Y+21	; 0x15
     1de:	9e 89       	ldd	r25, Y+22	; 0x16
     1e0:	89 2b       	or	r24, r25
     1e2:	69 f7       	brne	.-38     	; 0x1be <main+0x11c>
     1e4:	14 c0       	rjmp	.+40     	; 0x20e <main+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1e6:	69 89       	ldd	r22, Y+17	; 0x11
     1e8:	7a 89       	ldd	r23, Y+18	; 0x12
     1ea:	8b 89       	ldd	r24, Y+19	; 0x13
     1ec:	9c 89       	ldd	r25, Y+20	; 0x14
     1ee:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     1f2:	dc 01       	movw	r26, r24
     1f4:	cb 01       	movw	r24, r22
     1f6:	9e 8b       	std	Y+22, r25	; 0x16
     1f8:	8d 8b       	std	Y+21, r24	; 0x15
     1fa:	8d 89       	ldd	r24, Y+21	; 0x15
     1fc:	9e 89       	ldd	r25, Y+22	; 0x16
     1fe:	9a 8f       	std	Y+26, r25	; 0x1a
     200:	89 8f       	std	Y+25, r24	; 0x19
     202:	89 8d       	ldd	r24, Y+25	; 0x19
     204:	9a 8d       	ldd	r25, Y+26	; 0x1a
     206:	01 97       	sbiw	r24, 0x01	; 1
     208:	f1 f7       	brne	.-4      	; 0x206 <main+0x164>
     20a:	9a 8f       	std	Y+26, r25	; 0x1a
     20c:	89 8f       	std	Y+25, r24	; 0x19
	
    while (1) 
    {
		
		_delay_ms(400);
		LCD_Clear(); //clear display every loop
     20e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <LCD_Clear>
		
		
		//channel 1
		
		//finger 1
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN0, DIO_HIGH);
     212:	41 e0       	ldi	r20, 0x01	; 1
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	a8 ec       	ldi	r26, 0xC8	; 200
     222:	b2 e4       	ldi	r27, 0x42	; 66
     224:	8b 8f       	std	Y+27, r24	; 0x1b
     226:	9c 8f       	std	Y+28, r25	; 0x1c
     228:	ad 8f       	std	Y+29, r26	; 0x1d
     22a:	be 8f       	std	Y+30, r27	; 0x1e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	4a e7       	ldi	r20, 0x7A	; 122
     232:	55 e4       	ldi	r21, 0x45	; 69
     234:	6b 8d       	ldd	r22, Y+27	; 0x1b
     236:	7c 8d       	ldd	r23, Y+28	; 0x1c
     238:	8d 8d       	ldd	r24, Y+29	; 0x1d
     23a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     23c:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     240:	dc 01       	movw	r26, r24
     242:	cb 01       	movw	r24, r22
     244:	8f 8f       	std	Y+31, r24	; 0x1f
     246:	98 a3       	std	Y+32, r25	; 0x20
     248:	a9 a3       	std	Y+33, r26	; 0x21
     24a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e8       	ldi	r20, 0x80	; 128
     252:	5f e3       	ldi	r21, 0x3F	; 63
     254:	6f 8d       	ldd	r22, Y+31	; 0x1f
     256:	78 a1       	ldd	r23, Y+32	; 0x20
     258:	89 a1       	ldd	r24, Y+33	; 0x21
     25a:	9a a1       	ldd	r25, Y+34	; 0x22
     25c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
     260:	88 23       	and	r24, r24
     262:	2c f4       	brge	.+10     	; 0x26e <main+0x1cc>
		__ticks = 1;
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	9c a3       	std	Y+36, r25	; 0x24
     26a:	8b a3       	std	Y+35, r24	; 0x23
     26c:	3f c0       	rjmp	.+126    	; 0x2ec <main+0x24a>
	else if (__tmp > 65535)
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	3f ef       	ldi	r19, 0xFF	; 255
     272:	4f e7       	ldi	r20, 0x7F	; 127
     274:	57 e4       	ldi	r21, 0x47	; 71
     276:	6f 8d       	ldd	r22, Y+31	; 0x1f
     278:	78 a1       	ldd	r23, Y+32	; 0x20
     27a:	89 a1       	ldd	r24, Y+33	; 0x21
     27c:	9a a1       	ldd	r25, Y+34	; 0x22
     27e:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
     282:	18 16       	cp	r1, r24
     284:	4c f5       	brge	.+82     	; 0x2d8 <main+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	40 e2       	ldi	r20, 0x20	; 32
     28c:	51 e4       	ldi	r21, 0x41	; 65
     28e:	6b 8d       	ldd	r22, Y+27	; 0x1b
     290:	7c 8d       	ldd	r23, Y+28	; 0x1c
     292:	8d 8d       	ldd	r24, Y+29	; 0x1d
     294:	9e 8d       	ldd	r25, Y+30	; 0x1e
     296:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     29a:	dc 01       	movw	r26, r24
     29c:	cb 01       	movw	r24, r22
     29e:	bc 01       	movw	r22, r24
     2a0:	cd 01       	movw	r24, r26
     2a2:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     2a6:	dc 01       	movw	r26, r24
     2a8:	cb 01       	movw	r24, r22
     2aa:	9c a3       	std	Y+36, r25	; 0x24
     2ac:	8b a3       	std	Y+35, r24	; 0x23
     2ae:	0f c0       	rjmp	.+30     	; 0x2ce <main+0x22c>
     2b0:	80 e9       	ldi	r24, 0x90	; 144
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	9e a3       	std	Y+38, r25	; 0x26
     2b6:	8d a3       	std	Y+37, r24	; 0x25
     2b8:	8d a1       	ldd	r24, Y+37	; 0x25
     2ba:	9e a1       	ldd	r25, Y+38	; 0x26
     2bc:	01 97       	sbiw	r24, 0x01	; 1
     2be:	f1 f7       	brne	.-4      	; 0x2bc <main+0x21a>
     2c0:	9e a3       	std	Y+38, r25	; 0x26
     2c2:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2c4:	8b a1       	ldd	r24, Y+35	; 0x23
     2c6:	9c a1       	ldd	r25, Y+36	; 0x24
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	9c a3       	std	Y+36, r25	; 0x24
     2cc:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ce:	8b a1       	ldd	r24, Y+35	; 0x23
     2d0:	9c a1       	ldd	r25, Y+36	; 0x24
     2d2:	89 2b       	or	r24, r25
     2d4:	69 f7       	brne	.-38     	; 0x2b0 <main+0x20e>
     2d6:	14 c0       	rjmp	.+40     	; 0x300 <main+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2d8:	6f 8d       	ldd	r22, Y+31	; 0x1f
     2da:	78 a1       	ldd	r23, Y+32	; 0x20
     2dc:	89 a1       	ldd	r24, Y+33	; 0x21
     2de:	9a a1       	ldd	r25, Y+34	; 0x22
     2e0:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     2e4:	dc 01       	movw	r26, r24
     2e6:	cb 01       	movw	r24, r22
     2e8:	9c a3       	std	Y+36, r25	; 0x24
     2ea:	8b a3       	std	Y+35, r24	; 0x23
     2ec:	8b a1       	ldd	r24, Y+35	; 0x23
     2ee:	9c a1       	ldd	r25, Y+36	; 0x24
     2f0:	98 a7       	std	Y+40, r25	; 0x28
     2f2:	8f a3       	std	Y+39, r24	; 0x27
     2f4:	8f a1       	ldd	r24, Y+39	; 0x27
     2f6:	98 a5       	ldd	r25, Y+40	; 0x28
     2f8:	01 97       	sbiw	r24, 0x01	; 1
     2fa:	f1 f7       	brne	.-4      	; 0x2f8 <main+0x256>
     2fc:	98 a7       	std	Y+40, r25	; 0x28
     2fe:	8f a3       	std	Y+39, r24	; 0x27
		_delay_ms(100);
		x = (ADC_Read(ADC_CH3)*5)/1024;//neglect
     300:	83 e0       	ldi	r24, 0x03	; 3
     302:	0e 94 01 12 	call	0x2402	; 0x2402 <ADC_Read>
     306:	9c 01       	movw	r18, r24
     308:	c9 01       	movw	r24, r18
     30a:	88 0f       	add	r24, r24
     30c:	99 1f       	adc	r25, r25
     30e:	88 0f       	add	r24, r24
     310:	99 1f       	adc	r25, r25
     312:	82 0f       	add	r24, r18
     314:	93 1f       	adc	r25, r19
     316:	89 2f       	mov	r24, r25
     318:	99 27       	eor	r25, r25
     31a:	86 95       	lsr	r24
     31c:	86 95       	lsr	r24
     31e:	9c 87       	std	Y+12, r25	; 0x0c
     320:	8b 87       	std	Y+11, r24	; 0x0b
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	a0 e8       	ldi	r26, 0x80	; 128
     328:	bf e3       	ldi	r27, 0x3F	; 63
     32a:	89 a7       	std	Y+41, r24	; 0x29
     32c:	9a a7       	std	Y+42, r25	; 0x2a
     32e:	ab a7       	std	Y+43, r26	; 0x2b
     330:	bc a7       	std	Y+44, r27	; 0x2c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	4a e7       	ldi	r20, 0x7A	; 122
     338:	55 e4       	ldi	r21, 0x45	; 69
     33a:	69 a5       	ldd	r22, Y+41	; 0x29
     33c:	7a a5       	ldd	r23, Y+42	; 0x2a
     33e:	8b a5       	ldd	r24, Y+43	; 0x2b
     340:	9c a5       	ldd	r25, Y+44	; 0x2c
     342:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     346:	dc 01       	movw	r26, r24
     348:	cb 01       	movw	r24, r22
     34a:	8d a7       	std	Y+45, r24	; 0x2d
     34c:	9e a7       	std	Y+46, r25	; 0x2e
     34e:	af a7       	std	Y+47, r26	; 0x2f
     350:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	40 e8       	ldi	r20, 0x80	; 128
     358:	5f e3       	ldi	r21, 0x3F	; 63
     35a:	6d a5       	ldd	r22, Y+45	; 0x2d
     35c:	7e a5       	ldd	r23, Y+46	; 0x2e
     35e:	8f a5       	ldd	r24, Y+47	; 0x2f
     360:	98 a9       	ldd	r25, Y+48	; 0x30
     362:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
     366:	88 23       	and	r24, r24
     368:	2c f4       	brge	.+10     	; 0x374 <main+0x2d2>
		__ticks = 1;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	9a ab       	std	Y+50, r25	; 0x32
     370:	89 ab       	std	Y+49, r24	; 0x31
     372:	3f c0       	rjmp	.+126    	; 0x3f2 <main+0x350>
	else if (__tmp > 65535)
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	3f ef       	ldi	r19, 0xFF	; 255
     378:	4f e7       	ldi	r20, 0x7F	; 127
     37a:	57 e4       	ldi	r21, 0x47	; 71
     37c:	6d a5       	ldd	r22, Y+45	; 0x2d
     37e:	7e a5       	ldd	r23, Y+46	; 0x2e
     380:	8f a5       	ldd	r24, Y+47	; 0x2f
     382:	98 a9       	ldd	r25, Y+48	; 0x30
     384:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
     388:	18 16       	cp	r1, r24
     38a:	4c f5       	brge	.+82     	; 0x3de <main+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	40 e2       	ldi	r20, 0x20	; 32
     392:	51 e4       	ldi	r21, 0x41	; 65
     394:	69 a5       	ldd	r22, Y+41	; 0x29
     396:	7a a5       	ldd	r23, Y+42	; 0x2a
     398:	8b a5       	ldd	r24, Y+43	; 0x2b
     39a:	9c a5       	ldd	r25, Y+44	; 0x2c
     39c:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     3a0:	dc 01       	movw	r26, r24
     3a2:	cb 01       	movw	r24, r22
     3a4:	bc 01       	movw	r22, r24
     3a6:	cd 01       	movw	r24, r26
     3a8:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     3ac:	dc 01       	movw	r26, r24
     3ae:	cb 01       	movw	r24, r22
     3b0:	9a ab       	std	Y+50, r25	; 0x32
     3b2:	89 ab       	std	Y+49, r24	; 0x31
     3b4:	0f c0       	rjmp	.+30     	; 0x3d4 <main+0x332>
     3b6:	80 e9       	ldi	r24, 0x90	; 144
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	9c ab       	std	Y+52, r25	; 0x34
     3bc:	8b ab       	std	Y+51, r24	; 0x33
     3be:	8b a9       	ldd	r24, Y+51	; 0x33
     3c0:	9c a9       	ldd	r25, Y+52	; 0x34
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <main+0x320>
     3c6:	9c ab       	std	Y+52, r25	; 0x34
     3c8:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3ca:	89 a9       	ldd	r24, Y+49	; 0x31
     3cc:	9a a9       	ldd	r25, Y+50	; 0x32
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	9a ab       	std	Y+50, r25	; 0x32
     3d2:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3d4:	89 a9       	ldd	r24, Y+49	; 0x31
     3d6:	9a a9       	ldd	r25, Y+50	; 0x32
     3d8:	89 2b       	or	r24, r25
     3da:	69 f7       	brne	.-38     	; 0x3b6 <main+0x314>
     3dc:	14 c0       	rjmp	.+40     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3de:	6d a5       	ldd	r22, Y+45	; 0x2d
     3e0:	7e a5       	ldd	r23, Y+46	; 0x2e
     3e2:	8f a5       	ldd	r24, Y+47	; 0x2f
     3e4:	98 a9       	ldd	r25, Y+48	; 0x30
     3e6:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     3ea:	dc 01       	movw	r26, r24
     3ec:	cb 01       	movw	r24, r22
     3ee:	9a ab       	std	Y+50, r25	; 0x32
     3f0:	89 ab       	std	Y+49, r24	; 0x31
     3f2:	89 a9       	ldd	r24, Y+49	; 0x31
     3f4:	9a a9       	ldd	r25, Y+50	; 0x32
     3f6:	9e ab       	std	Y+54, r25	; 0x36
     3f8:	8d ab       	std	Y+53, r24	; 0x35
     3fa:	8d a9       	ldd	r24, Y+53	; 0x35
     3fc:	9e a9       	ldd	r25, Y+54	; 0x36
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	f1 f7       	brne	.-4      	; 0x3fe <main+0x35c>
     402:	9e ab       	std	Y+54, r25	; 0x36
     404:	8d ab       	std	Y+53, r24	; 0x35
		_delay_ms(1);
		F1 = (ADC_Read(ADC_CH3)*5)/1024;
     406:	83 e0       	ldi	r24, 0x03	; 3
     408:	0e 94 01 12 	call	0x2402	; 0x2402 <ADC_Read>
     40c:	9c 01       	movw	r18, r24
     40e:	c9 01       	movw	r24, r18
     410:	88 0f       	add	r24, r24
     412:	99 1f       	adc	r25, r25
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	82 0f       	add	r24, r18
     41a:	93 1f       	adc	r25, r19
     41c:	89 2f       	mov	r24, r25
     41e:	99 27       	eor	r25, r25
     420:	86 95       	lsr	r24
     422:	86 95       	lsr	r24
     424:	9a 83       	std	Y+2, r25	; 0x02
     426:	89 83       	std	Y+1, r24	; 0x01
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN0, DIO_LOW);
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
		
		//finger 2
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN1, DIO_HIGH);
     432:	41 e0       	ldi	r20, 0x01	; 1
     434:	61 e0       	ldi	r22, 0x01	; 1
     436:	82 e0       	ldi	r24, 0x02	; 2
     438:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	a8 ec       	ldi	r26, 0xC8	; 200
     442:	b2 e4       	ldi	r27, 0x42	; 66
     444:	8f ab       	std	Y+55, r24	; 0x37
     446:	98 af       	std	Y+56, r25	; 0x38
     448:	a9 af       	std	Y+57, r26	; 0x39
     44a:	ba af       	std	Y+58, r27	; 0x3a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	4a e7       	ldi	r20, 0x7A	; 122
     452:	55 e4       	ldi	r21, 0x45	; 69
     454:	6f a9       	ldd	r22, Y+55	; 0x37
     456:	78 ad       	ldd	r23, Y+56	; 0x38
     458:	89 ad       	ldd	r24, Y+57	; 0x39
     45a:	9a ad       	ldd	r25, Y+58	; 0x3a
     45c:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     460:	dc 01       	movw	r26, r24
     462:	cb 01       	movw	r24, r22
     464:	8b af       	std	Y+59, r24	; 0x3b
     466:	9c af       	std	Y+60, r25	; 0x3c
     468:	ad af       	std	Y+61, r26	; 0x3d
     46a:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	40 e8       	ldi	r20, 0x80	; 128
     472:	5f e3       	ldi	r21, 0x3F	; 63
     474:	6b ad       	ldd	r22, Y+59	; 0x3b
     476:	7c ad       	ldd	r23, Y+60	; 0x3c
     478:	8d ad       	ldd	r24, Y+61	; 0x3d
     47a:	9e ad       	ldd	r25, Y+62	; 0x3e
     47c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
     480:	88 23       	and	r24, r24
     482:	44 f4       	brge	.+16     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
		__ticks = 1;
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	ce 01       	movw	r24, r28
     48a:	cf 96       	adiw	r24, 0x3f	; 63
     48c:	fc 01       	movw	r30, r24
     48e:	31 83       	std	Z+1, r19	; 0x01
     490:	20 83       	st	Z, r18
     492:	5f c0       	rjmp	.+190    	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
	else if (__tmp > 65535)
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	3f ef       	ldi	r19, 0xFF	; 255
     498:	4f e7       	ldi	r20, 0x7F	; 127
     49a:	57 e4       	ldi	r21, 0x47	; 71
     49c:	6b ad       	ldd	r22, Y+59	; 0x3b
     49e:	7c ad       	ldd	r23, Y+60	; 0x3c
     4a0:	8d ad       	ldd	r24, Y+61	; 0x3d
     4a2:	9e ad       	ldd	r25, Y+62	; 0x3e
     4a4:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
     4a8:	18 16       	cp	r1, r24
     4aa:	0c f0       	brlt	.+2      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4ac:	44 c0       	rjmp	.+136    	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	40 e2       	ldi	r20, 0x20	; 32
     4b4:	51 e4       	ldi	r21, 0x41	; 65
     4b6:	6f a9       	ldd	r22, Y+55	; 0x37
     4b8:	78 ad       	ldd	r23, Y+56	; 0x38
     4ba:	89 ad       	ldd	r24, Y+57	; 0x39
     4bc:	9a ad       	ldd	r25, Y+58	; 0x3a
     4be:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     4c2:	dc 01       	movw	r26, r24
     4c4:	cb 01       	movw	r24, r22
     4c6:	bc 01       	movw	r22, r24
     4c8:	cd 01       	movw	r24, r26
     4ca:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     4ce:	dc 01       	movw	r26, r24
     4d0:	cb 01       	movw	r24, r22
     4d2:	9e 01       	movw	r18, r28
     4d4:	21 5c       	subi	r18, 0xC1	; 193
     4d6:	3f 4f       	sbci	r19, 0xFF	; 255
     4d8:	f9 01       	movw	r30, r18
     4da:	91 83       	std	Z+1, r25	; 0x01
     4dc:	80 83       	st	Z, r24
     4de:	23 c0       	rjmp	.+70     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     4e0:	ce 01       	movw	r24, r28
     4e2:	8f 5b       	subi	r24, 0xBF	; 191
     4e4:	9f 4f       	sbci	r25, 0xFF	; 255
     4e6:	20 e9       	ldi	r18, 0x90	; 144
     4e8:	31 e0       	ldi	r19, 0x01	; 1
     4ea:	fc 01       	movw	r30, r24
     4ec:	31 83       	std	Z+1, r19	; 0x01
     4ee:	20 83       	st	Z, r18
     4f0:	ce 01       	movw	r24, r28
     4f2:	8f 5b       	subi	r24, 0xBF	; 191
     4f4:	9f 4f       	sbci	r25, 0xFF	; 255
     4f6:	fc 01       	movw	r30, r24
     4f8:	80 81       	ld	r24, Z
     4fa:	91 81       	ldd	r25, Z+1	; 0x01
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     500:	9e 01       	movw	r18, r28
     502:	2f 5b       	subi	r18, 0xBF	; 191
     504:	3f 4f       	sbci	r19, 0xFF	; 255
     506:	f9 01       	movw	r30, r18
     508:	91 83       	std	Z+1, r25	; 0x01
     50a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     50c:	ce 01       	movw	r24, r28
     50e:	cf 96       	adiw	r24, 0x3f	; 63
     510:	fc 01       	movw	r30, r24
     512:	80 81       	ld	r24, Z
     514:	91 81       	ldd	r25, Z+1	; 0x01
     516:	9c 01       	movw	r18, r24
     518:	21 50       	subi	r18, 0x01	; 1
     51a:	31 09       	sbc	r19, r1
     51c:	ce 01       	movw	r24, r28
     51e:	cf 96       	adiw	r24, 0x3f	; 63
     520:	fc 01       	movw	r30, r24
     522:	31 83       	std	Z+1, r19	; 0x01
     524:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     526:	ce 01       	movw	r24, r28
     528:	cf 96       	adiw	r24, 0x3f	; 63
     52a:	fc 01       	movw	r30, r24
     52c:	80 81       	ld	r24, Z
     52e:	91 81       	ldd	r25, Z+1	; 0x01
     530:	89 2b       	or	r24, r25
     532:	b1 f6       	brne	.-84     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     534:	28 c0       	rjmp	.+80     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     536:	6b ad       	ldd	r22, Y+59	; 0x3b
     538:	7c ad       	ldd	r23, Y+60	; 0x3c
     53a:	8d ad       	ldd	r24, Y+61	; 0x3d
     53c:	9e ad       	ldd	r25, Y+62	; 0x3e
     53e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     542:	dc 01       	movw	r26, r24
     544:	cb 01       	movw	r24, r22
     546:	9e 01       	movw	r18, r28
     548:	21 5c       	subi	r18, 0xC1	; 193
     54a:	3f 4f       	sbci	r19, 0xFF	; 255
     54c:	f9 01       	movw	r30, r18
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	80 83       	st	Z, r24
     552:	ce 01       	movw	r24, r28
     554:	8d 5b       	subi	r24, 0xBD	; 189
     556:	9f 4f       	sbci	r25, 0xFF	; 255
     558:	9e 01       	movw	r18, r28
     55a:	21 5c       	subi	r18, 0xC1	; 193
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	f9 01       	movw	r30, r18
     560:	20 81       	ld	r18, Z
     562:	31 81       	ldd	r19, Z+1	; 0x01
     564:	fc 01       	movw	r30, r24
     566:	31 83       	std	Z+1, r19	; 0x01
     568:	20 83       	st	Z, r18
     56a:	ce 01       	movw	r24, r28
     56c:	8d 5b       	subi	r24, 0xBD	; 189
     56e:	9f 4f       	sbci	r25, 0xFF	; 255
     570:	fc 01       	movw	r30, r24
     572:	80 81       	ld	r24, Z
     574:	91 81       	ldd	r25, Z+1	; 0x01
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	f1 f7       	brne	.-4      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
     57a:	9e 01       	movw	r18, r28
     57c:	2d 5b       	subi	r18, 0xBD	; 189
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	f9 01       	movw	r30, r18
     582:	91 83       	std	Z+1, r25	; 0x01
     584:	80 83       	st	Z, r24
		_delay_ms(100);
		x = (ADC_Read(ADC_CH3)*5)/1024;//neglect
     586:	83 e0       	ldi	r24, 0x03	; 3
     588:	0e 94 01 12 	call	0x2402	; 0x2402 <ADC_Read>
     58c:	9c 01       	movw	r18, r24
     58e:	c9 01       	movw	r24, r18
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	82 0f       	add	r24, r18
     59a:	93 1f       	adc	r25, r19
     59c:	89 2f       	mov	r24, r25
     59e:	99 27       	eor	r25, r25
     5a0:	86 95       	lsr	r24
     5a2:	86 95       	lsr	r24
     5a4:	9c 87       	std	Y+12, r25	; 0x0c
     5a6:	8b 87       	std	Y+11, r24	; 0x0b
     5a8:	9e 01       	movw	r18, r28
     5aa:	2b 5b       	subi	r18, 0xBB	; 187
     5ac:	3f 4f       	sbci	r19, 0xFF	; 255
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	a0 e8       	ldi	r26, 0x80	; 128
     5b4:	bf e3       	ldi	r27, 0x3F	; 63
     5b6:	f9 01       	movw	r30, r18
     5b8:	80 83       	st	Z, r24
     5ba:	91 83       	std	Z+1, r25	; 0x01
     5bc:	a2 83       	std	Z+2, r26	; 0x02
     5be:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5c0:	8e 01       	movw	r16, r28
     5c2:	07 5b       	subi	r16, 0xB7	; 183
     5c4:	1f 4f       	sbci	r17, 0xFF	; 255
     5c6:	ce 01       	movw	r24, r28
     5c8:	8b 5b       	subi	r24, 0xBB	; 187
     5ca:	9f 4f       	sbci	r25, 0xFF	; 255
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	4a e7       	ldi	r20, 0x7A	; 122
     5d2:	55 e4       	ldi	r21, 0x45	; 69
     5d4:	fc 01       	movw	r30, r24
     5d6:	60 81       	ld	r22, Z
     5d8:	71 81       	ldd	r23, Z+1	; 0x01
     5da:	82 81       	ldd	r24, Z+2	; 0x02
     5dc:	93 81       	ldd	r25, Z+3	; 0x03
     5de:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     5e2:	dc 01       	movw	r26, r24
     5e4:	cb 01       	movw	r24, r22
     5e6:	f8 01       	movw	r30, r16
     5e8:	80 83       	st	Z, r24
     5ea:	91 83       	std	Z+1, r25	; 0x01
     5ec:	a2 83       	std	Z+2, r26	; 0x02
     5ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     5f0:	ce 01       	movw	r24, r28
     5f2:	87 5b       	subi	r24, 0xB7	; 183
     5f4:	9f 4f       	sbci	r25, 0xFF	; 255
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	40 e8       	ldi	r20, 0x80	; 128
     5fc:	5f e3       	ldi	r21, 0x3F	; 63
     5fe:	fc 01       	movw	r30, r24
     600:	60 81       	ld	r22, Z
     602:	71 81       	ldd	r23, Z+1	; 0x01
     604:	82 81       	ldd	r24, Z+2	; 0x02
     606:	93 81       	ldd	r25, Z+3	; 0x03
     608:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
     60c:	88 23       	and	r24, r24
     60e:	4c f4       	brge	.+18     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
		__ticks = 1;
     610:	ce 01       	movw	r24, r28
     612:	83 5b       	subi	r24, 0xB3	; 179
     614:	9f 4f       	sbci	r25, 0xFF	; 255
     616:	21 e0       	ldi	r18, 0x01	; 1
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	fc 01       	movw	r30, r24
     61c:	31 83       	std	Z+1, r19	; 0x01
     61e:	20 83       	st	Z, r18
     620:	6d c0       	rjmp	.+218    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
	else if (__tmp > 65535)
     622:	ce 01       	movw	r24, r28
     624:	87 5b       	subi	r24, 0xB7	; 183
     626:	9f 4f       	sbci	r25, 0xFF	; 255
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	3f ef       	ldi	r19, 0xFF	; 255
     62c:	4f e7       	ldi	r20, 0x7F	; 127
     62e:	57 e4       	ldi	r21, 0x47	; 71
     630:	fc 01       	movw	r30, r24
     632:	60 81       	ld	r22, Z
     634:	71 81       	ldd	r23, Z+1	; 0x01
     636:	82 81       	ldd	r24, Z+2	; 0x02
     638:	93 81       	ldd	r25, Z+3	; 0x03
     63a:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
     63e:	18 16       	cp	r1, r24
     640:	0c f0       	brlt	.+2      	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
     642:	4a c0       	rjmp	.+148    	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     644:	ce 01       	movw	r24, r28
     646:	8b 5b       	subi	r24, 0xBB	; 187
     648:	9f 4f       	sbci	r25, 0xFF	; 255
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	40 e2       	ldi	r20, 0x20	; 32
     650:	51 e4       	ldi	r21, 0x41	; 65
     652:	fc 01       	movw	r30, r24
     654:	60 81       	ld	r22, Z
     656:	71 81       	ldd	r23, Z+1	; 0x01
     658:	82 81       	ldd	r24, Z+2	; 0x02
     65a:	93 81       	ldd	r25, Z+3	; 0x03
     65c:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     660:	dc 01       	movw	r26, r24
     662:	cb 01       	movw	r24, r22
     664:	8e 01       	movw	r16, r28
     666:	03 5b       	subi	r16, 0xB3	; 179
     668:	1f 4f       	sbci	r17, 0xFF	; 255
     66a:	bc 01       	movw	r22, r24
     66c:	cd 01       	movw	r24, r26
     66e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     672:	dc 01       	movw	r26, r24
     674:	cb 01       	movw	r24, r22
     676:	f8 01       	movw	r30, r16
     678:	91 83       	std	Z+1, r25	; 0x01
     67a:	80 83       	st	Z, r24
     67c:	24 c0       	rjmp	.+72     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
     67e:	ce 01       	movw	r24, r28
     680:	81 5b       	subi	r24, 0xB1	; 177
     682:	9f 4f       	sbci	r25, 0xFF	; 255
     684:	20 e9       	ldi	r18, 0x90	; 144
     686:	31 e0       	ldi	r19, 0x01	; 1
     688:	fc 01       	movw	r30, r24
     68a:	31 83       	std	Z+1, r19	; 0x01
     68c:	20 83       	st	Z, r18
     68e:	ce 01       	movw	r24, r28
     690:	81 5b       	subi	r24, 0xB1	; 177
     692:	9f 4f       	sbci	r25, 0xFF	; 255
     694:	fc 01       	movw	r30, r24
     696:	80 81       	ld	r24, Z
     698:	91 81       	ldd	r25, Z+1	; 0x01
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
     69e:	9e 01       	movw	r18, r28
     6a0:	21 5b       	subi	r18, 0xB1	; 177
     6a2:	3f 4f       	sbci	r19, 0xFF	; 255
     6a4:	f9 01       	movw	r30, r18
     6a6:	91 83       	std	Z+1, r25	; 0x01
     6a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6aa:	ce 01       	movw	r24, r28
     6ac:	83 5b       	subi	r24, 0xB3	; 179
     6ae:	9f 4f       	sbci	r25, 0xFF	; 255
     6b0:	9e 01       	movw	r18, r28
     6b2:	23 5b       	subi	r18, 0xB3	; 179
     6b4:	3f 4f       	sbci	r19, 0xFF	; 255
     6b6:	f9 01       	movw	r30, r18
     6b8:	20 81       	ld	r18, Z
     6ba:	31 81       	ldd	r19, Z+1	; 0x01
     6bc:	21 50       	subi	r18, 0x01	; 1
     6be:	31 09       	sbc	r19, r1
     6c0:	fc 01       	movw	r30, r24
     6c2:	31 83       	std	Z+1, r19	; 0x01
     6c4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6c6:	ce 01       	movw	r24, r28
     6c8:	83 5b       	subi	r24, 0xB3	; 179
     6ca:	9f 4f       	sbci	r25, 0xFF	; 255
     6cc:	fc 01       	movw	r30, r24
     6ce:	80 81       	ld	r24, Z
     6d0:	91 81       	ldd	r25, Z+1	; 0x01
     6d2:	89 2b       	or	r24, r25
     6d4:	a1 f6       	brne	.-88     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
     6d6:	2c c0       	rjmp	.+88     	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6d8:	8e 01       	movw	r16, r28
     6da:	03 5b       	subi	r16, 0xB3	; 179
     6dc:	1f 4f       	sbci	r17, 0xFF	; 255
     6de:	ce 01       	movw	r24, r28
     6e0:	87 5b       	subi	r24, 0xB7	; 183
     6e2:	9f 4f       	sbci	r25, 0xFF	; 255
     6e4:	fc 01       	movw	r30, r24
     6e6:	60 81       	ld	r22, Z
     6e8:	71 81       	ldd	r23, Z+1	; 0x01
     6ea:	82 81       	ldd	r24, Z+2	; 0x02
     6ec:	93 81       	ldd	r25, Z+3	; 0x03
     6ee:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	f8 01       	movw	r30, r16
     6f8:	91 83       	std	Z+1, r25	; 0x01
     6fa:	80 83       	st	Z, r24
     6fc:	ce 01       	movw	r24, r28
     6fe:	8f 5a       	subi	r24, 0xAF	; 175
     700:	9f 4f       	sbci	r25, 0xFF	; 255
     702:	9e 01       	movw	r18, r28
     704:	23 5b       	subi	r18, 0xB3	; 179
     706:	3f 4f       	sbci	r19, 0xFF	; 255
     708:	f9 01       	movw	r30, r18
     70a:	20 81       	ld	r18, Z
     70c:	31 81       	ldd	r19, Z+1	; 0x01
     70e:	fc 01       	movw	r30, r24
     710:	31 83       	std	Z+1, r19	; 0x01
     712:	20 83       	st	Z, r18
     714:	ce 01       	movw	r24, r28
     716:	8f 5a       	subi	r24, 0xAF	; 175
     718:	9f 4f       	sbci	r25, 0xFF	; 255
     71a:	fc 01       	movw	r30, r24
     71c:	80 81       	ld	r24, Z
     71e:	91 81       	ldd	r25, Z+1	; 0x01
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
     724:	9e 01       	movw	r18, r28
     726:	2f 5a       	subi	r18, 0xAF	; 175
     728:	3f 4f       	sbci	r19, 0xFF	; 255
     72a:	f9 01       	movw	r30, r18
     72c:	91 83       	std	Z+1, r25	; 0x01
     72e:	80 83       	st	Z, r24
		_delay_ms(1);
		F2 = (ADC_Read(ADC_CH3)*5)/1024;
     730:	83 e0       	ldi	r24, 0x03	; 3
     732:	0e 94 01 12 	call	0x2402	; 0x2402 <ADC_Read>
     736:	9c 01       	movw	r18, r24
     738:	c9 01       	movw	r24, r18
     73a:	88 0f       	add	r24, r24
     73c:	99 1f       	adc	r25, r25
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	82 0f       	add	r24, r18
     744:	93 1f       	adc	r25, r19
     746:	89 2f       	mov	r24, r25
     748:	99 27       	eor	r25, r25
     74a:	86 95       	lsr	r24
     74c:	86 95       	lsr	r24
     74e:	9c 83       	std	Y+4, r25	; 0x04
     750:	8b 83       	std	Y+3, r24	; 0x03
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN1, DIO_LOW);
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
		
		//fonger 3
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN2, DIO_HIGH);
     75c:	41 e0       	ldi	r20, 0x01	; 1
     75e:	62 e0       	ldi	r22, 0x02	; 2
     760:	82 e0       	ldi	r24, 0x02	; 2
     762:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
     766:	9e 01       	movw	r18, r28
     768:	2d 5a       	subi	r18, 0xAD	; 173
     76a:	3f 4f       	sbci	r19, 0xFF	; 255
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	a8 ec       	ldi	r26, 0xC8	; 200
     772:	b2 e4       	ldi	r27, 0x42	; 66
     774:	f9 01       	movw	r30, r18
     776:	80 83       	st	Z, r24
     778:	91 83       	std	Z+1, r25	; 0x01
     77a:	a2 83       	std	Z+2, r26	; 0x02
     77c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     77e:	8e 01       	movw	r16, r28
     780:	09 5a       	subi	r16, 0xA9	; 169
     782:	1f 4f       	sbci	r17, 0xFF	; 255
     784:	ce 01       	movw	r24, r28
     786:	8d 5a       	subi	r24, 0xAD	; 173
     788:	9f 4f       	sbci	r25, 0xFF	; 255
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	4a e7       	ldi	r20, 0x7A	; 122
     790:	55 e4       	ldi	r21, 0x45	; 69
     792:	fc 01       	movw	r30, r24
     794:	60 81       	ld	r22, Z
     796:	71 81       	ldd	r23, Z+1	; 0x01
     798:	82 81       	ldd	r24, Z+2	; 0x02
     79a:	93 81       	ldd	r25, Z+3	; 0x03
     79c:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     7a0:	dc 01       	movw	r26, r24
     7a2:	cb 01       	movw	r24, r22
     7a4:	f8 01       	movw	r30, r16
     7a6:	80 83       	st	Z, r24
     7a8:	91 83       	std	Z+1, r25	; 0x01
     7aa:	a2 83       	std	Z+2, r26	; 0x02
     7ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     7ae:	ce 01       	movw	r24, r28
     7b0:	89 5a       	subi	r24, 0xA9	; 169
     7b2:	9f 4f       	sbci	r25, 0xFF	; 255
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	40 e8       	ldi	r20, 0x80	; 128
     7ba:	5f e3       	ldi	r21, 0x3F	; 63
     7bc:	fc 01       	movw	r30, r24
     7be:	60 81       	ld	r22, Z
     7c0:	71 81       	ldd	r23, Z+1	; 0x01
     7c2:	82 81       	ldd	r24, Z+2	; 0x02
     7c4:	93 81       	ldd	r25, Z+3	; 0x03
     7c6:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
     7ca:	88 23       	and	r24, r24
     7cc:	4c f4       	brge	.+18     	; 0x7e0 <__LOCK_REGION_LENGTH__+0x3e0>
		__ticks = 1;
     7ce:	ce 01       	movw	r24, r28
     7d0:	85 5a       	subi	r24, 0xA5	; 165
     7d2:	9f 4f       	sbci	r25, 0xFF	; 255
     7d4:	21 e0       	ldi	r18, 0x01	; 1
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	fc 01       	movw	r30, r24
     7da:	31 83       	std	Z+1, r19	; 0x01
     7dc:	20 83       	st	Z, r18
     7de:	6d c0       	rjmp	.+218    	; 0x8ba <__stack+0x5b>
	else if (__tmp > 65535)
     7e0:	ce 01       	movw	r24, r28
     7e2:	89 5a       	subi	r24, 0xA9	; 169
     7e4:	9f 4f       	sbci	r25, 0xFF	; 255
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	3f ef       	ldi	r19, 0xFF	; 255
     7ea:	4f e7       	ldi	r20, 0x7F	; 127
     7ec:	57 e4       	ldi	r21, 0x47	; 71
     7ee:	fc 01       	movw	r30, r24
     7f0:	60 81       	ld	r22, Z
     7f2:	71 81       	ldd	r23, Z+1	; 0x01
     7f4:	82 81       	ldd	r24, Z+2	; 0x02
     7f6:	93 81       	ldd	r25, Z+3	; 0x03
     7f8:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
     7fc:	18 16       	cp	r1, r24
     7fe:	0c f0       	brlt	.+2      	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
     800:	4a c0       	rjmp	.+148    	; 0x896 <__stack+0x37>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     802:	ce 01       	movw	r24, r28
     804:	8d 5a       	subi	r24, 0xAD	; 173
     806:	9f 4f       	sbci	r25, 0xFF	; 255
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	40 e2       	ldi	r20, 0x20	; 32
     80e:	51 e4       	ldi	r21, 0x41	; 65
     810:	fc 01       	movw	r30, r24
     812:	60 81       	ld	r22, Z
     814:	71 81       	ldd	r23, Z+1	; 0x01
     816:	82 81       	ldd	r24, Z+2	; 0x02
     818:	93 81       	ldd	r25, Z+3	; 0x03
     81a:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     81e:	dc 01       	movw	r26, r24
     820:	cb 01       	movw	r24, r22
     822:	8e 01       	movw	r16, r28
     824:	05 5a       	subi	r16, 0xA5	; 165
     826:	1f 4f       	sbci	r17, 0xFF	; 255
     828:	bc 01       	movw	r22, r24
     82a:	cd 01       	movw	r24, r26
     82c:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     830:	dc 01       	movw	r26, r24
     832:	cb 01       	movw	r24, r22
     834:	f8 01       	movw	r30, r16
     836:	91 83       	std	Z+1, r25	; 0x01
     838:	80 83       	st	Z, r24
     83a:	24 c0       	rjmp	.+72     	; 0x884 <__stack+0x25>
     83c:	ce 01       	movw	r24, r28
     83e:	83 5a       	subi	r24, 0xA3	; 163
     840:	9f 4f       	sbci	r25, 0xFF	; 255
     842:	20 e9       	ldi	r18, 0x90	; 144
     844:	31 e0       	ldi	r19, 0x01	; 1
     846:	fc 01       	movw	r30, r24
     848:	31 83       	std	Z+1, r19	; 0x01
     84a:	20 83       	st	Z, r18
     84c:	ce 01       	movw	r24, r28
     84e:	83 5a       	subi	r24, 0xA3	; 163
     850:	9f 4f       	sbci	r25, 0xFF	; 255
     852:	fc 01       	movw	r30, r24
     854:	80 81       	ld	r24, Z
     856:	91 81       	ldd	r25, Z+1	; 0x01
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	f1 f7       	brne	.-4      	; 0x858 <__LOCK_REGION_LENGTH__+0x458>
     85c:	9e 01       	movw	r18, r28
     85e:	23 5a       	subi	r18, 0xA3	; 163
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	f9 01       	movw	r30, r18
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     868:	ce 01       	movw	r24, r28
     86a:	85 5a       	subi	r24, 0xA5	; 165
     86c:	9f 4f       	sbci	r25, 0xFF	; 255
     86e:	9e 01       	movw	r18, r28
     870:	25 5a       	subi	r18, 0xA5	; 165
     872:	3f 4f       	sbci	r19, 0xFF	; 255
     874:	f9 01       	movw	r30, r18
     876:	20 81       	ld	r18, Z
     878:	31 81       	ldd	r19, Z+1	; 0x01
     87a:	21 50       	subi	r18, 0x01	; 1
     87c:	31 09       	sbc	r19, r1
     87e:	fc 01       	movw	r30, r24
     880:	31 83       	std	Z+1, r19	; 0x01
     882:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     884:	ce 01       	movw	r24, r28
     886:	85 5a       	subi	r24, 0xA5	; 165
     888:	9f 4f       	sbci	r25, 0xFF	; 255
     88a:	fc 01       	movw	r30, r24
     88c:	80 81       	ld	r24, Z
     88e:	91 81       	ldd	r25, Z+1	; 0x01
     890:	89 2b       	or	r24, r25
     892:	a1 f6       	brne	.-88     	; 0x83c <__LOCK_REGION_LENGTH__+0x43c>
     894:	2c c0       	rjmp	.+88     	; 0x8ee <__stack+0x8f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     896:	8e 01       	movw	r16, r28
     898:	05 5a       	subi	r16, 0xA5	; 165
     89a:	1f 4f       	sbci	r17, 0xFF	; 255
     89c:	ce 01       	movw	r24, r28
     89e:	89 5a       	subi	r24, 0xA9	; 169
     8a0:	9f 4f       	sbci	r25, 0xFF	; 255
     8a2:	fc 01       	movw	r30, r24
     8a4:	60 81       	ld	r22, Z
     8a6:	71 81       	ldd	r23, Z+1	; 0x01
     8a8:	82 81       	ldd	r24, Z+2	; 0x02
     8aa:	93 81       	ldd	r25, Z+3	; 0x03
     8ac:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     8b0:	dc 01       	movw	r26, r24
     8b2:	cb 01       	movw	r24, r22
     8b4:	f8 01       	movw	r30, r16
     8b6:	91 83       	std	Z+1, r25	; 0x01
     8b8:	80 83       	st	Z, r24
     8ba:	ce 01       	movw	r24, r28
     8bc:	81 5a       	subi	r24, 0xA1	; 161
     8be:	9f 4f       	sbci	r25, 0xFF	; 255
     8c0:	9e 01       	movw	r18, r28
     8c2:	25 5a       	subi	r18, 0xA5	; 165
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	f9 01       	movw	r30, r18
     8c8:	20 81       	ld	r18, Z
     8ca:	31 81       	ldd	r19, Z+1	; 0x01
     8cc:	fc 01       	movw	r30, r24
     8ce:	31 83       	std	Z+1, r19	; 0x01
     8d0:	20 83       	st	Z, r18
     8d2:	ce 01       	movw	r24, r28
     8d4:	81 5a       	subi	r24, 0xA1	; 161
     8d6:	9f 4f       	sbci	r25, 0xFF	; 255
     8d8:	fc 01       	movw	r30, r24
     8da:	80 81       	ld	r24, Z
     8dc:	91 81       	ldd	r25, Z+1	; 0x01
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <__stack+0x7f>
     8e2:	9e 01       	movw	r18, r28
     8e4:	21 5a       	subi	r18, 0xA1	; 161
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	f9 01       	movw	r30, r18
     8ea:	91 83       	std	Z+1, r25	; 0x01
     8ec:	80 83       	st	Z, r24
		_delay_ms(100);
		x = (ADC_Read(ADC_CH3)*5)/1024;//neglect
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	0e 94 01 12 	call	0x2402	; 0x2402 <ADC_Read>
     8f4:	9c 01       	movw	r18, r24
     8f6:	c9 01       	movw	r24, r18
     8f8:	88 0f       	add	r24, r24
     8fa:	99 1f       	adc	r25, r25
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	82 0f       	add	r24, r18
     902:	93 1f       	adc	r25, r19
     904:	89 2f       	mov	r24, r25
     906:	99 27       	eor	r25, r25
     908:	86 95       	lsr	r24
     90a:	86 95       	lsr	r24
     90c:	9c 87       	std	Y+12, r25	; 0x0c
     90e:	8b 87       	std	Y+11, r24	; 0x0b
     910:	9e 01       	movw	r18, r28
     912:	2f 59       	subi	r18, 0x9F	; 159
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	a0 e8       	ldi	r26, 0x80	; 128
     91c:	bf e3       	ldi	r27, 0x3F	; 63
     91e:	f9 01       	movw	r30, r18
     920:	80 83       	st	Z, r24
     922:	91 83       	std	Z+1, r25	; 0x01
     924:	a2 83       	std	Z+2, r26	; 0x02
     926:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     928:	8e 01       	movw	r16, r28
     92a:	0b 59       	subi	r16, 0x9B	; 155
     92c:	1f 4f       	sbci	r17, 0xFF	; 255
     92e:	ce 01       	movw	r24, r28
     930:	8f 59       	subi	r24, 0x9F	; 159
     932:	9f 4f       	sbci	r25, 0xFF	; 255
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	4a e7       	ldi	r20, 0x7A	; 122
     93a:	55 e4       	ldi	r21, 0x45	; 69
     93c:	fc 01       	movw	r30, r24
     93e:	60 81       	ld	r22, Z
     940:	71 81       	ldd	r23, Z+1	; 0x01
     942:	82 81       	ldd	r24, Z+2	; 0x02
     944:	93 81       	ldd	r25, Z+3	; 0x03
     946:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     94a:	dc 01       	movw	r26, r24
     94c:	cb 01       	movw	r24, r22
     94e:	f8 01       	movw	r30, r16
     950:	80 83       	st	Z, r24
     952:	91 83       	std	Z+1, r25	; 0x01
     954:	a2 83       	std	Z+2, r26	; 0x02
     956:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     958:	ce 01       	movw	r24, r28
     95a:	8b 59       	subi	r24, 0x9B	; 155
     95c:	9f 4f       	sbci	r25, 0xFF	; 255
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	40 e8       	ldi	r20, 0x80	; 128
     964:	5f e3       	ldi	r21, 0x3F	; 63
     966:	fc 01       	movw	r30, r24
     968:	60 81       	ld	r22, Z
     96a:	71 81       	ldd	r23, Z+1	; 0x01
     96c:	82 81       	ldd	r24, Z+2	; 0x02
     96e:	93 81       	ldd	r25, Z+3	; 0x03
     970:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
     974:	88 23       	and	r24, r24
     976:	4c f4       	brge	.+18     	; 0x98a <__stack+0x12b>
		__ticks = 1;
     978:	ce 01       	movw	r24, r28
     97a:	87 59       	subi	r24, 0x97	; 151
     97c:	9f 4f       	sbci	r25, 0xFF	; 255
     97e:	21 e0       	ldi	r18, 0x01	; 1
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	fc 01       	movw	r30, r24
     984:	31 83       	std	Z+1, r19	; 0x01
     986:	20 83       	st	Z, r18
     988:	6d c0       	rjmp	.+218    	; 0xa64 <__stack+0x205>
	else if (__tmp > 65535)
     98a:	ce 01       	movw	r24, r28
     98c:	8b 59       	subi	r24, 0x9B	; 155
     98e:	9f 4f       	sbci	r25, 0xFF	; 255
     990:	20 e0       	ldi	r18, 0x00	; 0
     992:	3f ef       	ldi	r19, 0xFF	; 255
     994:	4f e7       	ldi	r20, 0x7F	; 127
     996:	57 e4       	ldi	r21, 0x47	; 71
     998:	fc 01       	movw	r30, r24
     99a:	60 81       	ld	r22, Z
     99c:	71 81       	ldd	r23, Z+1	; 0x01
     99e:	82 81       	ldd	r24, Z+2	; 0x02
     9a0:	93 81       	ldd	r25, Z+3	; 0x03
     9a2:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
     9a6:	18 16       	cp	r1, r24
     9a8:	0c f0       	brlt	.+2      	; 0x9ac <__stack+0x14d>
     9aa:	4a c0       	rjmp	.+148    	; 0xa40 <__stack+0x1e1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9ac:	ce 01       	movw	r24, r28
     9ae:	8f 59       	subi	r24, 0x9F	; 159
     9b0:	9f 4f       	sbci	r25, 0xFF	; 255
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	40 e2       	ldi	r20, 0x20	; 32
     9b8:	51 e4       	ldi	r21, 0x41	; 65
     9ba:	fc 01       	movw	r30, r24
     9bc:	60 81       	ld	r22, Z
     9be:	71 81       	ldd	r23, Z+1	; 0x01
     9c0:	82 81       	ldd	r24, Z+2	; 0x02
     9c2:	93 81       	ldd	r25, Z+3	; 0x03
     9c4:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     9c8:	dc 01       	movw	r26, r24
     9ca:	cb 01       	movw	r24, r22
     9cc:	8e 01       	movw	r16, r28
     9ce:	07 59       	subi	r16, 0x97	; 151
     9d0:	1f 4f       	sbci	r17, 0xFF	; 255
     9d2:	bc 01       	movw	r22, r24
     9d4:	cd 01       	movw	r24, r26
     9d6:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     9da:	dc 01       	movw	r26, r24
     9dc:	cb 01       	movw	r24, r22
     9de:	f8 01       	movw	r30, r16
     9e0:	91 83       	std	Z+1, r25	; 0x01
     9e2:	80 83       	st	Z, r24
     9e4:	24 c0       	rjmp	.+72     	; 0xa2e <__stack+0x1cf>
     9e6:	ce 01       	movw	r24, r28
     9e8:	85 59       	subi	r24, 0x95	; 149
     9ea:	9f 4f       	sbci	r25, 0xFF	; 255
     9ec:	20 e9       	ldi	r18, 0x90	; 144
     9ee:	31 e0       	ldi	r19, 0x01	; 1
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 83       	std	Z+1, r19	; 0x01
     9f4:	20 83       	st	Z, r18
     9f6:	ce 01       	movw	r24, r28
     9f8:	85 59       	subi	r24, 0x95	; 149
     9fa:	9f 4f       	sbci	r25, 0xFF	; 255
     9fc:	fc 01       	movw	r30, r24
     9fe:	80 81       	ld	r24, Z
     a00:	91 81       	ldd	r25, Z+1	; 0x01
     a02:	01 97       	sbiw	r24, 0x01	; 1
     a04:	f1 f7       	brne	.-4      	; 0xa02 <__stack+0x1a3>
     a06:	9e 01       	movw	r18, r28
     a08:	25 59       	subi	r18, 0x95	; 149
     a0a:	3f 4f       	sbci	r19, 0xFF	; 255
     a0c:	f9 01       	movw	r30, r18
     a0e:	91 83       	std	Z+1, r25	; 0x01
     a10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a12:	ce 01       	movw	r24, r28
     a14:	87 59       	subi	r24, 0x97	; 151
     a16:	9f 4f       	sbci	r25, 0xFF	; 255
     a18:	9e 01       	movw	r18, r28
     a1a:	27 59       	subi	r18, 0x97	; 151
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	f9 01       	movw	r30, r18
     a20:	20 81       	ld	r18, Z
     a22:	31 81       	ldd	r19, Z+1	; 0x01
     a24:	21 50       	subi	r18, 0x01	; 1
     a26:	31 09       	sbc	r19, r1
     a28:	fc 01       	movw	r30, r24
     a2a:	31 83       	std	Z+1, r19	; 0x01
     a2c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a2e:	ce 01       	movw	r24, r28
     a30:	87 59       	subi	r24, 0x97	; 151
     a32:	9f 4f       	sbci	r25, 0xFF	; 255
     a34:	fc 01       	movw	r30, r24
     a36:	80 81       	ld	r24, Z
     a38:	91 81       	ldd	r25, Z+1	; 0x01
     a3a:	89 2b       	or	r24, r25
     a3c:	a1 f6       	brne	.-88     	; 0x9e6 <__stack+0x187>
     a3e:	2c c0       	rjmp	.+88     	; 0xa98 <__stack+0x239>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a40:	8e 01       	movw	r16, r28
     a42:	07 59       	subi	r16, 0x97	; 151
     a44:	1f 4f       	sbci	r17, 0xFF	; 255
     a46:	ce 01       	movw	r24, r28
     a48:	8b 59       	subi	r24, 0x9B	; 155
     a4a:	9f 4f       	sbci	r25, 0xFF	; 255
     a4c:	fc 01       	movw	r30, r24
     a4e:	60 81       	ld	r22, Z
     a50:	71 81       	ldd	r23, Z+1	; 0x01
     a52:	82 81       	ldd	r24, Z+2	; 0x02
     a54:	93 81       	ldd	r25, Z+3	; 0x03
     a56:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     a5a:	dc 01       	movw	r26, r24
     a5c:	cb 01       	movw	r24, r22
     a5e:	f8 01       	movw	r30, r16
     a60:	91 83       	std	Z+1, r25	; 0x01
     a62:	80 83       	st	Z, r24
     a64:	ce 01       	movw	r24, r28
     a66:	83 59       	subi	r24, 0x93	; 147
     a68:	9f 4f       	sbci	r25, 0xFF	; 255
     a6a:	9e 01       	movw	r18, r28
     a6c:	27 59       	subi	r18, 0x97	; 151
     a6e:	3f 4f       	sbci	r19, 0xFF	; 255
     a70:	f9 01       	movw	r30, r18
     a72:	20 81       	ld	r18, Z
     a74:	31 81       	ldd	r19, Z+1	; 0x01
     a76:	fc 01       	movw	r30, r24
     a78:	31 83       	std	Z+1, r19	; 0x01
     a7a:	20 83       	st	Z, r18
     a7c:	ce 01       	movw	r24, r28
     a7e:	83 59       	subi	r24, 0x93	; 147
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	fc 01       	movw	r30, r24
     a84:	80 81       	ld	r24, Z
     a86:	91 81       	ldd	r25, Z+1	; 0x01
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <__stack+0x229>
     a8c:	9e 01       	movw	r18, r28
     a8e:	23 59       	subi	r18, 0x93	; 147
     a90:	3f 4f       	sbci	r19, 0xFF	; 255
     a92:	f9 01       	movw	r30, r18
     a94:	91 83       	std	Z+1, r25	; 0x01
     a96:	80 83       	st	Z, r24
		_delay_ms(1);
		F3 = (ADC_Read(ADC_CH3)*5)/1024;
     a98:	83 e0       	ldi	r24, 0x03	; 3
     a9a:	0e 94 01 12 	call	0x2402	; 0x2402 <ADC_Read>
     a9e:	9c 01       	movw	r18, r24
     aa0:	c9 01       	movw	r24, r18
     aa2:	88 0f       	add	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	82 0f       	add	r24, r18
     aac:	93 1f       	adc	r25, r19
     aae:	89 2f       	mov	r24, r25
     ab0:	99 27       	eor	r25, r25
     ab2:	86 95       	lsr	r24
     ab4:	86 95       	lsr	r24
     ab6:	9e 83       	std	Y+6, r25	; 0x06
     ab8:	8d 83       	std	Y+5, r24	; 0x05
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN2, DIO_LOW);
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	62 e0       	ldi	r22, 0x02	; 2
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
		
		
		//finger 4
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN3, DIO_HIGH);
     ac4:	41 e0       	ldi	r20, 0x01	; 1
     ac6:	63 e0       	ldi	r22, 0x03	; 3
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
     ace:	9e 01       	movw	r18, r28
     ad0:	21 59       	subi	r18, 0x91	; 145
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	a8 ec       	ldi	r26, 0xC8	; 200
     ada:	b2 e4       	ldi	r27, 0x42	; 66
     adc:	f9 01       	movw	r30, r18
     ade:	80 83       	st	Z, r24
     ae0:	91 83       	std	Z+1, r25	; 0x01
     ae2:	a2 83       	std	Z+2, r26	; 0x02
     ae4:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ae6:	8e 01       	movw	r16, r28
     ae8:	0d 58       	subi	r16, 0x8D	; 141
     aea:	1f 4f       	sbci	r17, 0xFF	; 255
     aec:	ce 01       	movw	r24, r28
     aee:	81 59       	subi	r24, 0x91	; 145
     af0:	9f 4f       	sbci	r25, 0xFF	; 255
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	4a e7       	ldi	r20, 0x7A	; 122
     af8:	55 e4       	ldi	r21, 0x45	; 69
     afa:	fc 01       	movw	r30, r24
     afc:	60 81       	ld	r22, Z
     afe:	71 81       	ldd	r23, Z+1	; 0x01
     b00:	82 81       	ldd	r24, Z+2	; 0x02
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     b08:	dc 01       	movw	r26, r24
     b0a:	cb 01       	movw	r24, r22
     b0c:	f8 01       	movw	r30, r16
     b0e:	80 83       	st	Z, r24
     b10:	91 83       	std	Z+1, r25	; 0x01
     b12:	a2 83       	std	Z+2, r26	; 0x02
     b14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b16:	ce 01       	movw	r24, r28
     b18:	8d 58       	subi	r24, 0x8D	; 141
     b1a:	9f 4f       	sbci	r25, 0xFF	; 255
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e8       	ldi	r20, 0x80	; 128
     b22:	5f e3       	ldi	r21, 0x3F	; 63
     b24:	fc 01       	movw	r30, r24
     b26:	60 81       	ld	r22, Z
     b28:	71 81       	ldd	r23, Z+1	; 0x01
     b2a:	82 81       	ldd	r24, Z+2	; 0x02
     b2c:	93 81       	ldd	r25, Z+3	; 0x03
     b2e:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
     b32:	88 23       	and	r24, r24
     b34:	4c f4       	brge	.+18     	; 0xb48 <__stack+0x2e9>
		__ticks = 1;
     b36:	ce 01       	movw	r24, r28
     b38:	89 58       	subi	r24, 0x89	; 137
     b3a:	9f 4f       	sbci	r25, 0xFF	; 255
     b3c:	21 e0       	ldi	r18, 0x01	; 1
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	fc 01       	movw	r30, r24
     b42:	31 83       	std	Z+1, r19	; 0x01
     b44:	20 83       	st	Z, r18
     b46:	6d c0       	rjmp	.+218    	; 0xc22 <__stack+0x3c3>
	else if (__tmp > 65535)
     b48:	ce 01       	movw	r24, r28
     b4a:	8d 58       	subi	r24, 0x8D	; 141
     b4c:	9f 4f       	sbci	r25, 0xFF	; 255
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	3f ef       	ldi	r19, 0xFF	; 255
     b52:	4f e7       	ldi	r20, 0x7F	; 127
     b54:	57 e4       	ldi	r21, 0x47	; 71
     b56:	fc 01       	movw	r30, r24
     b58:	60 81       	ld	r22, Z
     b5a:	71 81       	ldd	r23, Z+1	; 0x01
     b5c:	82 81       	ldd	r24, Z+2	; 0x02
     b5e:	93 81       	ldd	r25, Z+3	; 0x03
     b60:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
     b64:	18 16       	cp	r1, r24
     b66:	0c f0       	brlt	.+2      	; 0xb6a <__stack+0x30b>
     b68:	4a c0       	rjmp	.+148    	; 0xbfe <__stack+0x39f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b6a:	ce 01       	movw	r24, r28
     b6c:	81 59       	subi	r24, 0x91	; 145
     b6e:	9f 4f       	sbci	r25, 0xFF	; 255
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	40 e2       	ldi	r20, 0x20	; 32
     b76:	51 e4       	ldi	r21, 0x41	; 65
     b78:	fc 01       	movw	r30, r24
     b7a:	60 81       	ld	r22, Z
     b7c:	71 81       	ldd	r23, Z+1	; 0x01
     b7e:	82 81       	ldd	r24, Z+2	; 0x02
     b80:	93 81       	ldd	r25, Z+3	; 0x03
     b82:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     b86:	dc 01       	movw	r26, r24
     b88:	cb 01       	movw	r24, r22
     b8a:	8e 01       	movw	r16, r28
     b8c:	09 58       	subi	r16, 0x89	; 137
     b8e:	1f 4f       	sbci	r17, 0xFF	; 255
     b90:	bc 01       	movw	r22, r24
     b92:	cd 01       	movw	r24, r26
     b94:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     b98:	dc 01       	movw	r26, r24
     b9a:	cb 01       	movw	r24, r22
     b9c:	f8 01       	movw	r30, r16
     b9e:	91 83       	std	Z+1, r25	; 0x01
     ba0:	80 83       	st	Z, r24
     ba2:	24 c0       	rjmp	.+72     	; 0xbec <__stack+0x38d>
     ba4:	ce 01       	movw	r24, r28
     ba6:	87 58       	subi	r24, 0x87	; 135
     ba8:	9f 4f       	sbci	r25, 0xFF	; 255
     baa:	20 e9       	ldi	r18, 0x90	; 144
     bac:	31 e0       	ldi	r19, 0x01	; 1
     bae:	fc 01       	movw	r30, r24
     bb0:	31 83       	std	Z+1, r19	; 0x01
     bb2:	20 83       	st	Z, r18
     bb4:	ce 01       	movw	r24, r28
     bb6:	87 58       	subi	r24, 0x87	; 135
     bb8:	9f 4f       	sbci	r25, 0xFF	; 255
     bba:	fc 01       	movw	r30, r24
     bbc:	80 81       	ld	r24, Z
     bbe:	91 81       	ldd	r25, Z+1	; 0x01
     bc0:	01 97       	sbiw	r24, 0x01	; 1
     bc2:	f1 f7       	brne	.-4      	; 0xbc0 <__stack+0x361>
     bc4:	9e 01       	movw	r18, r28
     bc6:	27 58       	subi	r18, 0x87	; 135
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	f9 01       	movw	r30, r18
     bcc:	91 83       	std	Z+1, r25	; 0x01
     bce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bd0:	ce 01       	movw	r24, r28
     bd2:	89 58       	subi	r24, 0x89	; 137
     bd4:	9f 4f       	sbci	r25, 0xFF	; 255
     bd6:	9e 01       	movw	r18, r28
     bd8:	29 58       	subi	r18, 0x89	; 137
     bda:	3f 4f       	sbci	r19, 0xFF	; 255
     bdc:	f9 01       	movw	r30, r18
     bde:	20 81       	ld	r18, Z
     be0:	31 81       	ldd	r19, Z+1	; 0x01
     be2:	21 50       	subi	r18, 0x01	; 1
     be4:	31 09       	sbc	r19, r1
     be6:	fc 01       	movw	r30, r24
     be8:	31 83       	std	Z+1, r19	; 0x01
     bea:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bec:	ce 01       	movw	r24, r28
     bee:	89 58       	subi	r24, 0x89	; 137
     bf0:	9f 4f       	sbci	r25, 0xFF	; 255
     bf2:	fc 01       	movw	r30, r24
     bf4:	80 81       	ld	r24, Z
     bf6:	91 81       	ldd	r25, Z+1	; 0x01
     bf8:	89 2b       	or	r24, r25
     bfa:	a1 f6       	brne	.-88     	; 0xba4 <__stack+0x345>
     bfc:	2c c0       	rjmp	.+88     	; 0xc56 <__stack+0x3f7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bfe:	8e 01       	movw	r16, r28
     c00:	09 58       	subi	r16, 0x89	; 137
     c02:	1f 4f       	sbci	r17, 0xFF	; 255
     c04:	ce 01       	movw	r24, r28
     c06:	8d 58       	subi	r24, 0x8D	; 141
     c08:	9f 4f       	sbci	r25, 0xFF	; 255
     c0a:	fc 01       	movw	r30, r24
     c0c:	60 81       	ld	r22, Z
     c0e:	71 81       	ldd	r23, Z+1	; 0x01
     c10:	82 81       	ldd	r24, Z+2	; 0x02
     c12:	93 81       	ldd	r25, Z+3	; 0x03
     c14:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	f8 01       	movw	r30, r16
     c1e:	91 83       	std	Z+1, r25	; 0x01
     c20:	80 83       	st	Z, r24
     c22:	ce 01       	movw	r24, r28
     c24:	85 58       	subi	r24, 0x85	; 133
     c26:	9f 4f       	sbci	r25, 0xFF	; 255
     c28:	9e 01       	movw	r18, r28
     c2a:	29 58       	subi	r18, 0x89	; 137
     c2c:	3f 4f       	sbci	r19, 0xFF	; 255
     c2e:	f9 01       	movw	r30, r18
     c30:	20 81       	ld	r18, Z
     c32:	31 81       	ldd	r19, Z+1	; 0x01
     c34:	fc 01       	movw	r30, r24
     c36:	31 83       	std	Z+1, r19	; 0x01
     c38:	20 83       	st	Z, r18
     c3a:	ce 01       	movw	r24, r28
     c3c:	85 58       	subi	r24, 0x85	; 133
     c3e:	9f 4f       	sbci	r25, 0xFF	; 255
     c40:	fc 01       	movw	r30, r24
     c42:	80 81       	ld	r24, Z
     c44:	91 81       	ldd	r25, Z+1	; 0x01
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <__stack+0x3e7>
     c4a:	9e 01       	movw	r18, r28
     c4c:	25 58       	subi	r18, 0x85	; 133
     c4e:	3f 4f       	sbci	r19, 0xFF	; 255
     c50:	f9 01       	movw	r30, r18
     c52:	91 83       	std	Z+1, r25	; 0x01
     c54:	80 83       	st	Z, r24
		_delay_ms(100);
		x = (ADC_Read(ADC_CH3)*5)/1024;//neglect
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	0e 94 01 12 	call	0x2402	; 0x2402 <ADC_Read>
     c5c:	9c 01       	movw	r18, r24
     c5e:	c9 01       	movw	r24, r18
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	82 0f       	add	r24, r18
     c6a:	93 1f       	adc	r25, r19
     c6c:	89 2f       	mov	r24, r25
     c6e:	99 27       	eor	r25, r25
     c70:	86 95       	lsr	r24
     c72:	86 95       	lsr	r24
     c74:	9c 87       	std	Y+12, r25	; 0x0c
     c76:	8b 87       	std	Y+11, r24	; 0x0b
     c78:	9e 01       	movw	r18, r28
     c7a:	23 58       	subi	r18, 0x83	; 131
     c7c:	3f 4f       	sbci	r19, 0xFF	; 255
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	a0 e8       	ldi	r26, 0x80	; 128
     c84:	bf e3       	ldi	r27, 0x3F	; 63
     c86:	f9 01       	movw	r30, r18
     c88:	80 83       	st	Z, r24
     c8a:	91 83       	std	Z+1, r25	; 0x01
     c8c:	a2 83       	std	Z+2, r26	; 0x02
     c8e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c90:	8e 01       	movw	r16, r28
     c92:	0f 57       	subi	r16, 0x7F	; 127
     c94:	1f 4f       	sbci	r17, 0xFF	; 255
     c96:	ce 01       	movw	r24, r28
     c98:	83 58       	subi	r24, 0x83	; 131
     c9a:	9f 4f       	sbci	r25, 0xFF	; 255
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	4a e7       	ldi	r20, 0x7A	; 122
     ca2:	55 e4       	ldi	r21, 0x45	; 69
     ca4:	fc 01       	movw	r30, r24
     ca6:	60 81       	ld	r22, Z
     ca8:	71 81       	ldd	r23, Z+1	; 0x01
     caa:	82 81       	ldd	r24, Z+2	; 0x02
     cac:	93 81       	ldd	r25, Z+3	; 0x03
     cae:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	f8 01       	movw	r30, r16
     cb8:	80 83       	st	Z, r24
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	a2 83       	std	Z+2, r26	; 0x02
     cbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cc0:	ce 01       	movw	r24, r28
     cc2:	8f 57       	subi	r24, 0x7F	; 127
     cc4:	9f 4f       	sbci	r25, 0xFF	; 255
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	40 e8       	ldi	r20, 0x80	; 128
     ccc:	5f e3       	ldi	r21, 0x3F	; 63
     cce:	fc 01       	movw	r30, r24
     cd0:	60 81       	ld	r22, Z
     cd2:	71 81       	ldd	r23, Z+1	; 0x01
     cd4:	82 81       	ldd	r24, Z+2	; 0x02
     cd6:	93 81       	ldd	r25, Z+3	; 0x03
     cd8:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
     cdc:	88 23       	and	r24, r24
     cde:	4c f4       	brge	.+18     	; 0xcf2 <__stack+0x493>
		__ticks = 1;
     ce0:	ce 01       	movw	r24, r28
     ce2:	8b 57       	subi	r24, 0x7B	; 123
     ce4:	9f 4f       	sbci	r25, 0xFF	; 255
     ce6:	21 e0       	ldi	r18, 0x01	; 1
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	fc 01       	movw	r30, r24
     cec:	31 83       	std	Z+1, r19	; 0x01
     cee:	20 83       	st	Z, r18
     cf0:	6d c0       	rjmp	.+218    	; 0xdcc <__stack+0x56d>
	else if (__tmp > 65535)
     cf2:	ce 01       	movw	r24, r28
     cf4:	8f 57       	subi	r24, 0x7F	; 127
     cf6:	9f 4f       	sbci	r25, 0xFF	; 255
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	3f ef       	ldi	r19, 0xFF	; 255
     cfc:	4f e7       	ldi	r20, 0x7F	; 127
     cfe:	57 e4       	ldi	r21, 0x47	; 71
     d00:	fc 01       	movw	r30, r24
     d02:	60 81       	ld	r22, Z
     d04:	71 81       	ldd	r23, Z+1	; 0x01
     d06:	82 81       	ldd	r24, Z+2	; 0x02
     d08:	93 81       	ldd	r25, Z+3	; 0x03
     d0a:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
     d0e:	18 16       	cp	r1, r24
     d10:	0c f0       	brlt	.+2      	; 0xd14 <__stack+0x4b5>
     d12:	4a c0       	rjmp	.+148    	; 0xda8 <__stack+0x549>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d14:	ce 01       	movw	r24, r28
     d16:	83 58       	subi	r24, 0x83	; 131
     d18:	9f 4f       	sbci	r25, 0xFF	; 255
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e2       	ldi	r20, 0x20	; 32
     d20:	51 e4       	ldi	r21, 0x41	; 65
     d22:	fc 01       	movw	r30, r24
     d24:	60 81       	ld	r22, Z
     d26:	71 81       	ldd	r23, Z+1	; 0x01
     d28:	82 81       	ldd	r24, Z+2	; 0x02
     d2a:	93 81       	ldd	r25, Z+3	; 0x03
     d2c:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	8e 01       	movw	r16, r28
     d36:	0b 57       	subi	r16, 0x7B	; 123
     d38:	1f 4f       	sbci	r17, 0xFF	; 255
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	f8 01       	movw	r30, r16
     d48:	91 83       	std	Z+1, r25	; 0x01
     d4a:	80 83       	st	Z, r24
     d4c:	24 c0       	rjmp	.+72     	; 0xd96 <__stack+0x537>
     d4e:	ce 01       	movw	r24, r28
     d50:	89 57       	subi	r24, 0x79	; 121
     d52:	9f 4f       	sbci	r25, 0xFF	; 255
     d54:	20 e9       	ldi	r18, 0x90	; 144
     d56:	31 e0       	ldi	r19, 0x01	; 1
     d58:	fc 01       	movw	r30, r24
     d5a:	31 83       	std	Z+1, r19	; 0x01
     d5c:	20 83       	st	Z, r18
     d5e:	ce 01       	movw	r24, r28
     d60:	89 57       	subi	r24, 0x79	; 121
     d62:	9f 4f       	sbci	r25, 0xFF	; 255
     d64:	fc 01       	movw	r30, r24
     d66:	80 81       	ld	r24, Z
     d68:	91 81       	ldd	r25, Z+1	; 0x01
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <__stack+0x50b>
     d6e:	9e 01       	movw	r18, r28
     d70:	29 57       	subi	r18, 0x79	; 121
     d72:	3f 4f       	sbci	r19, 0xFF	; 255
     d74:	f9 01       	movw	r30, r18
     d76:	91 83       	std	Z+1, r25	; 0x01
     d78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d7a:	ce 01       	movw	r24, r28
     d7c:	8b 57       	subi	r24, 0x7B	; 123
     d7e:	9f 4f       	sbci	r25, 0xFF	; 255
     d80:	9e 01       	movw	r18, r28
     d82:	2b 57       	subi	r18, 0x7B	; 123
     d84:	3f 4f       	sbci	r19, 0xFF	; 255
     d86:	f9 01       	movw	r30, r18
     d88:	20 81       	ld	r18, Z
     d8a:	31 81       	ldd	r19, Z+1	; 0x01
     d8c:	21 50       	subi	r18, 0x01	; 1
     d8e:	31 09       	sbc	r19, r1
     d90:	fc 01       	movw	r30, r24
     d92:	31 83       	std	Z+1, r19	; 0x01
     d94:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d96:	ce 01       	movw	r24, r28
     d98:	8b 57       	subi	r24, 0x7B	; 123
     d9a:	9f 4f       	sbci	r25, 0xFF	; 255
     d9c:	fc 01       	movw	r30, r24
     d9e:	80 81       	ld	r24, Z
     da0:	91 81       	ldd	r25, Z+1	; 0x01
     da2:	89 2b       	or	r24, r25
     da4:	a1 f6       	brne	.-88     	; 0xd4e <__stack+0x4ef>
     da6:	2c c0       	rjmp	.+88     	; 0xe00 <__stack+0x5a1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     da8:	8e 01       	movw	r16, r28
     daa:	0b 57       	subi	r16, 0x7B	; 123
     dac:	1f 4f       	sbci	r17, 0xFF	; 255
     dae:	ce 01       	movw	r24, r28
     db0:	8f 57       	subi	r24, 0x7F	; 127
     db2:	9f 4f       	sbci	r25, 0xFF	; 255
     db4:	fc 01       	movw	r30, r24
     db6:	60 81       	ld	r22, Z
     db8:	71 81       	ldd	r23, Z+1	; 0x01
     dba:	82 81       	ldd	r24, Z+2	; 0x02
     dbc:	93 81       	ldd	r25, Z+3	; 0x03
     dbe:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	f8 01       	movw	r30, r16
     dc8:	91 83       	std	Z+1, r25	; 0x01
     dca:	80 83       	st	Z, r24
     dcc:	ce 01       	movw	r24, r28
     dce:	87 57       	subi	r24, 0x77	; 119
     dd0:	9f 4f       	sbci	r25, 0xFF	; 255
     dd2:	9e 01       	movw	r18, r28
     dd4:	2b 57       	subi	r18, 0x7B	; 123
     dd6:	3f 4f       	sbci	r19, 0xFF	; 255
     dd8:	f9 01       	movw	r30, r18
     dda:	20 81       	ld	r18, Z
     ddc:	31 81       	ldd	r19, Z+1	; 0x01
     dde:	fc 01       	movw	r30, r24
     de0:	31 83       	std	Z+1, r19	; 0x01
     de2:	20 83       	st	Z, r18
     de4:	ce 01       	movw	r24, r28
     de6:	87 57       	subi	r24, 0x77	; 119
     de8:	9f 4f       	sbci	r25, 0xFF	; 255
     dea:	fc 01       	movw	r30, r24
     dec:	80 81       	ld	r24, Z
     dee:	91 81       	ldd	r25, Z+1	; 0x01
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	f1 f7       	brne	.-4      	; 0xdf0 <__stack+0x591>
     df4:	9e 01       	movw	r18, r28
     df6:	27 57       	subi	r18, 0x77	; 119
     df8:	3f 4f       	sbci	r19, 0xFF	; 255
     dfa:	f9 01       	movw	r30, r18
     dfc:	91 83       	std	Z+1, r25	; 0x01
     dfe:	80 83       	st	Z, r24
		_delay_ms(1);
		F4 = (ADC_Read(ADC_CH3)*5)/1024;
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	0e 94 01 12 	call	0x2402	; 0x2402 <ADC_Read>
     e06:	9c 01       	movw	r18, r24
     e08:	c9 01       	movw	r24, r18
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	82 0f       	add	r24, r18
     e14:	93 1f       	adc	r25, r19
     e16:	89 2f       	mov	r24, r25
     e18:	99 27       	eor	r25, r25
     e1a:	86 95       	lsr	r24
     e1c:	86 95       	lsr	r24
     e1e:	98 87       	std	Y+8, r25	; 0x08
     e20:	8f 83       	std	Y+7, r24	; 0x07
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN3, DIO_LOW);
     e22:	40 e0       	ldi	r20, 0x00	; 0
     e24:	63 e0       	ldi	r22, 0x03	; 3
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
		
		//finger 5
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN4, DIO_HIGH);
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	64 e0       	ldi	r22, 0x04	; 4
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
     e36:	9e 01       	movw	r18, r28
     e38:	25 57       	subi	r18, 0x75	; 117
     e3a:	3f 4f       	sbci	r19, 0xFF	; 255
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	a8 ec       	ldi	r26, 0xC8	; 200
     e42:	b2 e4       	ldi	r27, 0x42	; 66
     e44:	f9 01       	movw	r30, r18
     e46:	80 83       	st	Z, r24
     e48:	91 83       	std	Z+1, r25	; 0x01
     e4a:	a2 83       	std	Z+2, r26	; 0x02
     e4c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e4e:	8e 01       	movw	r16, r28
     e50:	01 57       	subi	r16, 0x71	; 113
     e52:	1f 4f       	sbci	r17, 0xFF	; 255
     e54:	ce 01       	movw	r24, r28
     e56:	85 57       	subi	r24, 0x75	; 117
     e58:	9f 4f       	sbci	r25, 0xFF	; 255
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	4a e7       	ldi	r20, 0x7A	; 122
     e60:	55 e4       	ldi	r21, 0x45	; 69
     e62:	fc 01       	movw	r30, r24
     e64:	60 81       	ld	r22, Z
     e66:	71 81       	ldd	r23, Z+1	; 0x01
     e68:	82 81       	ldd	r24, Z+2	; 0x02
     e6a:	93 81       	ldd	r25, Z+3	; 0x03
     e6c:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	f8 01       	movw	r30, r16
     e76:	80 83       	st	Z, r24
     e78:	91 83       	std	Z+1, r25	; 0x01
     e7a:	a2 83       	std	Z+2, r26	; 0x02
     e7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e7e:	ce 01       	movw	r24, r28
     e80:	81 57       	subi	r24, 0x71	; 113
     e82:	9f 4f       	sbci	r25, 0xFF	; 255
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e8       	ldi	r20, 0x80	; 128
     e8a:	5f e3       	ldi	r21, 0x3F	; 63
     e8c:	fc 01       	movw	r30, r24
     e8e:	60 81       	ld	r22, Z
     e90:	71 81       	ldd	r23, Z+1	; 0x01
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
     e9a:	88 23       	and	r24, r24
     e9c:	4c f4       	brge	.+18     	; 0xeb0 <__stack+0x651>
		__ticks = 1;
     e9e:	ce 01       	movw	r24, r28
     ea0:	8d 56       	subi	r24, 0x6D	; 109
     ea2:	9f 4f       	sbci	r25, 0xFF	; 255
     ea4:	21 e0       	ldi	r18, 0x01	; 1
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	fc 01       	movw	r30, r24
     eaa:	31 83       	std	Z+1, r19	; 0x01
     eac:	20 83       	st	Z, r18
     eae:	6d c0       	rjmp	.+218    	; 0xf8a <__stack+0x72b>
	else if (__tmp > 65535)
     eb0:	ce 01       	movw	r24, r28
     eb2:	81 57       	subi	r24, 0x71	; 113
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	3f ef       	ldi	r19, 0xFF	; 255
     eba:	4f e7       	ldi	r20, 0x7F	; 127
     ebc:	57 e4       	ldi	r21, 0x47	; 71
     ebe:	fc 01       	movw	r30, r24
     ec0:	60 81       	ld	r22, Z
     ec2:	71 81       	ldd	r23, Z+1	; 0x01
     ec4:	82 81       	ldd	r24, Z+2	; 0x02
     ec6:	93 81       	ldd	r25, Z+3	; 0x03
     ec8:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
     ecc:	18 16       	cp	r1, r24
     ece:	0c f0       	brlt	.+2      	; 0xed2 <__stack+0x673>
     ed0:	4a c0       	rjmp	.+148    	; 0xf66 <__stack+0x707>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed2:	ce 01       	movw	r24, r28
     ed4:	85 57       	subi	r24, 0x75	; 117
     ed6:	9f 4f       	sbci	r25, 0xFF	; 255
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e2       	ldi	r20, 0x20	; 32
     ede:	51 e4       	ldi	r21, 0x41	; 65
     ee0:	fc 01       	movw	r30, r24
     ee2:	60 81       	ld	r22, Z
     ee4:	71 81       	ldd	r23, Z+1	; 0x01
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	93 81       	ldd	r25, Z+3	; 0x03
     eea:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	8e 01       	movw	r16, r28
     ef4:	0d 56       	subi	r16, 0x6D	; 109
     ef6:	1f 4f       	sbci	r17, 0xFF	; 255
     ef8:	bc 01       	movw	r22, r24
     efa:	cd 01       	movw	r24, r26
     efc:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	f8 01       	movw	r30, r16
     f06:	91 83       	std	Z+1, r25	; 0x01
     f08:	80 83       	st	Z, r24
     f0a:	24 c0       	rjmp	.+72     	; 0xf54 <__stack+0x6f5>
     f0c:	ce 01       	movw	r24, r28
     f0e:	8b 56       	subi	r24, 0x6B	; 107
     f10:	9f 4f       	sbci	r25, 0xFF	; 255
     f12:	20 e9       	ldi	r18, 0x90	; 144
     f14:	31 e0       	ldi	r19, 0x01	; 1
     f16:	fc 01       	movw	r30, r24
     f18:	31 83       	std	Z+1, r19	; 0x01
     f1a:	20 83       	st	Z, r18
     f1c:	ce 01       	movw	r24, r28
     f1e:	8b 56       	subi	r24, 0x6B	; 107
     f20:	9f 4f       	sbci	r25, 0xFF	; 255
     f22:	fc 01       	movw	r30, r24
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <__stack+0x6c9>
     f2c:	9e 01       	movw	r18, r28
     f2e:	2b 56       	subi	r18, 0x6B	; 107
     f30:	3f 4f       	sbci	r19, 0xFF	; 255
     f32:	f9 01       	movw	r30, r18
     f34:	91 83       	std	Z+1, r25	; 0x01
     f36:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f38:	ce 01       	movw	r24, r28
     f3a:	8d 56       	subi	r24, 0x6D	; 109
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	9e 01       	movw	r18, r28
     f40:	2d 56       	subi	r18, 0x6D	; 109
     f42:	3f 4f       	sbci	r19, 0xFF	; 255
     f44:	f9 01       	movw	r30, r18
     f46:	20 81       	ld	r18, Z
     f48:	31 81       	ldd	r19, Z+1	; 0x01
     f4a:	21 50       	subi	r18, 0x01	; 1
     f4c:	31 09       	sbc	r19, r1
     f4e:	fc 01       	movw	r30, r24
     f50:	31 83       	std	Z+1, r19	; 0x01
     f52:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f54:	ce 01       	movw	r24, r28
     f56:	8d 56       	subi	r24, 0x6D	; 109
     f58:	9f 4f       	sbci	r25, 0xFF	; 255
     f5a:	fc 01       	movw	r30, r24
     f5c:	80 81       	ld	r24, Z
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
     f60:	89 2b       	or	r24, r25
     f62:	a1 f6       	brne	.-88     	; 0xf0c <__stack+0x6ad>
     f64:	2c c0       	rjmp	.+88     	; 0xfbe <__stack+0x75f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f66:	8e 01       	movw	r16, r28
     f68:	0d 56       	subi	r16, 0x6D	; 109
     f6a:	1f 4f       	sbci	r17, 0xFF	; 255
     f6c:	ce 01       	movw	r24, r28
     f6e:	81 57       	subi	r24, 0x71	; 113
     f70:	9f 4f       	sbci	r25, 0xFF	; 255
     f72:	fc 01       	movw	r30, r24
     f74:	60 81       	ld	r22, Z
     f76:	71 81       	ldd	r23, Z+1	; 0x01
     f78:	82 81       	ldd	r24, Z+2	; 0x02
     f7a:	93 81       	ldd	r25, Z+3	; 0x03
     f7c:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	f8 01       	movw	r30, r16
     f86:	91 83       	std	Z+1, r25	; 0x01
     f88:	80 83       	st	Z, r24
     f8a:	ce 01       	movw	r24, r28
     f8c:	89 56       	subi	r24, 0x69	; 105
     f8e:	9f 4f       	sbci	r25, 0xFF	; 255
     f90:	9e 01       	movw	r18, r28
     f92:	2d 56       	subi	r18, 0x6D	; 109
     f94:	3f 4f       	sbci	r19, 0xFF	; 255
     f96:	f9 01       	movw	r30, r18
     f98:	20 81       	ld	r18, Z
     f9a:	31 81       	ldd	r19, Z+1	; 0x01
     f9c:	fc 01       	movw	r30, r24
     f9e:	31 83       	std	Z+1, r19	; 0x01
     fa0:	20 83       	st	Z, r18
     fa2:	ce 01       	movw	r24, r28
     fa4:	89 56       	subi	r24, 0x69	; 105
     fa6:	9f 4f       	sbci	r25, 0xFF	; 255
     fa8:	fc 01       	movw	r30, r24
     faa:	80 81       	ld	r24, Z
     fac:	91 81       	ldd	r25, Z+1	; 0x01
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <__stack+0x74f>
     fb2:	9e 01       	movw	r18, r28
     fb4:	29 56       	subi	r18, 0x69	; 105
     fb6:	3f 4f       	sbci	r19, 0xFF	; 255
     fb8:	f9 01       	movw	r30, r18
     fba:	91 83       	std	Z+1, r25	; 0x01
     fbc:	80 83       	st	Z, r24
		_delay_ms(100);
		x = (ADC_Read(ADC_CH3)*5)/1024;//neglect
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	0e 94 01 12 	call	0x2402	; 0x2402 <ADC_Read>
     fc4:	9c 01       	movw	r18, r24
     fc6:	c9 01       	movw	r24, r18
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	82 0f       	add	r24, r18
     fd2:	93 1f       	adc	r25, r19
     fd4:	89 2f       	mov	r24, r25
     fd6:	99 27       	eor	r25, r25
     fd8:	86 95       	lsr	r24
     fda:	86 95       	lsr	r24
     fdc:	9c 87       	std	Y+12, r25	; 0x0c
     fde:	8b 87       	std	Y+11, r24	; 0x0b
     fe0:	9e 01       	movw	r18, r28
     fe2:	27 56       	subi	r18, 0x67	; 103
     fe4:	3f 4f       	sbci	r19, 0xFF	; 255
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	a0 e8       	ldi	r26, 0x80	; 128
     fec:	bf e3       	ldi	r27, 0x3F	; 63
     fee:	f9 01       	movw	r30, r18
     ff0:	80 83       	st	Z, r24
     ff2:	91 83       	std	Z+1, r25	; 0x01
     ff4:	a2 83       	std	Z+2, r26	; 0x02
     ff6:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ff8:	8e 01       	movw	r16, r28
     ffa:	03 56       	subi	r16, 0x63	; 99
     ffc:	1f 4f       	sbci	r17, 0xFF	; 255
     ffe:	ce 01       	movw	r24, r28
    1000:	87 56       	subi	r24, 0x67	; 103
    1002:	9f 4f       	sbci	r25, 0xFF	; 255
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	4a e7       	ldi	r20, 0x7A	; 122
    100a:	55 e4       	ldi	r21, 0x45	; 69
    100c:	fc 01       	movw	r30, r24
    100e:	60 81       	ld	r22, Z
    1010:	71 81       	ldd	r23, Z+1	; 0x01
    1012:	82 81       	ldd	r24, Z+2	; 0x02
    1014:	93 81       	ldd	r25, Z+3	; 0x03
    1016:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	f8 01       	movw	r30, r16
    1020:	80 83       	st	Z, r24
    1022:	91 83       	std	Z+1, r25	; 0x01
    1024:	a2 83       	std	Z+2, r26	; 0x02
    1026:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1028:	ce 01       	movw	r24, r28
    102a:	83 56       	subi	r24, 0x63	; 99
    102c:	9f 4f       	sbci	r25, 0xFF	; 255
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	40 e8       	ldi	r20, 0x80	; 128
    1034:	5f e3       	ldi	r21, 0x3F	; 63
    1036:	fc 01       	movw	r30, r24
    1038:	60 81       	ld	r22, Z
    103a:	71 81       	ldd	r23, Z+1	; 0x01
    103c:	82 81       	ldd	r24, Z+2	; 0x02
    103e:	93 81       	ldd	r25, Z+3	; 0x03
    1040:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    1044:	88 23       	and	r24, r24
    1046:	4c f4       	brge	.+18     	; 0x105a <__stack+0x7fb>
		__ticks = 1;
    1048:	ce 01       	movw	r24, r28
    104a:	8f 55       	subi	r24, 0x5F	; 95
    104c:	9f 4f       	sbci	r25, 0xFF	; 255
    104e:	21 e0       	ldi	r18, 0x01	; 1
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	fc 01       	movw	r30, r24
    1054:	31 83       	std	Z+1, r19	; 0x01
    1056:	20 83       	st	Z, r18
    1058:	6d c0       	rjmp	.+218    	; 0x1134 <__stack+0x8d5>
	else if (__tmp > 65535)
    105a:	ce 01       	movw	r24, r28
    105c:	83 56       	subi	r24, 0x63	; 99
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	3f ef       	ldi	r19, 0xFF	; 255
    1064:	4f e7       	ldi	r20, 0x7F	; 127
    1066:	57 e4       	ldi	r21, 0x47	; 71
    1068:	fc 01       	movw	r30, r24
    106a:	60 81       	ld	r22, Z
    106c:	71 81       	ldd	r23, Z+1	; 0x01
    106e:	82 81       	ldd	r24, Z+2	; 0x02
    1070:	93 81       	ldd	r25, Z+3	; 0x03
    1072:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
    1076:	18 16       	cp	r1, r24
    1078:	0c f0       	brlt	.+2      	; 0x107c <__stack+0x81d>
    107a:	4a c0       	rjmp	.+148    	; 0x1110 <__stack+0x8b1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    107c:	ce 01       	movw	r24, r28
    107e:	87 56       	subi	r24, 0x67	; 103
    1080:	9f 4f       	sbci	r25, 0xFF	; 255
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e2       	ldi	r20, 0x20	; 32
    1088:	51 e4       	ldi	r21, 0x41	; 65
    108a:	fc 01       	movw	r30, r24
    108c:	60 81       	ld	r22, Z
    108e:	71 81       	ldd	r23, Z+1	; 0x01
    1090:	82 81       	ldd	r24, Z+2	; 0x02
    1092:	93 81       	ldd	r25, Z+3	; 0x03
    1094:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	8e 01       	movw	r16, r28
    109e:	0f 55       	subi	r16, 0x5F	; 95
    10a0:	1f 4f       	sbci	r17, 0xFF	; 255
    10a2:	bc 01       	movw	r22, r24
    10a4:	cd 01       	movw	r24, r26
    10a6:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	f8 01       	movw	r30, r16
    10b0:	91 83       	std	Z+1, r25	; 0x01
    10b2:	80 83       	st	Z, r24
    10b4:	24 c0       	rjmp	.+72     	; 0x10fe <__stack+0x89f>
    10b6:	ce 01       	movw	r24, r28
    10b8:	8d 55       	subi	r24, 0x5D	; 93
    10ba:	9f 4f       	sbci	r25, 0xFF	; 255
    10bc:	20 e9       	ldi	r18, 0x90	; 144
    10be:	31 e0       	ldi	r19, 0x01	; 1
    10c0:	fc 01       	movw	r30, r24
    10c2:	31 83       	std	Z+1, r19	; 0x01
    10c4:	20 83       	st	Z, r18
    10c6:	ce 01       	movw	r24, r28
    10c8:	8d 55       	subi	r24, 0x5D	; 93
    10ca:	9f 4f       	sbci	r25, 0xFF	; 255
    10cc:	fc 01       	movw	r30, r24
    10ce:	80 81       	ld	r24, Z
    10d0:	91 81       	ldd	r25, Z+1	; 0x01
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <__stack+0x873>
    10d6:	9e 01       	movw	r18, r28
    10d8:	2d 55       	subi	r18, 0x5D	; 93
    10da:	3f 4f       	sbci	r19, 0xFF	; 255
    10dc:	f9 01       	movw	r30, r18
    10de:	91 83       	std	Z+1, r25	; 0x01
    10e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e2:	ce 01       	movw	r24, r28
    10e4:	8f 55       	subi	r24, 0x5F	; 95
    10e6:	9f 4f       	sbci	r25, 0xFF	; 255
    10e8:	9e 01       	movw	r18, r28
    10ea:	2f 55       	subi	r18, 0x5F	; 95
    10ec:	3f 4f       	sbci	r19, 0xFF	; 255
    10ee:	f9 01       	movw	r30, r18
    10f0:	20 81       	ld	r18, Z
    10f2:	31 81       	ldd	r19, Z+1	; 0x01
    10f4:	21 50       	subi	r18, 0x01	; 1
    10f6:	31 09       	sbc	r19, r1
    10f8:	fc 01       	movw	r30, r24
    10fa:	31 83       	std	Z+1, r19	; 0x01
    10fc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10fe:	ce 01       	movw	r24, r28
    1100:	8f 55       	subi	r24, 0x5F	; 95
    1102:	9f 4f       	sbci	r25, 0xFF	; 255
    1104:	fc 01       	movw	r30, r24
    1106:	80 81       	ld	r24, Z
    1108:	91 81       	ldd	r25, Z+1	; 0x01
    110a:	89 2b       	or	r24, r25
    110c:	a1 f6       	brne	.-88     	; 0x10b6 <__stack+0x857>
    110e:	2c c0       	rjmp	.+88     	; 0x1168 <__stack+0x909>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1110:	8e 01       	movw	r16, r28
    1112:	0f 55       	subi	r16, 0x5F	; 95
    1114:	1f 4f       	sbci	r17, 0xFF	; 255
    1116:	ce 01       	movw	r24, r28
    1118:	83 56       	subi	r24, 0x63	; 99
    111a:	9f 4f       	sbci	r25, 0xFF	; 255
    111c:	fc 01       	movw	r30, r24
    111e:	60 81       	ld	r22, Z
    1120:	71 81       	ldd	r23, Z+1	; 0x01
    1122:	82 81       	ldd	r24, Z+2	; 0x02
    1124:	93 81       	ldd	r25, Z+3	; 0x03
    1126:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	f8 01       	movw	r30, r16
    1130:	91 83       	std	Z+1, r25	; 0x01
    1132:	80 83       	st	Z, r24
    1134:	ce 01       	movw	r24, r28
    1136:	8b 55       	subi	r24, 0x5B	; 91
    1138:	9f 4f       	sbci	r25, 0xFF	; 255
    113a:	9e 01       	movw	r18, r28
    113c:	2f 55       	subi	r18, 0x5F	; 95
    113e:	3f 4f       	sbci	r19, 0xFF	; 255
    1140:	f9 01       	movw	r30, r18
    1142:	20 81       	ld	r18, Z
    1144:	31 81       	ldd	r19, Z+1	; 0x01
    1146:	fc 01       	movw	r30, r24
    1148:	31 83       	std	Z+1, r19	; 0x01
    114a:	20 83       	st	Z, r18
    114c:	ce 01       	movw	r24, r28
    114e:	8b 55       	subi	r24, 0x5B	; 91
    1150:	9f 4f       	sbci	r25, 0xFF	; 255
    1152:	fc 01       	movw	r30, r24
    1154:	80 81       	ld	r24, Z
    1156:	91 81       	ldd	r25, Z+1	; 0x01
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <__stack+0x8f9>
    115c:	9e 01       	movw	r18, r28
    115e:	2b 55       	subi	r18, 0x5B	; 91
    1160:	3f 4f       	sbci	r19, 0xFF	; 255
    1162:	f9 01       	movw	r30, r18
    1164:	91 83       	std	Z+1, r25	; 0x01
    1166:	80 83       	st	Z, r24
		_delay_ms(1);
		F5 = (ADC_Read(ADC_CH3)*5)/1024;
    1168:	83 e0       	ldi	r24, 0x03	; 3
    116a:	0e 94 01 12 	call	0x2402	; 0x2402 <ADC_Read>
    116e:	9c 01       	movw	r18, r24
    1170:	c9 01       	movw	r24, r18
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	82 0f       	add	r24, r18
    117c:	93 1f       	adc	r25, r19
    117e:	89 2f       	mov	r24, r25
    1180:	99 27       	eor	r25, r25
    1182:	86 95       	lsr	r24
    1184:	86 95       	lsr	r24
    1186:	9a 87       	std	Y+10, r25	; 0x0a
    1188:	89 87       	std	Y+9, r24	; 0x09
		DIO_SetPin_Value(DIO_PORTC, DIO_PIN4, DIO_LOW);
    118a:	40 e0       	ldi	r20, 0x00	; 0
    118c:	64 e0       	ldi	r22, 0x04	; 4
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
		
		
		//display fingers
		LCD_Write_Number(F1);
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	9a 81       	ldd	r25, Y+2	; 0x02
    1198:	cc 01       	movw	r24, r24
    119a:	a0 e0       	ldi	r26, 0x00	; 0
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	bc 01       	movw	r22, r24
    11a0:	cd 01       	movw	r24, r26
    11a2:	0e 94 6f 10 	call	0x20de	; 0x20de <LCD_Write_Number>
		LCD_Write_Number(F2);
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	cc 01       	movw	r24, r24
    11ac:	a0 e0       	ldi	r26, 0x00	; 0
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	bc 01       	movw	r22, r24
    11b2:	cd 01       	movw	r24, r26
    11b4:	0e 94 6f 10 	call	0x20de	; 0x20de <LCD_Write_Number>
		LCD_Write_Number(F3);
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	9e 81       	ldd	r25, Y+6	; 0x06
    11bc:	cc 01       	movw	r24, r24
    11be:	a0 e0       	ldi	r26, 0x00	; 0
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	0e 94 6f 10 	call	0x20de	; 0x20de <LCD_Write_Number>
		LCD_Write_Number(F4);
    11ca:	8f 81       	ldd	r24, Y+7	; 0x07
    11cc:	98 85       	ldd	r25, Y+8	; 0x08
    11ce:	cc 01       	movw	r24, r24
    11d0:	a0 e0       	ldi	r26, 0x00	; 0
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	bc 01       	movw	r22, r24
    11d6:	cd 01       	movw	r24, r26
    11d8:	0e 94 6f 10 	call	0x20de	; 0x20de <LCD_Write_Number>
		LCD_Write_Number(F5);
    11dc:	89 85       	ldd	r24, Y+9	; 0x09
    11de:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e0:	cc 01       	movw	r24, r24
    11e2:	a0 e0       	ldi	r26, 0x00	; 0
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	0e 94 6f 10 	call	0x20de	; 0x20de <LCD_Write_Number>
		
		
		//display text
		if(F1==0 && F2==0 && F3==0 && F4==0 && F5==0)
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	9a 81       	ldd	r25, Y+2	; 0x02
    11f2:	89 2b       	or	r24, r25
    11f4:	c1 f4       	brne	.+48     	; 0x1226 <__stack+0x9c7>
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	89 2b       	or	r24, r25
    11fc:	a1 f4       	brne	.+40     	; 0x1226 <__stack+0x9c7>
    11fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1200:	9e 81       	ldd	r25, Y+6	; 0x06
    1202:	89 2b       	or	r24, r25
    1204:	81 f4       	brne	.+32     	; 0x1226 <__stack+0x9c7>
    1206:	8f 81       	ldd	r24, Y+7	; 0x07
    1208:	98 85       	ldd	r25, Y+8	; 0x08
    120a:	89 2b       	or	r24, r25
    120c:	61 f4       	brne	.+24     	; 0x1226 <__stack+0x9c7>
    120e:	89 85       	ldd	r24, Y+9	; 0x09
    1210:	9a 85       	ldd	r25, Y+10	; 0x0a
    1212:	89 2b       	or	r24, r25
    1214:	41 f4       	brne	.+16     	; 0x1226 <__stack+0x9c7>
		{
			LCD_Write_Command(0xC0);
    1216:	80 ec       	ldi	r24, 0xC0	; 192
    1218:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"HELLO");
    121c:	80 e6       	ldi	r24, 0x60	; 96
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_Write_String>
    1224:	3b c1       	rjmp	.+630    	; 0x149c <__stack+0xc3d>
		}
		else if(F1==0 && F2==0 && F3==4 && F4==4 && F5==0)
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	9a 81       	ldd	r25, Y+2	; 0x02
    122a:	89 2b       	or	r24, r25
    122c:	c1 f4       	brne	.+48     	; 0x125e <__stack+0x9ff>
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	89 2b       	or	r24, r25
    1234:	a1 f4       	brne	.+40     	; 0x125e <__stack+0x9ff>
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	9e 81       	ldd	r25, Y+6	; 0x06
    123a:	04 97       	sbiw	r24, 0x04	; 4
    123c:	81 f4       	brne	.+32     	; 0x125e <__stack+0x9ff>
    123e:	8f 81       	ldd	r24, Y+7	; 0x07
    1240:	98 85       	ldd	r25, Y+8	; 0x08
    1242:	04 97       	sbiw	r24, 0x04	; 4
    1244:	61 f4       	brne	.+24     	; 0x125e <__stack+0x9ff>
    1246:	89 85       	ldd	r24, Y+9	; 0x09
    1248:	9a 85       	ldd	r25, Y+10	; 0x0a
    124a:	89 2b       	or	r24, r25
    124c:	41 f4       	brne	.+16     	; 0x125e <__stack+0x9ff>
		{
			LCD_Write_Command(0xC0);
    124e:	80 ec       	ldi	r24, 0xC0	; 192
    1250:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"I LOVE YOU");
    1254:	86 e6       	ldi	r24, 0x66	; 102
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_Write_String>
    125c:	1f c1       	rjmp	.+574    	; 0x149c <__stack+0xc3d>
		}
		else if(F1==0 && F2==0 && F3==0 && F4==4 && F5==0)
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	89 2b       	or	r24, r25
    1264:	c1 f4       	brne	.+48     	; 0x1296 <__stack+0xa37>
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	89 2b       	or	r24, r25
    126c:	a1 f4       	brne	.+40     	; 0x1296 <__stack+0xa37>
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	89 2b       	or	r24, r25
    1274:	81 f4       	brne	.+32     	; 0x1296 <__stack+0xa37>
    1276:	8f 81       	ldd	r24, Y+7	; 0x07
    1278:	98 85       	ldd	r25, Y+8	; 0x08
    127a:	04 97       	sbiw	r24, 0x04	; 4
    127c:	61 f4       	brne	.+24     	; 0x1296 <__stack+0xa37>
    127e:	89 85       	ldd	r24, Y+9	; 0x09
    1280:	9a 85       	ldd	r25, Y+10	; 0x0a
    1282:	89 2b       	or	r24, r25
    1284:	41 f4       	brne	.+16     	; 0x1296 <__stack+0xa37>
		{
			LCD_Write_Command(0xC0);
    1286:	80 ec       	ldi	r24, 0xC0	; 192
    1288:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"I REALLY LOVE YOU");
    128c:	81 e7       	ldi	r24, 0x71	; 113
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_Write_String>
    1294:	03 c1       	rjmp	.+518    	; 0x149c <__stack+0xc3d>
		}
		else if(F1==4 && F2==0 && F3==4 && F4==4 && F5==4)
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	9a 81       	ldd	r25, Y+2	; 0x02
    129a:	04 97       	sbiw	r24, 0x04	; 4
    129c:	c1 f4       	brne	.+48     	; 0x12ce <__stack+0xa6f>
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9c 81       	ldd	r25, Y+4	; 0x04
    12a2:	89 2b       	or	r24, r25
    12a4:	a1 f4       	brne	.+40     	; 0x12ce <__stack+0xa6f>
    12a6:	8d 81       	ldd	r24, Y+5	; 0x05
    12a8:	9e 81       	ldd	r25, Y+6	; 0x06
    12aa:	04 97       	sbiw	r24, 0x04	; 4
    12ac:	81 f4       	brne	.+32     	; 0x12ce <__stack+0xa6f>
    12ae:	8f 81       	ldd	r24, Y+7	; 0x07
    12b0:	98 85       	ldd	r25, Y+8	; 0x08
    12b2:	04 97       	sbiw	r24, 0x04	; 4
    12b4:	61 f4       	brne	.+24     	; 0x12ce <__stack+0xa6f>
    12b6:	89 85       	ldd	r24, Y+9	; 0x09
    12b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ba:	04 97       	sbiw	r24, 0x04	; 4
    12bc:	41 f4       	brne	.+16     	; 0x12ce <__stack+0xa6f>
		{
			LCD_Write_Command(0xC0);
    12be:	80 ec       	ldi	r24, 0xC0	; 192
    12c0:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"YOU");
    12c4:	83 e8       	ldi	r24, 0x83	; 131
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_Write_String>
    12cc:	e7 c0       	rjmp	.+462    	; 0x149c <__stack+0xc3d>
		}
		else if(F1==4 && F2==4 && F3==4 && F4==4 && F5==4)
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	9a 81       	ldd	r25, Y+2	; 0x02
    12d2:	04 97       	sbiw	r24, 0x04	; 4
    12d4:	c1 f4       	brne	.+48     	; 0x1306 <__stack+0xaa7>
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	04 97       	sbiw	r24, 0x04	; 4
    12dc:	a1 f4       	brne	.+40     	; 0x1306 <__stack+0xaa7>
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	04 97       	sbiw	r24, 0x04	; 4
    12e4:	81 f4       	brne	.+32     	; 0x1306 <__stack+0xaa7>
    12e6:	8f 81       	ldd	r24, Y+7	; 0x07
    12e8:	98 85       	ldd	r25, Y+8	; 0x08
    12ea:	04 97       	sbiw	r24, 0x04	; 4
    12ec:	61 f4       	brne	.+24     	; 0x1306 <__stack+0xaa7>
    12ee:	89 85       	ldd	r24, Y+9	; 0x09
    12f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f2:	04 97       	sbiw	r24, 0x04	; 4
    12f4:	41 f4       	brne	.+16     	; 0x1306 <__stack+0xaa7>
		{
			LCD_Write_Command(0xC0);
    12f6:	80 ec       	ldi	r24, 0xC0	; 192
    12f8:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"YES");
    12fc:	87 e8       	ldi	r24, 0x87	; 135
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_Write_String>
    1304:	cb c0       	rjmp	.+406    	; 0x149c <__stack+0xc3d>
		}
		
		else if(F1==0 && (F2==1||F2==2||F2==3) && (F3==1 ||F3==2||F3==3) && F4==4 && F5==4)
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	9a 81       	ldd	r25, Y+2	; 0x02
    130a:	89 2b       	or	r24, r25
    130c:	41 f5       	brne	.+80     	; 0x135e <__stack+0xaff>
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	41 f0       	breq	.+16     	; 0x1326 <__stack+0xac7>
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	02 97       	sbiw	r24, 0x02	; 2
    131c:	21 f0       	breq	.+8      	; 0x1326 <__stack+0xac7>
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	03 97       	sbiw	r24, 0x03	; 3
    1324:	e1 f4       	brne	.+56     	; 0x135e <__stack+0xaff>
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	9e 81       	ldd	r25, Y+6	; 0x06
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	41 f0       	breq	.+16     	; 0x133e <__stack+0xadf>
    132e:	8d 81       	ldd	r24, Y+5	; 0x05
    1330:	9e 81       	ldd	r25, Y+6	; 0x06
    1332:	02 97       	sbiw	r24, 0x02	; 2
    1334:	21 f0       	breq	.+8      	; 0x133e <__stack+0xadf>
    1336:	8d 81       	ldd	r24, Y+5	; 0x05
    1338:	9e 81       	ldd	r25, Y+6	; 0x06
    133a:	03 97       	sbiw	r24, 0x03	; 3
    133c:	81 f4       	brne	.+32     	; 0x135e <__stack+0xaff>
    133e:	8f 81       	ldd	r24, Y+7	; 0x07
    1340:	98 85       	ldd	r25, Y+8	; 0x08
    1342:	04 97       	sbiw	r24, 0x04	; 4
    1344:	61 f4       	brne	.+24     	; 0x135e <__stack+0xaff>
    1346:	89 85       	ldd	r24, Y+9	; 0x09
    1348:	9a 85       	ldd	r25, Y+10	; 0x0a
    134a:	04 97       	sbiw	r24, 0x04	; 4
    134c:	41 f4       	brne	.+16     	; 0x135e <__stack+0xaff>
		{
			LCD_Write_Command(0xC0);
    134e:	80 ec       	ldi	r24, 0xC0	; 192
    1350:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"NO");
    1354:	8b e8       	ldi	r24, 0x8B	; 139
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_Write_String>
    135c:	9f c0       	rjmp	.+318    	; 0x149c <__stack+0xc3d>
		}

		else if((F1==1||F1==2||F1==3) && (F2==1||F2==2||F2==3) && F3==0 && F4==0 && F5==0)
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	41 f0       	breq	.+16     	; 0x1376 <__stack+0xb17>
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	9a 81       	ldd	r25, Y+2	; 0x02
    136a:	02 97       	sbiw	r24, 0x02	; 2
    136c:	21 f0       	breq	.+8      	; 0x1376 <__stack+0xb17>
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	9a 81       	ldd	r25, Y+2	; 0x02
    1372:	03 97       	sbiw	r24, 0x03	; 3
    1374:	01 f5       	brne	.+64     	; 0x13b6 <__stack+0xb57>
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	41 f0       	breq	.+16     	; 0x138e <__stack+0xb2f>
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	9c 81       	ldd	r25, Y+4	; 0x04
    1382:	02 97       	sbiw	r24, 0x02	; 2
    1384:	21 f0       	breq	.+8      	; 0x138e <__stack+0xb2f>
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	03 97       	sbiw	r24, 0x03	; 3
    138c:	a1 f4       	brne	.+40     	; 0x13b6 <__stack+0xb57>
    138e:	8d 81       	ldd	r24, Y+5	; 0x05
    1390:	9e 81       	ldd	r25, Y+6	; 0x06
    1392:	89 2b       	or	r24, r25
    1394:	81 f4       	brne	.+32     	; 0x13b6 <__stack+0xb57>
    1396:	8f 81       	ldd	r24, Y+7	; 0x07
    1398:	98 85       	ldd	r25, Y+8	; 0x08
    139a:	89 2b       	or	r24, r25
    139c:	61 f4       	brne	.+24     	; 0x13b6 <__stack+0xb57>
    139e:	89 85       	ldd	r24, Y+9	; 0x09
    13a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a2:	89 2b       	or	r24, r25
    13a4:	41 f4       	brne	.+16     	; 0x13b6 <__stack+0xb57>
		{
			LCD_Write_Command(0xC0);
    13a6:	80 ec       	ldi	r24, 0xC0	; 192
    13a8:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"PERFECT");
    13ac:	8e e8       	ldi	r24, 0x8E	; 142
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_Write_String>
    13b4:	73 c0       	rjmp	.+230    	; 0x149c <__stack+0xc3d>
		}

		else if(F1==0 && F2==4 && F3==4 && F4==4 && F5==4)
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ba:	89 2b       	or	r24, r25
    13bc:	c1 f4       	brne	.+48     	; 0x13ee <__stack+0xb8f>
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	04 97       	sbiw	r24, 0x04	; 4
    13c4:	a1 f4       	brne	.+40     	; 0x13ee <__stack+0xb8f>
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	04 97       	sbiw	r24, 0x04	; 4
    13cc:	81 f4       	brne	.+32     	; 0x13ee <__stack+0xb8f>
    13ce:	8f 81       	ldd	r24, Y+7	; 0x07
    13d0:	98 85       	ldd	r25, Y+8	; 0x08
    13d2:	04 97       	sbiw	r24, 0x04	; 4
    13d4:	61 f4       	brne	.+24     	; 0x13ee <__stack+0xb8f>
    13d6:	89 85       	ldd	r24, Y+9	; 0x09
    13d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13da:	04 97       	sbiw	r24, 0x04	; 4
    13dc:	41 f4       	brne	.+16     	; 0x13ee <__stack+0xb8f>
		{
			LCD_Write_Command(0xC0);
    13de:	80 ec       	ldi	r24, 0xC0	; 192
    13e0:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"GOOD JOB");
    13e4:	86 e9       	ldi	r24, 0x96	; 150
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_Write_String>
    13ec:	57 c0       	rjmp	.+174    	; 0x149c <__stack+0xc3d>
		}
		
		else if(F1==4 && (F2==1||F2==2||F2==3) && F3==4 && F4==4 && F5==4)
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	04 97       	sbiw	r24, 0x04	; 4
    13f4:	01 f5       	brne	.+64     	; 0x1436 <__stack+0xbd7>
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	41 f0       	breq	.+16     	; 0x140e <__stack+0xbaf>
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	9c 81       	ldd	r25, Y+4	; 0x04
    1402:	02 97       	sbiw	r24, 0x02	; 2
    1404:	21 f0       	breq	.+8      	; 0x140e <__stack+0xbaf>
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	03 97       	sbiw	r24, 0x03	; 3
    140c:	a1 f4       	brne	.+40     	; 0x1436 <__stack+0xbd7>
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	04 97       	sbiw	r24, 0x04	; 4
    1414:	81 f4       	brne	.+32     	; 0x1436 <__stack+0xbd7>
    1416:	8f 81       	ldd	r24, Y+7	; 0x07
    1418:	98 85       	ldd	r25, Y+8	; 0x08
    141a:	04 97       	sbiw	r24, 0x04	; 4
    141c:	61 f4       	brne	.+24     	; 0x1436 <__stack+0xbd7>
    141e:	89 85       	ldd	r24, Y+9	; 0x09
    1420:	9a 85       	ldd	r25, Y+10	; 0x0a
    1422:	04 97       	sbiw	r24, 0x04	; 4
    1424:	41 f4       	brne	.+16     	; 0x1436 <__stack+0xbd7>
		{
			LCD_Write_Command(0xC0);
    1426:	80 ec       	ldi	r24, 0xC0	; 192
    1428:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"QESTION?");
    142c:	8f e9       	ldi	r24, 0x9F	; 159
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_Write_String>
    1434:	33 c0       	rjmp	.+102    	; 0x149c <__stack+0xc3d>
		}
		
		else if(F1==4 && (F2==1||F2==2||F2==3) && (F3==1 ||F3==2||F3==3) && F4==4 && F5==4)
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
    143a:	04 97       	sbiw	r24, 0x04	; 4
    143c:	41 f5       	brne	.+80     	; 0x148e <__stack+0xc2f>
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	9c 81       	ldd	r25, Y+4	; 0x04
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	41 f0       	breq	.+16     	; 0x1456 <__stack+0xbf7>
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	02 97       	sbiw	r24, 0x02	; 2
    144c:	21 f0       	breq	.+8      	; 0x1456 <__stack+0xbf7>
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	03 97       	sbiw	r24, 0x03	; 3
    1454:	e1 f4       	brne	.+56     	; 0x148e <__stack+0xc2f>
    1456:	8d 81       	ldd	r24, Y+5	; 0x05
    1458:	9e 81       	ldd	r25, Y+6	; 0x06
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	41 f0       	breq	.+16     	; 0x146e <__stack+0xc0f>
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	9e 81       	ldd	r25, Y+6	; 0x06
    1462:	02 97       	sbiw	r24, 0x02	; 2
    1464:	21 f0       	breq	.+8      	; 0x146e <__stack+0xc0f>
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	03 97       	sbiw	r24, 0x03	; 3
    146c:	81 f4       	brne	.+32     	; 0x148e <__stack+0xc2f>
    146e:	8f 81       	ldd	r24, Y+7	; 0x07
    1470:	98 85       	ldd	r25, Y+8	; 0x08
    1472:	04 97       	sbiw	r24, 0x04	; 4
    1474:	61 f4       	brne	.+24     	; 0x148e <__stack+0xc2f>
    1476:	89 85       	ldd	r24, Y+9	; 0x09
    1478:	9a 85       	ldd	r25, Y+10	; 0x0a
    147a:	04 97       	sbiw	r24, 0x04	; 4
    147c:	41 f4       	brne	.+16     	; 0x148e <__stack+0xc2f>
		{
			LCD_Write_Command(0xC0);
    147e:	80 ec       	ldi	r24, 0xC0	; 192
    1480:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"QOUTES");
    1484:	88 ea       	ldi	r24, 0xA8	; 168
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_Write_String>
    148c:	07 c0       	rjmp	.+14     	; 0x149c <__stack+0xc3d>
		}
		else
		{
			LCD_Write_Command(0xC0);
    148e:	80 ec       	ldi	r24, 0xC0	; 192
    1490:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
			LCD_Write_String((Uint8_t*)"Loading..");
    1494:	8f ea       	ldi	r24, 0xAF	; 175
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_Write_String>
		}
		
		//clean for next run
		F1=0;
    149c:	1a 82       	std	Y+2, r1	; 0x02
    149e:	19 82       	std	Y+1, r1	; 0x01
		F2=0;
    14a0:	1c 82       	std	Y+4, r1	; 0x04
    14a2:	1b 82       	std	Y+3, r1	; 0x03
		F3=0;
    14a4:	1e 82       	std	Y+6, r1	; 0x06
    14a6:	1d 82       	std	Y+5, r1	; 0x05
		F4=0;
    14a8:	18 86       	std	Y+8, r1	; 0x08
    14aa:	1f 82       	std	Y+7, r1	; 0x07
		F5=0;
    14ac:	1a 86       	std	Y+10, r1	; 0x0a
    14ae:	19 86       	std	Y+9, r1	; 0x09
		x = 0;
    14b0:	1c 86       	std	Y+12, r1	; 0x0c
    14b2:	1b 86       	std	Y+11, r1	; 0x0b
		
    }
    14b4:	0c 94 95 00 	jmp	0x12a	; 0x12a <main+0x88>

000014b8 <LCD_Initialize>:
*/

#include "LCD_Private.h"

void LCD_Initialize(void)
{
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	6c 97       	sbiw	r28, 0x1c	; 28
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPin_Direction(LCD_CTRL_PRT, LCD_RS, LCD_OUT);
    14cc:	41 e0       	ldi	r20, 0x01	; 1
    14ce:	61 e0       	ldi	r22, 0x01	; 1
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	0e 94 b5 13 	call	0x276a	; 0x276a <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CTRL_PRT, LCD_RW, LCD_OUT);
    14d6:	41 e0       	ldi	r20, 0x01	; 1
    14d8:	62 e0       	ldi	r22, 0x02	; 2
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	0e 94 b5 13 	call	0x276a	; 0x276a <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CTRL_PRT, LCD_EN, LCD_OUT);
    14e0:	41 e0       	ldi	r20, 0x01	; 1
    14e2:	63 e0       	ldi	r22, 0x03	; 3
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	0e 94 b5 13 	call	0x276a	; 0x276a <DIO_SetPin_Direction>
			  
	DIO_SetPin_Direction(LCD_DATA_PRT, LCD_D4, LCD_OUT);
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	64 e0       	ldi	r22, 0x04	; 4
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	0e 94 b5 13 	call	0x276a	; 0x276a <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PRT, LCD_D5, LCD_OUT);
    14f4:	41 e0       	ldi	r20, 0x01	; 1
    14f6:	65 e0       	ldi	r22, 0x05	; 5
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	0e 94 b5 13 	call	0x276a	; 0x276a <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PRT, LCD_D6, LCD_OUT);
    14fe:	41 e0       	ldi	r20, 0x01	; 1
    1500:	66 e0       	ldi	r22, 0x06	; 6
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	0e 94 b5 13 	call	0x276a	; 0x276a <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PRT, LCD_D7, LCD_OUT);
    1508:	41 e0       	ldi	r20, 0x01	; 1
    150a:	67 e0       	ldi	r22, 0x07	; 7
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	0e 94 b5 13 	call	0x276a	; 0x276a <DIO_SetPin_Direction>
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	a0 e0       	ldi	r26, 0x00	; 0
    1518:	b0 e4       	ldi	r27, 0x40	; 64
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	9a 83       	std	Y+2, r25	; 0x02
    151e:	ab 83       	std	Y+3, r26	; 0x03
    1520:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	4a e7       	ldi	r20, 0x7A	; 122
    1528:	55 e4       	ldi	r21, 0x45	; 69
    152a:	69 81       	ldd	r22, Y+1	; 0x01
    152c:	7a 81       	ldd	r23, Y+2	; 0x02
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	8d 83       	std	Y+5, r24	; 0x05
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	af 83       	std	Y+7, r26	; 0x07
    1540:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e8       	ldi	r20, 0x80	; 128
    1548:	5f e3       	ldi	r21, 0x3F	; 63
    154a:	6d 81       	ldd	r22, Y+5	; 0x05
    154c:	7e 81       	ldd	r23, Y+6	; 0x06
    154e:	8f 81       	ldd	r24, Y+7	; 0x07
    1550:	98 85       	ldd	r25, Y+8	; 0x08
    1552:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    1556:	88 23       	and	r24, r24
    1558:	2c f4       	brge	.+10     	; 0x1564 <LCD_Initialize+0xac>
		__ticks = 1;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	9a 87       	std	Y+10, r25	; 0x0a
    1560:	89 87       	std	Y+9, r24	; 0x09
    1562:	3f c0       	rjmp	.+126    	; 0x15e2 <LCD_Initialize+0x12a>
	else if (__tmp > 65535)
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	3f ef       	ldi	r19, 0xFF	; 255
    1568:	4f e7       	ldi	r20, 0x7F	; 127
    156a:	57 e4       	ldi	r21, 0x47	; 71
    156c:	6d 81       	ldd	r22, Y+5	; 0x05
    156e:	7e 81       	ldd	r23, Y+6	; 0x06
    1570:	8f 81       	ldd	r24, Y+7	; 0x07
    1572:	98 85       	ldd	r25, Y+8	; 0x08
    1574:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
    1578:	18 16       	cp	r1, r24
    157a:	4c f5       	brge	.+82     	; 0x15ce <LCD_Initialize+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e2       	ldi	r20, 0x20	; 32
    1582:	51 e4       	ldi	r21, 0x41	; 65
    1584:	69 81       	ldd	r22, Y+1	; 0x01
    1586:	7a 81       	ldd	r23, Y+2	; 0x02
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	bc 01       	movw	r22, r24
    1596:	cd 01       	movw	r24, r26
    1598:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	9a 87       	std	Y+10, r25	; 0x0a
    15a2:	89 87       	std	Y+9, r24	; 0x09
    15a4:	0f c0       	rjmp	.+30     	; 0x15c4 <LCD_Initialize+0x10c>
    15a6:	80 e9       	ldi	r24, 0x90	; 144
    15a8:	91 e0       	ldi	r25, 0x01	; 1
    15aa:	9c 87       	std	Y+12, r25	; 0x0c
    15ac:	8b 87       	std	Y+11, r24	; 0x0b
    15ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    15b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <LCD_Initialize+0xfa>
    15b6:	9c 87       	std	Y+12, r25	; 0x0c
    15b8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ba:	89 85       	ldd	r24, Y+9	; 0x09
    15bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	9a 87       	std	Y+10, r25	; 0x0a
    15c2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c4:	89 85       	ldd	r24, Y+9	; 0x09
    15c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c8:	89 2b       	or	r24, r25
    15ca:	69 f7       	brne	.-38     	; 0x15a6 <LCD_Initialize+0xee>
    15cc:	14 c0       	rjmp	.+40     	; 0x15f6 <LCD_Initialize+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ce:	6d 81       	ldd	r22, Y+5	; 0x05
    15d0:	7e 81       	ldd	r23, Y+6	; 0x06
    15d2:	8f 81       	ldd	r24, Y+7	; 0x07
    15d4:	98 85       	ldd	r25, Y+8	; 0x08
    15d6:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	9a 87       	std	Y+10, r25	; 0x0a
    15e0:	89 87       	std	Y+9, r24	; 0x09
    15e2:	89 85       	ldd	r24, Y+9	; 0x09
    15e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e6:	9e 87       	std	Y+14, r25	; 0x0e
    15e8:	8d 87       	std	Y+13, r24	; 0x0d
    15ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <LCD_Initialize+0x136>
    15f2:	9e 87       	std	Y+14, r25	; 0x0e
    15f4:	8d 87       	std	Y+13, r24	; 0x0d
	
	_delay_ms(2); //3shan mc bta3 kit asra3 mn mc bta3 lcd
	
	LCD_Write_Command(0x33);
    15f6:	83 e3       	ldi	r24, 0x33	; 51
    15f8:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
	LCD_Write_Command(0x32);
    15fc:	82 e3       	ldi	r24, 0x32	; 50
    15fe:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
	LCD_Write_Command(0x28);//4-Bit Mode
    1602:	88 e2       	ldi	r24, 0x28	; 40
    1604:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
	LCD_Write_Command(0x01);//Clear Display
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
	LCD_Write_Command(0x02);//Return Home
    160e:	82 e0       	ldi	r24, 0x02	; 2
    1610:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
	LCD_Write_Command(0x06);//Return Home
    1614:	86 e0       	ldi	r24, 0x06	; 6
    1616:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
	LCD_Write_Command(0x0C);//Display on, Cursor off
    161a:	8c e0       	ldi	r24, 0x0C	; 12
    161c:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a0 ea       	ldi	r26, 0xA0	; 160
    1626:	b0 e4       	ldi	r27, 0x40	; 64
    1628:	8f 87       	std	Y+15, r24	; 0x0f
    162a:	98 8b       	std	Y+16, r25	; 0x10
    162c:	a9 8b       	std	Y+17, r26	; 0x11
    162e:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	4a e7       	ldi	r20, 0x7A	; 122
    1636:	55 e4       	ldi	r21, 0x45	; 69
    1638:	6f 85       	ldd	r22, Y+15	; 0x0f
    163a:	78 89       	ldd	r23, Y+16	; 0x10
    163c:	89 89       	ldd	r24, Y+17	; 0x11
    163e:	9a 89       	ldd	r25, Y+18	; 0x12
    1640:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	8b 8b       	std	Y+19, r24	; 0x13
    164a:	9c 8b       	std	Y+20, r25	; 0x14
    164c:	ad 8b       	std	Y+21, r26	; 0x15
    164e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e8       	ldi	r20, 0x80	; 128
    1656:	5f e3       	ldi	r21, 0x3F	; 63
    1658:	6b 89       	ldd	r22, Y+19	; 0x13
    165a:	7c 89       	ldd	r23, Y+20	; 0x14
    165c:	8d 89       	ldd	r24, Y+21	; 0x15
    165e:	9e 89       	ldd	r25, Y+22	; 0x16
    1660:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    1664:	88 23       	and	r24, r24
    1666:	2c f4       	brge	.+10     	; 0x1672 <LCD_Initialize+0x1ba>
		__ticks = 1;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	98 8f       	std	Y+24, r25	; 0x18
    166e:	8f 8b       	std	Y+23, r24	; 0x17
    1670:	3f c0       	rjmp	.+126    	; 0x16f0 <LCD_Initialize+0x238>
	else if (__tmp > 65535)
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	3f ef       	ldi	r19, 0xFF	; 255
    1676:	4f e7       	ldi	r20, 0x7F	; 127
    1678:	57 e4       	ldi	r21, 0x47	; 71
    167a:	6b 89       	ldd	r22, Y+19	; 0x13
    167c:	7c 89       	ldd	r23, Y+20	; 0x14
    167e:	8d 89       	ldd	r24, Y+21	; 0x15
    1680:	9e 89       	ldd	r25, Y+22	; 0x16
    1682:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
    1686:	18 16       	cp	r1, r24
    1688:	4c f5       	brge	.+82     	; 0x16dc <LCD_Initialize+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e2       	ldi	r20, 0x20	; 32
    1690:	51 e4       	ldi	r21, 0x41	; 65
    1692:	6f 85       	ldd	r22, Y+15	; 0x0f
    1694:	78 89       	ldd	r23, Y+16	; 0x10
    1696:	89 89       	ldd	r24, Y+17	; 0x11
    1698:	9a 89       	ldd	r25, Y+18	; 0x12
    169a:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	bc 01       	movw	r22, r24
    16a4:	cd 01       	movw	r24, r26
    16a6:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	98 8f       	std	Y+24, r25	; 0x18
    16b0:	8f 8b       	std	Y+23, r24	; 0x17
    16b2:	0f c0       	rjmp	.+30     	; 0x16d2 <LCD_Initialize+0x21a>
    16b4:	80 e9       	ldi	r24, 0x90	; 144
    16b6:	91 e0       	ldi	r25, 0x01	; 1
    16b8:	9a 8f       	std	Y+26, r25	; 0x1a
    16ba:	89 8f       	std	Y+25, r24	; 0x19
    16bc:	89 8d       	ldd	r24, Y+25	; 0x19
    16be:	9a 8d       	ldd	r25, Y+26	; 0x1a
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <LCD_Initialize+0x208>
    16c4:	9a 8f       	std	Y+26, r25	; 0x1a
    16c6:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ca:	98 8d       	ldd	r25, Y+24	; 0x18
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	98 8f       	std	Y+24, r25	; 0x18
    16d0:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d2:	8f 89       	ldd	r24, Y+23	; 0x17
    16d4:	98 8d       	ldd	r25, Y+24	; 0x18
    16d6:	89 2b       	or	r24, r25
    16d8:	69 f7       	brne	.-38     	; 0x16b4 <LCD_Initialize+0x1fc>
    16da:	14 c0       	rjmp	.+40     	; 0x1704 <LCD_Initialize+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16dc:	6b 89       	ldd	r22, Y+19	; 0x13
    16de:	7c 89       	ldd	r23, Y+20	; 0x14
    16e0:	8d 89       	ldd	r24, Y+21	; 0x15
    16e2:	9e 89       	ldd	r25, Y+22	; 0x16
    16e4:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	98 8f       	std	Y+24, r25	; 0x18
    16ee:	8f 8b       	std	Y+23, r24	; 0x17
    16f0:	8f 89       	ldd	r24, Y+23	; 0x17
    16f2:	98 8d       	ldd	r25, Y+24	; 0x18
    16f4:	9c 8f       	std	Y+28, r25	; 0x1c
    16f6:	8b 8f       	std	Y+27, r24	; 0x1b
    16f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <LCD_Initialize+0x244>
    1700:	9c 8f       	std	Y+28, r25	; 0x1c
    1702:	8b 8f       	std	Y+27, r24	; 0x1b
	
	_delay_ms(5);
}
    1704:	6c 96       	adiw	r28, 0x1c	; 28
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	08 95       	ret

00001716 <LCD_Clear>:
void LCD_Clear(void)
{
    1716:	cf 93       	push	r28
    1718:	df 93       	push	r29
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
	LCD_Write_Command(0x01);//Clear Display
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	0e 94 95 0b 	call	0x172a	; 0x172a <LCD_Write_Command>
}
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	08 95       	ret

0000172a <LCD_Write_Command>:
void LCD_Write_Command(uint8_t command)
{
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	e9 97       	sbiw	r28, 0x39	; 57
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	89 af       	std	Y+57, r24	; 0x39
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RS, LCD_LOW);//Choose Control Register
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	61 e0       	ldi	r22, 0x01	; 1
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RW, LCD_LOW);//Choose Write on LCD
    174a:	40 e0       	ldi	r20, 0x00	; 0
    174c:	62 e0       	ldi	r22, 0x02	; 2
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	63 e0       	ldi	r22, 0x03	; 3
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	a0 e8       	ldi	r26, 0x80	; 128
    1764:	bf e3       	ldi	r27, 0x3F	; 63
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	9a 83       	std	Y+2, r25	; 0x02
    176a:	ab 83       	std	Y+3, r26	; 0x03
    176c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	4a e7       	ldi	r20, 0x7A	; 122
    1774:	55 e4       	ldi	r21, 0x45	; 69
    1776:	69 81       	ldd	r22, Y+1	; 0x01
    1778:	7a 81       	ldd	r23, Y+2	; 0x02
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	9c 81       	ldd	r25, Y+4	; 0x04
    177e:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	8d 83       	std	Y+5, r24	; 0x05
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	af 83       	std	Y+7, r26	; 0x07
    178c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e8       	ldi	r20, 0x80	; 128
    1794:	5f e3       	ldi	r21, 0x3F	; 63
    1796:	6d 81       	ldd	r22, Y+5	; 0x05
    1798:	7e 81       	ldd	r23, Y+6	; 0x06
    179a:	8f 81       	ldd	r24, Y+7	; 0x07
    179c:	98 85       	ldd	r25, Y+8	; 0x08
    179e:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    17a2:	88 23       	and	r24, r24
    17a4:	2c f4       	brge	.+10     	; 0x17b0 <LCD_Write_Command+0x86>
		__ticks = 1;
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	9a 87       	std	Y+10, r25	; 0x0a
    17ac:	89 87       	std	Y+9, r24	; 0x09
    17ae:	3f c0       	rjmp	.+126    	; 0x182e <LCD_Write_Command+0x104>
	else if (__tmp > 65535)
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	3f ef       	ldi	r19, 0xFF	; 255
    17b4:	4f e7       	ldi	r20, 0x7F	; 127
    17b6:	57 e4       	ldi	r21, 0x47	; 71
    17b8:	6d 81       	ldd	r22, Y+5	; 0x05
    17ba:	7e 81       	ldd	r23, Y+6	; 0x06
    17bc:	8f 81       	ldd	r24, Y+7	; 0x07
    17be:	98 85       	ldd	r25, Y+8	; 0x08
    17c0:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
    17c4:	18 16       	cp	r1, r24
    17c6:	4c f5       	brge	.+82     	; 0x181a <LCD_Write_Command+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e2       	ldi	r20, 0x20	; 32
    17ce:	51 e4       	ldi	r21, 0x41	; 65
    17d0:	69 81       	ldd	r22, Y+1	; 0x01
    17d2:	7a 81       	ldd	r23, Y+2	; 0x02
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	9c 81       	ldd	r25, Y+4	; 0x04
    17d8:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	bc 01       	movw	r22, r24
    17e2:	cd 01       	movw	r24, r26
    17e4:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	9a 87       	std	Y+10, r25	; 0x0a
    17ee:	89 87       	std	Y+9, r24	; 0x09
    17f0:	0f c0       	rjmp	.+30     	; 0x1810 <LCD_Write_Command+0xe6>
    17f2:	80 e9       	ldi	r24, 0x90	; 144
    17f4:	91 e0       	ldi	r25, 0x01	; 1
    17f6:	9c 87       	std	Y+12, r25	; 0x0c
    17f8:	8b 87       	std	Y+11, r24	; 0x0b
    17fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    17fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	f1 f7       	brne	.-4      	; 0x17fe <LCD_Write_Command+0xd4>
    1802:	9c 87       	std	Y+12, r25	; 0x0c
    1804:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1806:	89 85       	ldd	r24, Y+9	; 0x09
    1808:	9a 85       	ldd	r25, Y+10	; 0x0a
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	9a 87       	std	Y+10, r25	; 0x0a
    180e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1810:	89 85       	ldd	r24, Y+9	; 0x09
    1812:	9a 85       	ldd	r25, Y+10	; 0x0a
    1814:	89 2b       	or	r24, r25
    1816:	69 f7       	brne	.-38     	; 0x17f2 <LCD_Write_Command+0xc8>
    1818:	14 c0       	rjmp	.+40     	; 0x1842 <LCD_Write_Command+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181a:	6d 81       	ldd	r22, Y+5	; 0x05
    181c:	7e 81       	ldd	r23, Y+6	; 0x06
    181e:	8f 81       	ldd	r24, Y+7	; 0x07
    1820:	98 85       	ldd	r25, Y+8	; 0x08
    1822:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	9a 87       	std	Y+10, r25	; 0x0a
    182c:	89 87       	std	Y+9, r24	; 0x09
    182e:	89 85       	ldd	r24, Y+9	; 0x09
    1830:	9a 85       	ldd	r25, Y+10	; 0x0a
    1832:	9e 87       	std	Y+14, r25	; 0x0e
    1834:	8d 87       	std	Y+13, r24	; 0x0d
    1836:	8d 85       	ldd	r24, Y+13	; 0x0d
    1838:	9e 85       	ldd	r25, Y+14	; 0x0e
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <LCD_Write_Command+0x110>
    183e:	9e 87       	std	Y+14, r25	; 0x0e
    1840:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1);
	//Send High Nibble First
	PORTA = ((command)& 0xF0) | (PORTA & 0x0F);
    1842:	8b e3       	ldi	r24, 0x3B	; 59
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	29 ad       	ldd	r18, Y+57	; 0x39
    1848:	42 2f       	mov	r20, r18
    184a:	40 7f       	andi	r20, 0xF0	; 240
    184c:	2b e3       	ldi	r18, 0x3B	; 59
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	f9 01       	movw	r30, r18
    1852:	20 81       	ld	r18, Z
    1854:	2f 70       	andi	r18, 0x0F	; 15
    1856:	24 2b       	or	r18, r20
    1858:	fc 01       	movw	r30, r24
    185a:	20 83       	st	Z, r18
	//Send High to Low Pulse
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Disable LCD
    185c:	41 e0       	ldi	r20, 0x01	; 1
    185e:	63 e0       	ldi	r22, 0x03	; 3
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	a0 e8       	ldi	r26, 0x80	; 128
    186c:	bf e3       	ldi	r27, 0x3F	; 63
    186e:	8f 87       	std	Y+15, r24	; 0x0f
    1870:	98 8b       	std	Y+16, r25	; 0x10
    1872:	a9 8b       	std	Y+17, r26	; 0x11
    1874:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	4a e7       	ldi	r20, 0x7A	; 122
    187c:	55 e4       	ldi	r21, 0x45	; 69
    187e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1880:	78 89       	ldd	r23, Y+16	; 0x10
    1882:	89 89       	ldd	r24, Y+17	; 0x11
    1884:	9a 89       	ldd	r25, Y+18	; 0x12
    1886:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	8b 8b       	std	Y+19, r24	; 0x13
    1890:	9c 8b       	std	Y+20, r25	; 0x14
    1892:	ad 8b       	std	Y+21, r26	; 0x15
    1894:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	40 e8       	ldi	r20, 0x80	; 128
    189c:	5f e3       	ldi	r21, 0x3F	; 63
    189e:	6b 89       	ldd	r22, Y+19	; 0x13
    18a0:	7c 89       	ldd	r23, Y+20	; 0x14
    18a2:	8d 89       	ldd	r24, Y+21	; 0x15
    18a4:	9e 89       	ldd	r25, Y+22	; 0x16
    18a6:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    18aa:	88 23       	and	r24, r24
    18ac:	2c f4       	brge	.+10     	; 0x18b8 <LCD_Write_Command+0x18e>
		__ticks = 1;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	98 8f       	std	Y+24, r25	; 0x18
    18b4:	8f 8b       	std	Y+23, r24	; 0x17
    18b6:	3f c0       	rjmp	.+126    	; 0x1936 <LCD_Write_Command+0x20c>
	else if (__tmp > 65535)
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	3f ef       	ldi	r19, 0xFF	; 255
    18bc:	4f e7       	ldi	r20, 0x7F	; 127
    18be:	57 e4       	ldi	r21, 0x47	; 71
    18c0:	6b 89       	ldd	r22, Y+19	; 0x13
    18c2:	7c 89       	ldd	r23, Y+20	; 0x14
    18c4:	8d 89       	ldd	r24, Y+21	; 0x15
    18c6:	9e 89       	ldd	r25, Y+22	; 0x16
    18c8:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
    18cc:	18 16       	cp	r1, r24
    18ce:	4c f5       	brge	.+82     	; 0x1922 <LCD_Write_Command+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e2       	ldi	r20, 0x20	; 32
    18d6:	51 e4       	ldi	r21, 0x41	; 65
    18d8:	6f 85       	ldd	r22, Y+15	; 0x0f
    18da:	78 89       	ldd	r23, Y+16	; 0x10
    18dc:	89 89       	ldd	r24, Y+17	; 0x11
    18de:	9a 89       	ldd	r25, Y+18	; 0x12
    18e0:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	bc 01       	movw	r22, r24
    18ea:	cd 01       	movw	r24, r26
    18ec:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	98 8f       	std	Y+24, r25	; 0x18
    18f6:	8f 8b       	std	Y+23, r24	; 0x17
    18f8:	0f c0       	rjmp	.+30     	; 0x1918 <LCD_Write_Command+0x1ee>
    18fa:	80 e9       	ldi	r24, 0x90	; 144
    18fc:	91 e0       	ldi	r25, 0x01	; 1
    18fe:	9a 8f       	std	Y+26, r25	; 0x1a
    1900:	89 8f       	std	Y+25, r24	; 0x19
    1902:	89 8d       	ldd	r24, Y+25	; 0x19
    1904:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	f1 f7       	brne	.-4      	; 0x1906 <LCD_Write_Command+0x1dc>
    190a:	9a 8f       	std	Y+26, r25	; 0x1a
    190c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190e:	8f 89       	ldd	r24, Y+23	; 0x17
    1910:	98 8d       	ldd	r25, Y+24	; 0x18
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	98 8f       	std	Y+24, r25	; 0x18
    1916:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1918:	8f 89       	ldd	r24, Y+23	; 0x17
    191a:	98 8d       	ldd	r25, Y+24	; 0x18
    191c:	89 2b       	or	r24, r25
    191e:	69 f7       	brne	.-38     	; 0x18fa <LCD_Write_Command+0x1d0>
    1920:	14 c0       	rjmp	.+40     	; 0x194a <LCD_Write_Command+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1922:	6b 89       	ldd	r22, Y+19	; 0x13
    1924:	7c 89       	ldd	r23, Y+20	; 0x14
    1926:	8d 89       	ldd	r24, Y+21	; 0x15
    1928:	9e 89       	ldd	r25, Y+22	; 0x16
    192a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	98 8f       	std	Y+24, r25	; 0x18
    1934:	8f 8b       	std	Y+23, r24	; 0x17
    1936:	8f 89       	ldd	r24, Y+23	; 0x17
    1938:	98 8d       	ldd	r25, Y+24	; 0x18
    193a:	9c 8f       	std	Y+28, r25	; 0x1c
    193c:	8b 8f       	std	Y+27, r24	; 0x1b
    193e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1940:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <LCD_Write_Command+0x218>
    1946:	9c 8f       	std	Y+28, r25	; 0x1c
    1948:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1); //3shan ydmn enha msh noise
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	63 e0       	ldi	r22, 0x03	; 3
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
	//Send Low Nibble First
	PORTA = ((command<<4)& 0xF0) | (PORTA & 0x0F);
    1954:	8b e3       	ldi	r24, 0x3B	; 59
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	29 ad       	ldd	r18, Y+57	; 0x39
    195a:	22 2f       	mov	r18, r18
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	22 95       	swap	r18
    1960:	32 95       	swap	r19
    1962:	30 7f       	andi	r19, 0xF0	; 240
    1964:	32 27       	eor	r19, r18
    1966:	20 7f       	andi	r18, 0xF0	; 240
    1968:	32 27       	eor	r19, r18
    196a:	42 2f       	mov	r20, r18
    196c:	2b e3       	ldi	r18, 0x3B	; 59
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	f9 01       	movw	r30, r18
    1972:	20 81       	ld	r18, Z
    1974:	2f 70       	andi	r18, 0x0F	; 15
    1976:	24 2b       	or	r18, r20
    1978:	fc 01       	movw	r30, r24
    197a:	20 83       	st	Z, r18
	//Send High to Low Pulse
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Disable LCD
    197c:	41 e0       	ldi	r20, 0x01	; 1
    197e:	63 e0       	ldi	r22, 0x03	; 3
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a0 e8       	ldi	r26, 0x80	; 128
    198c:	bf e3       	ldi	r27, 0x3F	; 63
    198e:	8d 8f       	std	Y+29, r24	; 0x1d
    1990:	9e 8f       	std	Y+30, r25	; 0x1e
    1992:	af 8f       	std	Y+31, r26	; 0x1f
    1994:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a e7       	ldi	r20, 0x7A	; 122
    199c:	55 e4       	ldi	r21, 0x45	; 69
    199e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    19a0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    19a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19a4:	98 a1       	ldd	r25, Y+32	; 0x20
    19a6:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	89 a3       	std	Y+33, r24	; 0x21
    19b0:	9a a3       	std	Y+34, r25	; 0x22
    19b2:	ab a3       	std	Y+35, r26	; 0x23
    19b4:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	69 a1       	ldd	r22, Y+33	; 0x21
    19c0:	7a a1       	ldd	r23, Y+34	; 0x22
    19c2:	8b a1       	ldd	r24, Y+35	; 0x23
    19c4:	9c a1       	ldd	r25, Y+36	; 0x24
    19c6:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    19ca:	88 23       	and	r24, r24
    19cc:	2c f4       	brge	.+10     	; 0x19d8 <LCD_Write_Command+0x2ae>
		__ticks = 1;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	9e a3       	std	Y+38, r25	; 0x26
    19d4:	8d a3       	std	Y+37, r24	; 0x25
    19d6:	3f c0       	rjmp	.+126    	; 0x1a56 <LCD_Write_Command+0x32c>
	else if (__tmp > 65535)
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	3f ef       	ldi	r19, 0xFF	; 255
    19dc:	4f e7       	ldi	r20, 0x7F	; 127
    19de:	57 e4       	ldi	r21, 0x47	; 71
    19e0:	69 a1       	ldd	r22, Y+33	; 0x21
    19e2:	7a a1       	ldd	r23, Y+34	; 0x22
    19e4:	8b a1       	ldd	r24, Y+35	; 0x23
    19e6:	9c a1       	ldd	r25, Y+36	; 0x24
    19e8:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
    19ec:	18 16       	cp	r1, r24
    19ee:	4c f5       	brge	.+82     	; 0x1a42 <LCD_Write_Command+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e2       	ldi	r20, 0x20	; 32
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    19fa:	7e 8d       	ldd	r23, Y+30	; 0x1e
    19fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19fe:	98 a1       	ldd	r25, Y+32	; 0x20
    1a00:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	bc 01       	movw	r22, r24
    1a0a:	cd 01       	movw	r24, r26
    1a0c:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	9e a3       	std	Y+38, r25	; 0x26
    1a16:	8d a3       	std	Y+37, r24	; 0x25
    1a18:	0f c0       	rjmp	.+30     	; 0x1a38 <LCD_Write_Command+0x30e>
    1a1a:	80 e9       	ldi	r24, 0x90	; 144
    1a1c:	91 e0       	ldi	r25, 0x01	; 1
    1a1e:	98 a7       	std	Y+40, r25	; 0x28
    1a20:	8f a3       	std	Y+39, r24	; 0x27
    1a22:	8f a1       	ldd	r24, Y+39	; 0x27
    1a24:	98 a5       	ldd	r25, Y+40	; 0x28
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <LCD_Write_Command+0x2fc>
    1a2a:	98 a7       	std	Y+40, r25	; 0x28
    1a2c:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a30:	9e a1       	ldd	r25, Y+38	; 0x26
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	9e a3       	std	Y+38, r25	; 0x26
    1a36:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a38:	8d a1       	ldd	r24, Y+37	; 0x25
    1a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a3c:	89 2b       	or	r24, r25
    1a3e:	69 f7       	brne	.-38     	; 0x1a1a <LCD_Write_Command+0x2f0>
    1a40:	14 c0       	rjmp	.+40     	; 0x1a6a <LCD_Write_Command+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a42:	69 a1       	ldd	r22, Y+33	; 0x21
    1a44:	7a a1       	ldd	r23, Y+34	; 0x22
    1a46:	8b a1       	ldd	r24, Y+35	; 0x23
    1a48:	9c a1       	ldd	r25, Y+36	; 0x24
    1a4a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	9e a3       	std	Y+38, r25	; 0x26
    1a54:	8d a3       	std	Y+37, r24	; 0x25
    1a56:	8d a1       	ldd	r24, Y+37	; 0x25
    1a58:	9e a1       	ldd	r25, Y+38	; 0x26
    1a5a:	9a a7       	std	Y+42, r25	; 0x2a
    1a5c:	89 a7       	std	Y+41, r24	; 0x29
    1a5e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a60:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <LCD_Write_Command+0x338>
    1a66:	9a a7       	std	Y+42, r25	; 0x2a
    1a68:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
    1a6a:	40 e0       	ldi	r20, 0x00	; 0
    1a6c:	63 e0       	ldi	r22, 0x03	; 3
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	a0 e0       	ldi	r26, 0x00	; 0
    1a7a:	b0 e4       	ldi	r27, 0x40	; 64
    1a7c:	8b a7       	std	Y+43, r24	; 0x2b
    1a7e:	9c a7       	std	Y+44, r25	; 0x2c
    1a80:	ad a7       	std	Y+45, r26	; 0x2d
    1a82:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a e7       	ldi	r20, 0x7A	; 122
    1a8a:	55 e4       	ldi	r21, 0x45	; 69
    1a8c:	6b a5       	ldd	r22, Y+43	; 0x2b
    1a8e:	7c a5       	ldd	r23, Y+44	; 0x2c
    1a90:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a92:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a94:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	8f a7       	std	Y+47, r24	; 0x2f
    1a9e:	98 ab       	std	Y+48, r25	; 0x30
    1aa0:	a9 ab       	std	Y+49, r26	; 0x31
    1aa2:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	6f a5       	ldd	r22, Y+47	; 0x2f
    1aae:	78 a9       	ldd	r23, Y+48	; 0x30
    1ab0:	89 a9       	ldd	r24, Y+49	; 0x31
    1ab2:	9a a9       	ldd	r25, Y+50	; 0x32
    1ab4:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    1ab8:	88 23       	and	r24, r24
    1aba:	2c f4       	brge	.+10     	; 0x1ac6 <LCD_Write_Command+0x39c>
		__ticks = 1;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	9c ab       	std	Y+52, r25	; 0x34
    1ac2:	8b ab       	std	Y+51, r24	; 0x33
    1ac4:	3f c0       	rjmp	.+126    	; 0x1b44 <LCD_Write_Command+0x41a>
	else if (__tmp > 65535)
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	6f a5       	ldd	r22, Y+47	; 0x2f
    1ad0:	78 a9       	ldd	r23, Y+48	; 0x30
    1ad2:	89 a9       	ldd	r24, Y+49	; 0x31
    1ad4:	9a a9       	ldd	r25, Y+50	; 0x32
    1ad6:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
    1ada:	18 16       	cp	r1, r24
    1adc:	4c f5       	brge	.+82     	; 0x1b30 <LCD_Write_Command+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e2       	ldi	r20, 0x20	; 32
    1ae4:	51 e4       	ldi	r21, 0x41	; 65
    1ae6:	6b a5       	ldd	r22, Y+43	; 0x2b
    1ae8:	7c a5       	ldd	r23, Y+44	; 0x2c
    1aea:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aec:	9e a5       	ldd	r25, Y+46	; 0x2e
    1aee:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	bc 01       	movw	r22, r24
    1af8:	cd 01       	movw	r24, r26
    1afa:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	9c ab       	std	Y+52, r25	; 0x34
    1b04:	8b ab       	std	Y+51, r24	; 0x33
    1b06:	0f c0       	rjmp	.+30     	; 0x1b26 <LCD_Write_Command+0x3fc>
    1b08:	80 e9       	ldi	r24, 0x90	; 144
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	9e ab       	std	Y+54, r25	; 0x36
    1b0e:	8d ab       	std	Y+53, r24	; 0x35
    1b10:	8d a9       	ldd	r24, Y+53	; 0x35
    1b12:	9e a9       	ldd	r25, Y+54	; 0x36
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <LCD_Write_Command+0x3ea>
    1b18:	9e ab       	std	Y+54, r25	; 0x36
    1b1a:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	9c ab       	std	Y+52, r25	; 0x34
    1b24:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b26:	8b a9       	ldd	r24, Y+51	; 0x33
    1b28:	9c a9       	ldd	r25, Y+52	; 0x34
    1b2a:	89 2b       	or	r24, r25
    1b2c:	69 f7       	brne	.-38     	; 0x1b08 <LCD_Write_Command+0x3de>
    1b2e:	14 c0       	rjmp	.+40     	; 0x1b58 <LCD_Write_Command+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b30:	6f a5       	ldd	r22, Y+47	; 0x2f
    1b32:	78 a9       	ldd	r23, Y+48	; 0x30
    1b34:	89 a9       	ldd	r24, Y+49	; 0x31
    1b36:	9a a9       	ldd	r25, Y+50	; 0x32
    1b38:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	9c ab       	std	Y+52, r25	; 0x34
    1b42:	8b ab       	std	Y+51, r24	; 0x33
    1b44:	8b a9       	ldd	r24, Y+51	; 0x33
    1b46:	9c a9       	ldd	r25, Y+52	; 0x34
    1b48:	98 af       	std	Y+56, r25	; 0x38
    1b4a:	8f ab       	std	Y+55, r24	; 0x37
    1b4c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b4e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <LCD_Write_Command+0x426>
    1b54:	98 af       	std	Y+56, r25	; 0x38
    1b56:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(2);
}
    1b58:	e9 96       	adiw	r28, 0x39	; 57
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	de bf       	out	0x3e, r29	; 62
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	cd bf       	out	0x3d, r28	; 61
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	08 95       	ret

00001b6a <LCD_Write_Character>:
void LCD_Write_Character(uint8_t character)
{
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	e9 97       	sbiw	r28, 0x39	; 57
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	89 af       	std	Y+57, r24	; 0x39
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RS, LCD_HIGH);//Choose Data Register
    1b80:	41 e0       	ldi	r20, 0x01	; 1
    1b82:	61 e0       	ldi	r22, 0x01	; 1
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RW, LCD_LOW);//Choose Write on LCD
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	62 e0       	ldi	r22, 0x02	; 2
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	63 e0       	ldi	r22, 0x03	; 3
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	a0 e8       	ldi	r26, 0x80	; 128
    1ba4:	bf e3       	ldi	r27, 0x3F	; 63
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	9a 83       	std	Y+2, r25	; 0x02
    1baa:	ab 83       	std	Y+3, r26	; 0x03
    1bac:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	4a e7       	ldi	r20, 0x7A	; 122
    1bb4:	55 e4       	ldi	r21, 0x45	; 69
    1bb6:	69 81       	ldd	r22, Y+1	; 0x01
    1bb8:	7a 81       	ldd	r23, Y+2	; 0x02
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	8d 83       	std	Y+5, r24	; 0x05
    1bc8:	9e 83       	std	Y+6, r25	; 0x06
    1bca:	af 83       	std	Y+7, r26	; 0x07
    1bcc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e8       	ldi	r20, 0x80	; 128
    1bd4:	5f e3       	ldi	r21, 0x3F	; 63
    1bd6:	6d 81       	ldd	r22, Y+5	; 0x05
    1bd8:	7e 81       	ldd	r23, Y+6	; 0x06
    1bda:	8f 81       	ldd	r24, Y+7	; 0x07
    1bdc:	98 85       	ldd	r25, Y+8	; 0x08
    1bde:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    1be2:	88 23       	and	r24, r24
    1be4:	2c f4       	brge	.+10     	; 0x1bf0 <LCD_Write_Character+0x86>
		__ticks = 1;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9a 87       	std	Y+10, r25	; 0x0a
    1bec:	89 87       	std	Y+9, r24	; 0x09
    1bee:	3f c0       	rjmp	.+126    	; 0x1c6e <LCD_Write_Character+0x104>
	else if (__tmp > 65535)
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	3f ef       	ldi	r19, 0xFF	; 255
    1bf4:	4f e7       	ldi	r20, 0x7F	; 127
    1bf6:	57 e4       	ldi	r21, 0x47	; 71
    1bf8:	6d 81       	ldd	r22, Y+5	; 0x05
    1bfa:	7e 81       	ldd	r23, Y+6	; 0x06
    1bfc:	8f 81       	ldd	r24, Y+7	; 0x07
    1bfe:	98 85       	ldd	r25, Y+8	; 0x08
    1c00:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
    1c04:	18 16       	cp	r1, r24
    1c06:	4c f5       	brge	.+82     	; 0x1c5a <LCD_Write_Character+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e2       	ldi	r20, 0x20	; 32
    1c0e:	51 e4       	ldi	r21, 0x41	; 65
    1c10:	69 81       	ldd	r22, Y+1	; 0x01
    1c12:	7a 81       	ldd	r23, Y+2	; 0x02
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	9c 81       	ldd	r25, Y+4	; 0x04
    1c18:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9a 87       	std	Y+10, r25	; 0x0a
    1c2e:	89 87       	std	Y+9, r24	; 0x09
    1c30:	0f c0       	rjmp	.+30     	; 0x1c50 <LCD_Write_Character+0xe6>
    1c32:	80 e9       	ldi	r24, 0x90	; 144
    1c34:	91 e0       	ldi	r25, 0x01	; 1
    1c36:	9c 87       	std	Y+12, r25	; 0x0c
    1c38:	8b 87       	std	Y+11, r24	; 0x0b
    1c3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <LCD_Write_Character+0xd4>
    1c42:	9c 87       	std	Y+12, r25	; 0x0c
    1c44:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	9a 87       	std	Y+10, r25	; 0x0a
    1c4e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c50:	89 85       	ldd	r24, Y+9	; 0x09
    1c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c54:	89 2b       	or	r24, r25
    1c56:	69 f7       	brne	.-38     	; 0x1c32 <LCD_Write_Character+0xc8>
    1c58:	14 c0       	rjmp	.+40     	; 0x1c82 <LCD_Write_Character+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5a:	6d 81       	ldd	r22, Y+5	; 0x05
    1c5c:	7e 81       	ldd	r23, Y+6	; 0x06
    1c5e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c60:	98 85       	ldd	r25, Y+8	; 0x08
    1c62:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	9a 87       	std	Y+10, r25	; 0x0a
    1c6c:	89 87       	std	Y+9, r24	; 0x09
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c72:	9e 87       	std	Y+14, r25	; 0x0e
    1c74:	8d 87       	std	Y+13, r24	; 0x0d
    1c76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_Write_Character+0x110>
    1c7e:	9e 87       	std	Y+14, r25	; 0x0e
    1c80:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(1);
		//Send High Nibble First
		PORTA = ((character)& 0xF0) | (PORTA & 0x0F);
    1c82:	8b e3       	ldi	r24, 0x3B	; 59
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	29 ad       	ldd	r18, Y+57	; 0x39
    1c88:	42 2f       	mov	r20, r18
    1c8a:	40 7f       	andi	r20, 0xF0	; 240
    1c8c:	2b e3       	ldi	r18, 0x3B	; 59
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	f9 01       	movw	r30, r18
    1c92:	20 81       	ld	r18, Z
    1c94:	2f 70       	andi	r18, 0x0F	; 15
    1c96:	24 2b       	or	r18, r20
    1c98:	fc 01       	movw	r30, r24
    1c9a:	20 83       	st	Z, r18
		//Send High to Low Pulse
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Disable LCD
    1c9c:	41 e0       	ldi	r20, 0x01	; 1
    1c9e:	63 e0       	ldi	r22, 0x03	; 3
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	a0 e8       	ldi	r26, 0x80	; 128
    1cac:	bf e3       	ldi	r27, 0x3F	; 63
    1cae:	8f 87       	std	Y+15, r24	; 0x0f
    1cb0:	98 8b       	std	Y+16, r25	; 0x10
    1cb2:	a9 8b       	std	Y+17, r26	; 0x11
    1cb4:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4a e7       	ldi	r20, 0x7A	; 122
    1cbc:	55 e4       	ldi	r21, 0x45	; 69
    1cbe:	6f 85       	ldd	r22, Y+15	; 0x0f
    1cc0:	78 89       	ldd	r23, Y+16	; 0x10
    1cc2:	89 89       	ldd	r24, Y+17	; 0x11
    1cc4:	9a 89       	ldd	r25, Y+18	; 0x12
    1cc6:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	8b 8b       	std	Y+19, r24	; 0x13
    1cd0:	9c 8b       	std	Y+20, r25	; 0x14
    1cd2:	ad 8b       	std	Y+21, r26	; 0x15
    1cd4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e8       	ldi	r20, 0x80	; 128
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	6b 89       	ldd	r22, Y+19	; 0x13
    1ce0:	7c 89       	ldd	r23, Y+20	; 0x14
    1ce2:	8d 89       	ldd	r24, Y+21	; 0x15
    1ce4:	9e 89       	ldd	r25, Y+22	; 0x16
    1ce6:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    1cea:	88 23       	and	r24, r24
    1cec:	2c f4       	brge	.+10     	; 0x1cf8 <LCD_Write_Character+0x18e>
		__ticks = 1;
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	98 8f       	std	Y+24, r25	; 0x18
    1cf4:	8f 8b       	std	Y+23, r24	; 0x17
    1cf6:	3f c0       	rjmp	.+126    	; 0x1d76 <LCD_Write_Character+0x20c>
	else if (__tmp > 65535)
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	3f ef       	ldi	r19, 0xFF	; 255
    1cfc:	4f e7       	ldi	r20, 0x7F	; 127
    1cfe:	57 e4       	ldi	r21, 0x47	; 71
    1d00:	6b 89       	ldd	r22, Y+19	; 0x13
    1d02:	7c 89       	ldd	r23, Y+20	; 0x14
    1d04:	8d 89       	ldd	r24, Y+21	; 0x15
    1d06:	9e 89       	ldd	r25, Y+22	; 0x16
    1d08:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
    1d0c:	18 16       	cp	r1, r24
    1d0e:	4c f5       	brge	.+82     	; 0x1d62 <LCD_Write_Character+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e2       	ldi	r20, 0x20	; 32
    1d16:	51 e4       	ldi	r21, 0x41	; 65
    1d18:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d1a:	78 89       	ldd	r23, Y+16	; 0x10
    1d1c:	89 89       	ldd	r24, Y+17	; 0x11
    1d1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d20:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	bc 01       	movw	r22, r24
    1d2a:	cd 01       	movw	r24, r26
    1d2c:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	98 8f       	std	Y+24, r25	; 0x18
    1d36:	8f 8b       	std	Y+23, r24	; 0x17
    1d38:	0f c0       	rjmp	.+30     	; 0x1d58 <LCD_Write_Character+0x1ee>
    1d3a:	80 e9       	ldi	r24, 0x90	; 144
    1d3c:	91 e0       	ldi	r25, 0x01	; 1
    1d3e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d40:	89 8f       	std	Y+25, r24	; 0x19
    1d42:	89 8d       	ldd	r24, Y+25	; 0x19
    1d44:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <LCD_Write_Character+0x1dc>
    1d4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d4c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d50:	98 8d       	ldd	r25, Y+24	; 0x18
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	98 8f       	std	Y+24, r25	; 0x18
    1d56:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d58:	8f 89       	ldd	r24, Y+23	; 0x17
    1d5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5c:	89 2b       	or	r24, r25
    1d5e:	69 f7       	brne	.-38     	; 0x1d3a <LCD_Write_Character+0x1d0>
    1d60:	14 c0       	rjmp	.+40     	; 0x1d8a <LCD_Write_Character+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d62:	6b 89       	ldd	r22, Y+19	; 0x13
    1d64:	7c 89       	ldd	r23, Y+20	; 0x14
    1d66:	8d 89       	ldd	r24, Y+21	; 0x15
    1d68:	9e 89       	ldd	r25, Y+22	; 0x16
    1d6a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	98 8f       	std	Y+24, r25	; 0x18
    1d74:	8f 8b       	std	Y+23, r24	; 0x17
    1d76:	8f 89       	ldd	r24, Y+23	; 0x17
    1d78:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7a:	9c 8f       	std	Y+28, r25	; 0x1c
    1d7c:	8b 8f       	std	Y+27, r24	; 0x1b
    1d7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	f1 f7       	brne	.-4      	; 0x1d82 <LCD_Write_Character+0x218>
    1d86:	9c 8f       	std	Y+28, r25	; 0x1c
    1d88:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(1);
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	63 e0       	ldi	r22, 0x03	; 3
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
		//Send Low Nibble First
		PORTA = ((character<<4)& 0xF0) | (PORTA & 0x0F);
    1d94:	8b e3       	ldi	r24, 0x3B	; 59
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	29 ad       	ldd	r18, Y+57	; 0x39
    1d9a:	22 2f       	mov	r18, r18
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	22 95       	swap	r18
    1da0:	32 95       	swap	r19
    1da2:	30 7f       	andi	r19, 0xF0	; 240
    1da4:	32 27       	eor	r19, r18
    1da6:	20 7f       	andi	r18, 0xF0	; 240
    1da8:	32 27       	eor	r19, r18
    1daa:	42 2f       	mov	r20, r18
    1dac:	2b e3       	ldi	r18, 0x3B	; 59
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	f9 01       	movw	r30, r18
    1db2:	20 81       	ld	r18, Z
    1db4:	2f 70       	andi	r18, 0x0F	; 15
    1db6:	24 2b       	or	r18, r20
    1db8:	fc 01       	movw	r30, r24
    1dba:	20 83       	st	Z, r18
		//Send High to Low Pulse
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Disable LCD
    1dbc:	41 e0       	ldi	r20, 0x01	; 1
    1dbe:	63 e0       	ldi	r22, 0x03	; 3
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	a0 e8       	ldi	r26, 0x80	; 128
    1dcc:	bf e3       	ldi	r27, 0x3F	; 63
    1dce:	8d 8f       	std	Y+29, r24	; 0x1d
    1dd0:	9e 8f       	std	Y+30, r25	; 0x1e
    1dd2:	af 8f       	std	Y+31, r26	; 0x1f
    1dd4:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	4a e7       	ldi	r20, 0x7A	; 122
    1ddc:	55 e4       	ldi	r21, 0x45	; 69
    1dde:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1de0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1de2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1de4:	98 a1       	ldd	r25, Y+32	; 0x20
    1de6:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	89 a3       	std	Y+33, r24	; 0x21
    1df0:	9a a3       	std	Y+34, r25	; 0x22
    1df2:	ab a3       	std	Y+35, r26	; 0x23
    1df4:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e8       	ldi	r20, 0x80	; 128
    1dfc:	5f e3       	ldi	r21, 0x3F	; 63
    1dfe:	69 a1       	ldd	r22, Y+33	; 0x21
    1e00:	7a a1       	ldd	r23, Y+34	; 0x22
    1e02:	8b a1       	ldd	r24, Y+35	; 0x23
    1e04:	9c a1       	ldd	r25, Y+36	; 0x24
    1e06:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    1e0a:	88 23       	and	r24, r24
    1e0c:	2c f4       	brge	.+10     	; 0x1e18 <LCD_Write_Character+0x2ae>
		__ticks = 1;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	9e a3       	std	Y+38, r25	; 0x26
    1e14:	8d a3       	std	Y+37, r24	; 0x25
    1e16:	3f c0       	rjmp	.+126    	; 0x1e96 <LCD_Write_Character+0x32c>
	else if (__tmp > 65535)
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
    1e1c:	4f e7       	ldi	r20, 0x7F	; 127
    1e1e:	57 e4       	ldi	r21, 0x47	; 71
    1e20:	69 a1       	ldd	r22, Y+33	; 0x21
    1e22:	7a a1       	ldd	r23, Y+34	; 0x22
    1e24:	8b a1       	ldd	r24, Y+35	; 0x23
    1e26:	9c a1       	ldd	r25, Y+36	; 0x24
    1e28:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	4c f5       	brge	.+82     	; 0x1e82 <LCD_Write_Character+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e2       	ldi	r20, 0x20	; 32
    1e36:	51 e4       	ldi	r21, 0x41	; 65
    1e38:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e3a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1e3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e3e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e40:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	9e a3       	std	Y+38, r25	; 0x26
    1e56:	8d a3       	std	Y+37, r24	; 0x25
    1e58:	0f c0       	rjmp	.+30     	; 0x1e78 <LCD_Write_Character+0x30e>
    1e5a:	80 e9       	ldi	r24, 0x90	; 144
    1e5c:	91 e0       	ldi	r25, 0x01	; 1
    1e5e:	98 a7       	std	Y+40, r25	; 0x28
    1e60:	8f a3       	std	Y+39, r24	; 0x27
    1e62:	8f a1       	ldd	r24, Y+39	; 0x27
    1e64:	98 a5       	ldd	r25, Y+40	; 0x28
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <LCD_Write_Character+0x2fc>
    1e6a:	98 a7       	std	Y+40, r25	; 0x28
    1e6c:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e70:	9e a1       	ldd	r25, Y+38	; 0x26
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	9e a3       	std	Y+38, r25	; 0x26
    1e76:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e78:	8d a1       	ldd	r24, Y+37	; 0x25
    1e7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e7c:	89 2b       	or	r24, r25
    1e7e:	69 f7       	brne	.-38     	; 0x1e5a <LCD_Write_Character+0x2f0>
    1e80:	14 c0       	rjmp	.+40     	; 0x1eaa <LCD_Write_Character+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e82:	69 a1       	ldd	r22, Y+33	; 0x21
    1e84:	7a a1       	ldd	r23, Y+34	; 0x22
    1e86:	8b a1       	ldd	r24, Y+35	; 0x23
    1e88:	9c a1       	ldd	r25, Y+36	; 0x24
    1e8a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	9e a3       	std	Y+38, r25	; 0x26
    1e94:	8d a3       	std	Y+37, r24	; 0x25
    1e96:	8d a1       	ldd	r24, Y+37	; 0x25
    1e98:	9e a1       	ldd	r25, Y+38	; 0x26
    1e9a:	9a a7       	std	Y+42, r25	; 0x2a
    1e9c:	89 a7       	std	Y+41, r24	; 0x29
    1e9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1ea0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <LCD_Write_Character+0x338>
    1ea6:	9a a7       	std	Y+42, r25	; 0x2a
    1ea8:	89 a7       	std	Y+41, r24	; 0x29
		_delay_ms(1);
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	63 e0       	ldi	r22, 0x03	; 3
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	0e 94 a0 14 	call	0x2940	; 0x2940 <DIO_SetPin_Value>
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	a0 e0       	ldi	r26, 0x00	; 0
    1eba:	b0 e4       	ldi	r27, 0x40	; 64
    1ebc:	8b a7       	std	Y+43, r24	; 0x2b
    1ebe:	9c a7       	std	Y+44, r25	; 0x2c
    1ec0:	ad a7       	std	Y+45, r26	; 0x2d
    1ec2:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4a e7       	ldi	r20, 0x7A	; 122
    1eca:	55 e4       	ldi	r21, 0x45	; 69
    1ecc:	6b a5       	ldd	r22, Y+43	; 0x2b
    1ece:	7c a5       	ldd	r23, Y+44	; 0x2c
    1ed0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ed2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ed4:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	8f a7       	std	Y+47, r24	; 0x2f
    1ede:	98 ab       	std	Y+48, r25	; 0x30
    1ee0:	a9 ab       	std	Y+49, r26	; 0x31
    1ee2:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	6f a5       	ldd	r22, Y+47	; 0x2f
    1eee:	78 a9       	ldd	r23, Y+48	; 0x30
    1ef0:	89 a9       	ldd	r24, Y+49	; 0x31
    1ef2:	9a a9       	ldd	r25, Y+50	; 0x32
    1ef4:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    1ef8:	88 23       	and	r24, r24
    1efa:	2c f4       	brge	.+10     	; 0x1f06 <LCD_Write_Character+0x39c>
		__ticks = 1;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9c ab       	std	Y+52, r25	; 0x34
    1f02:	8b ab       	std	Y+51, r24	; 0x33
    1f04:	3f c0       	rjmp	.+126    	; 0x1f84 <LCD_Write_Character+0x41a>
	else if (__tmp > 65535)
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	3f ef       	ldi	r19, 0xFF	; 255
    1f0a:	4f e7       	ldi	r20, 0x7F	; 127
    1f0c:	57 e4       	ldi	r21, 0x47	; 71
    1f0e:	6f a5       	ldd	r22, Y+47	; 0x2f
    1f10:	78 a9       	ldd	r23, Y+48	; 0x30
    1f12:	89 a9       	ldd	r24, Y+49	; 0x31
    1f14:	9a a9       	ldd	r25, Y+50	; 0x32
    1f16:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
    1f1a:	18 16       	cp	r1, r24
    1f1c:	4c f5       	brge	.+82     	; 0x1f70 <LCD_Write_Character+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e2       	ldi	r20, 0x20	; 32
    1f24:	51 e4       	ldi	r21, 0x41	; 65
    1f26:	6b a5       	ldd	r22, Y+43	; 0x2b
    1f28:	7c a5       	ldd	r23, Y+44	; 0x2c
    1f2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f2e:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	bc 01       	movw	r22, r24
    1f38:	cd 01       	movw	r24, r26
    1f3a:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	9c ab       	std	Y+52, r25	; 0x34
    1f44:	8b ab       	std	Y+51, r24	; 0x33
    1f46:	0f c0       	rjmp	.+30     	; 0x1f66 <LCD_Write_Character+0x3fc>
    1f48:	80 e9       	ldi	r24, 0x90	; 144
    1f4a:	91 e0       	ldi	r25, 0x01	; 1
    1f4c:	9e ab       	std	Y+54, r25	; 0x36
    1f4e:	8d ab       	std	Y+53, r24	; 0x35
    1f50:	8d a9       	ldd	r24, Y+53	; 0x35
    1f52:	9e a9       	ldd	r25, Y+54	; 0x36
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <LCD_Write_Character+0x3ea>
    1f58:	9e ab       	std	Y+54, r25	; 0x36
    1f5a:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	9c ab       	std	Y+52, r25	; 0x34
    1f64:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f66:	8b a9       	ldd	r24, Y+51	; 0x33
    1f68:	9c a9       	ldd	r25, Y+52	; 0x34
    1f6a:	89 2b       	or	r24, r25
    1f6c:	69 f7       	brne	.-38     	; 0x1f48 <LCD_Write_Character+0x3de>
    1f6e:	14 c0       	rjmp	.+40     	; 0x1f98 <LCD_Write_Character+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f70:	6f a5       	ldd	r22, Y+47	; 0x2f
    1f72:	78 a9       	ldd	r23, Y+48	; 0x30
    1f74:	89 a9       	ldd	r24, Y+49	; 0x31
    1f76:	9a a9       	ldd	r25, Y+50	; 0x32
    1f78:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	9c ab       	std	Y+52, r25	; 0x34
    1f82:	8b ab       	std	Y+51, r24	; 0x33
    1f84:	8b a9       	ldd	r24, Y+51	; 0x33
    1f86:	9c a9       	ldd	r25, Y+52	; 0x34
    1f88:	98 af       	std	Y+56, r25	; 0x38
    1f8a:	8f ab       	std	Y+55, r24	; 0x37
    1f8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <LCD_Write_Character+0x426>
    1f94:	98 af       	std	Y+56, r25	; 0x38
    1f96:	8f ab       	std	Y+55, r24	; 0x37
		_delay_ms(2);
}
    1f98:	e9 96       	adiw	r28, 0x39	; 57
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	df 91       	pop	r29
    1fa6:	cf 91       	pop	r28
    1fa8:	08 95       	ret

00001faa <LCD_Write_String>:
void LCD_Write_String(uint8_t* str)
{
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	60 97       	sbiw	r28, 0x10	; 16
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	98 8b       	std	Y+16, r25	; 0x10
    1fc0:	8f 87       	std	Y+15, r24	; 0x0f
	while (*str != '\0')//Termination of any string, NULL character
    1fc2:	7d c0       	rjmp	.+250    	; 0x20be <LCD_Write_String+0x114>
	{
		LCD_Write_Character(*str);
    1fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc6:	98 89       	ldd	r25, Y+16	; 0x10
    1fc8:	fc 01       	movw	r30, r24
    1fca:	80 81       	ld	r24, Z
    1fcc:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <LCD_Write_Character>
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	a0 e0       	ldi	r26, 0x00	; 0
    1fd6:	b0 e4       	ldi	r27, 0x40	; 64
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	9a 83       	std	Y+2, r25	; 0x02
    1fdc:	ab 83       	std	Y+3, r26	; 0x03
    1fde:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	4a e7       	ldi	r20, 0x7A	; 122
    1fe6:	55 e4       	ldi	r21, 0x45	; 69
    1fe8:	69 81       	ldd	r22, Y+1	; 0x01
    1fea:	7a 81       	ldd	r23, Y+2	; 0x02
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff0:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	8d 83       	std	Y+5, r24	; 0x05
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	af 83       	std	Y+7, r26	; 0x07
    1ffe:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e8       	ldi	r20, 0x80	; 128
    2006:	5f e3       	ldi	r21, 0x3F	; 63
    2008:	6d 81       	ldd	r22, Y+5	; 0x05
    200a:	7e 81       	ldd	r23, Y+6	; 0x06
    200c:	8f 81       	ldd	r24, Y+7	; 0x07
    200e:	98 85       	ldd	r25, Y+8	; 0x08
    2010:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__cmpsf2>
    2014:	88 23       	and	r24, r24
    2016:	2c f4       	brge	.+10     	; 0x2022 <LCD_Write_String+0x78>
		__ticks = 1;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	9a 87       	std	Y+10, r25	; 0x0a
    201e:	89 87       	std	Y+9, r24	; 0x09
    2020:	3f c0       	rjmp	.+126    	; 0x20a0 <LCD_Write_String+0xf6>
	else if (__tmp > 65535)
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	3f ef       	ldi	r19, 0xFF	; 255
    2026:	4f e7       	ldi	r20, 0x7F	; 127
    2028:	57 e4       	ldi	r21, 0x47	; 71
    202a:	6d 81       	ldd	r22, Y+5	; 0x05
    202c:	7e 81       	ldd	r23, Y+6	; 0x06
    202e:	8f 81       	ldd	r24, Y+7	; 0x07
    2030:	98 85       	ldd	r25, Y+8	; 0x08
    2032:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__gesf2>
    2036:	18 16       	cp	r1, r24
    2038:	4c f5       	brge	.+82     	; 0x208c <LCD_Write_String+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e2       	ldi	r20, 0x20	; 32
    2040:	51 e4       	ldi	r21, 0x41	; 65
    2042:	69 81       	ldd	r22, Y+1	; 0x01
    2044:	7a 81       	ldd	r23, Y+2	; 0x02
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	bc 01       	movw	r22, r24
    2054:	cd 01       	movw	r24, r26
    2056:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	9a 87       	std	Y+10, r25	; 0x0a
    2060:	89 87       	std	Y+9, r24	; 0x09
    2062:	0f c0       	rjmp	.+30     	; 0x2082 <LCD_Write_String+0xd8>
    2064:	80 e9       	ldi	r24, 0x90	; 144
    2066:	91 e0       	ldi	r25, 0x01	; 1
    2068:	9c 87       	std	Y+12, r25	; 0x0c
    206a:	8b 87       	std	Y+11, r24	; 0x0b
    206c:	8b 85       	ldd	r24, Y+11	; 0x0b
    206e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <LCD_Write_String+0xc6>
    2074:	9c 87       	std	Y+12, r25	; 0x0c
    2076:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2078:	89 85       	ldd	r24, Y+9	; 0x09
    207a:	9a 85       	ldd	r25, Y+10	; 0x0a
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	9a 87       	std	Y+10, r25	; 0x0a
    2080:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	89 2b       	or	r24, r25
    2088:	69 f7       	brne	.-38     	; 0x2064 <LCD_Write_String+0xba>
    208a:	14 c0       	rjmp	.+40     	; 0x20b4 <LCD_Write_String+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208c:	6d 81       	ldd	r22, Y+5	; 0x05
    208e:	7e 81       	ldd	r23, Y+6	; 0x06
    2090:	8f 81       	ldd	r24, Y+7	; 0x07
    2092:	98 85       	ldd	r25, Y+8	; 0x08
    2094:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	9a 87       	std	Y+10, r25	; 0x0a
    209e:	89 87       	std	Y+9, r24	; 0x09
    20a0:	89 85       	ldd	r24, Y+9	; 0x09
    20a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a4:	9e 87       	std	Y+14, r25	; 0x0e
    20a6:	8d 87       	std	Y+13, r24	; 0x0d
    20a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <LCD_Write_String+0x102>
    20b0:	9e 87       	std	Y+14, r25	; 0x0e
    20b2:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(2);
		str++;
    20b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b6:	98 89       	ldd	r25, Y+16	; 0x10
    20b8:	01 96       	adiw	r24, 0x01	; 1
    20ba:	98 8b       	std	Y+16, r25	; 0x10
    20bc:	8f 87       	std	Y+15, r24	; 0x0f
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
		_delay_ms(2);
}
void LCD_Write_String(uint8_t* str)
{
	while (*str != '\0')//Termination of any string, NULL character
    20be:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c0:	98 89       	ldd	r25, Y+16	; 0x10
    20c2:	fc 01       	movw	r30, r24
    20c4:	80 81       	ld	r24, Z
    20c6:	88 23       	and	r24, r24
    20c8:	09 f0       	breq	.+2      	; 0x20cc <LCD_Write_String+0x122>
    20ca:	7c cf       	rjmp	.-264    	; 0x1fc4 <LCD_Write_String+0x1a>
	{
		LCD_Write_Character(*str);
		_delay_ms(2);
		str++;
	}
}
    20cc:	60 96       	adiw	r28, 0x10	; 16
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	08 95       	ret

000020de <LCD_Write_Number>:
void LCD_Write_Number(uint32_t number)
{
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	2e 97       	sbiw	r28, 0x0e	; 14
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	6b 87       	std	Y+11, r22	; 0x0b
    20f4:	7c 87       	std	Y+12, r23	; 0x0c
    20f6:	8d 87       	std	Y+13, r24	; 0x0d
    20f8:	9e 87       	std	Y+14, r25	; 0x0e
	char num[10];
	ltoa(number, (uint8_t*)num, 10);  //long to ASCII 
    20fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    20fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    20fe:	ad 85       	ldd	r26, Y+13	; 0x0d
    2100:	be 85       	ldd	r27, Y+14	; 0x0e
    2102:	2a e0       	ldi	r18, 0x0A	; 10
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	ae 01       	movw	r20, r28
    2108:	4f 5f       	subi	r20, 0xFF	; 255
    210a:	5f 4f       	sbci	r21, 0xFF	; 255
    210c:	bc 01       	movw	r22, r24
    210e:	cd 01       	movw	r24, r26
    2110:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <ltoa>
	LCD_Write_String((uint8_t*) num);
    2114:	ce 01       	movw	r24, r28
    2116:	01 96       	adiw	r24, 0x01	; 1
    2118:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_Write_String>
}
    211c:	2e 96       	adiw	r28, 0x0e	; 14
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	08 95       	ret

0000212e <ADC_Initialization>:
*/

#include "ADC_Private.h"

void ADC_Initialization(ADC_Vref vref, ADC_Prescaler prescaler)
{
    212e:	cf 93       	push	r28
    2130:	df 93       	push	r29
    2132:	00 d0       	rcall	.+0      	; 0x2134 <ADC_Initialization+0x6>
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
    2138:	89 83       	std	Y+1, r24	; 0x01
    213a:	6a 83       	std	Y+2, r22	; 0x02
	// Choose voltage reference
	switch(vref)
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	88 2f       	mov	r24, r24
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	81 30       	cpi	r24, 0x01	; 1
    2144:	91 05       	cpc	r25, r1
    2146:	c1 f0       	breq	.+48     	; 0x2178 <ADC_Initialization+0x4a>
    2148:	82 30       	cpi	r24, 0x02	; 2
    214a:	91 05       	cpc	r25, r1
    214c:	41 f1       	breq	.+80     	; 0x219e <ADC_Initialization+0x70>
    214e:	89 2b       	or	r24, r25
    2150:	c9 f5       	brne	.+114    	; 0x21c4 <ADC_Initialization+0x96>
	{
		case AREF:
		clr_bit(ADMUX, REFS1);clr_bit(ADMUX, REFS0);
    2152:	87 e2       	ldi	r24, 0x27	; 39
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	27 e2       	ldi	r18, 0x27	; 39
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	f9 01       	movw	r30, r18
    215c:	20 81       	ld	r18, Z
    215e:	2f 77       	andi	r18, 0x7F	; 127
    2160:	fc 01       	movw	r30, r24
    2162:	20 83       	st	Z, r18
    2164:	87 e2       	ldi	r24, 0x27	; 39
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	27 e2       	ldi	r18, 0x27	; 39
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	f9 01       	movw	r30, r18
    216e:	20 81       	ld	r18, Z
    2170:	2f 7b       	andi	r18, 0xBF	; 191
    2172:	fc 01       	movw	r30, r24
    2174:	20 83       	st	Z, r18
		break;
    2176:	26 c0       	rjmp	.+76     	; 0x21c4 <ADC_Initialization+0x96>
		case AVCC:
		clr_bit(ADMUX, REFS1);set_bit(ADMUX, REFS0);
    2178:	87 e2       	ldi	r24, 0x27	; 39
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	27 e2       	ldi	r18, 0x27	; 39
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	f9 01       	movw	r30, r18
    2182:	20 81       	ld	r18, Z
    2184:	2f 77       	andi	r18, 0x7F	; 127
    2186:	fc 01       	movw	r30, r24
    2188:	20 83       	st	Z, r18
    218a:	87 e2       	ldi	r24, 0x27	; 39
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	27 e2       	ldi	r18, 0x27	; 39
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	f9 01       	movw	r30, r18
    2194:	20 81       	ld	r18, Z
    2196:	20 64       	ori	r18, 0x40	; 64
    2198:	fc 01       	movw	r30, r24
    219a:	20 83       	st	Z, r18
		break;
    219c:	13 c0       	rjmp	.+38     	; 0x21c4 <ADC_Initialization+0x96>
		case INTERNAL:
		set_bit(ADMUX, REFS1);set_bit(ADMUX, REFS0);
    219e:	87 e2       	ldi	r24, 0x27	; 39
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	27 e2       	ldi	r18, 0x27	; 39
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	f9 01       	movw	r30, r18
    21a8:	20 81       	ld	r18, Z
    21aa:	20 68       	ori	r18, 0x80	; 128
    21ac:	fc 01       	movw	r30, r24
    21ae:	20 83       	st	Z, r18
    21b0:	87 e2       	ldi	r24, 0x27	; 39
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	27 e2       	ldi	r18, 0x27	; 39
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	f9 01       	movw	r30, r18
    21ba:	20 81       	ld	r18, Z
    21bc:	20 64       	ori	r18, 0x40	; 64
    21be:	fc 01       	movw	r30, r24
    21c0:	20 83       	st	Z, r18
		break;
    21c2:	00 00       	nop
	}
	// Choose prescaler
	switch (prescaler)
    21c4:	8a 81       	ldd	r24, Y+2	; 0x02
    21c6:	88 2f       	mov	r24, r24
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	09 2e       	mov	r0, r25
    21cc:	00 0c       	add	r0, r0
    21ce:	aa 0b       	sbc	r26, r26
    21d0:	bb 0b       	sbc	r27, r27
    21d2:	40 e0       	ldi	r20, 0x00	; 0
    21d4:	50 e0       	ldi	r21, 0x00	; 0
    21d6:	27 e0       	ldi	r18, 0x07	; 7
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	84 1b       	sub	r24, r20
    21dc:	95 0b       	sbc	r25, r21
    21de:	28 17       	cp	r18, r24
    21e0:	39 07       	cpc	r19, r25
    21e2:	08 f4       	brcc	.+2      	; 0x21e6 <ADC_Initialization+0xb8>
    21e4:	e5 c0       	rjmp	.+458    	; 0x23b0 <ADC_Initialization+0x282>
    21e6:	86 5d       	subi	r24, 0xD6	; 214
    21e8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ea:	fc 01       	movw	r30, r24
    21ec:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__tablejump2__>
	{
		case ADC_PRE1:
		clr_bit(ADCSRA, ADPS2);clr_bit(ADCSRA, ADPS1);clr_bit(ADCSRA, ADPS0);
    21f0:	86 e2       	ldi	r24, 0x26	; 38
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	26 e2       	ldi	r18, 0x26	; 38
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	f9 01       	movw	r30, r18
    21fa:	20 81       	ld	r18, Z
    21fc:	2b 7f       	andi	r18, 0xFB	; 251
    21fe:	fc 01       	movw	r30, r24
    2200:	20 83       	st	Z, r18
    2202:	86 e2       	ldi	r24, 0x26	; 38
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	26 e2       	ldi	r18, 0x26	; 38
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	f9 01       	movw	r30, r18
    220c:	20 81       	ld	r18, Z
    220e:	2d 7f       	andi	r18, 0xFD	; 253
    2210:	fc 01       	movw	r30, r24
    2212:	20 83       	st	Z, r18
    2214:	86 e2       	ldi	r24, 0x26	; 38
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	26 e2       	ldi	r18, 0x26	; 38
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	f9 01       	movw	r30, r18
    221e:	20 81       	ld	r18, Z
    2220:	2e 7f       	andi	r18, 0xFE	; 254
    2222:	fc 01       	movw	r30, r24
    2224:	20 83       	st	Z, r18
		break;
    2226:	c4 c0       	rjmp	.+392    	; 0x23b0 <ADC_Initialization+0x282>
		case ADC_PRE2:
		clr_bit(ADCSRA, ADPS2);clr_bit(ADCSRA, ADPS1);set_bit(ADCSRA, ADPS0);
    2228:	86 e2       	ldi	r24, 0x26	; 38
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	26 e2       	ldi	r18, 0x26	; 38
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	f9 01       	movw	r30, r18
    2232:	20 81       	ld	r18, Z
    2234:	2b 7f       	andi	r18, 0xFB	; 251
    2236:	fc 01       	movw	r30, r24
    2238:	20 83       	st	Z, r18
    223a:	86 e2       	ldi	r24, 0x26	; 38
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	26 e2       	ldi	r18, 0x26	; 38
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	f9 01       	movw	r30, r18
    2244:	20 81       	ld	r18, Z
    2246:	2d 7f       	andi	r18, 0xFD	; 253
    2248:	fc 01       	movw	r30, r24
    224a:	20 83       	st	Z, r18
    224c:	86 e2       	ldi	r24, 0x26	; 38
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	26 e2       	ldi	r18, 0x26	; 38
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	f9 01       	movw	r30, r18
    2256:	20 81       	ld	r18, Z
    2258:	21 60       	ori	r18, 0x01	; 1
    225a:	fc 01       	movw	r30, r24
    225c:	20 83       	st	Z, r18
		break;
    225e:	a8 c0       	rjmp	.+336    	; 0x23b0 <ADC_Initialization+0x282>
		case ADC_PRE4:
		clr_bit(ADCSRA, ADPS2);set_bit(ADCSRA, ADPS1);clr_bit(ADCSRA, ADPS0);
    2260:	86 e2       	ldi	r24, 0x26	; 38
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	26 e2       	ldi	r18, 0x26	; 38
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	f9 01       	movw	r30, r18
    226a:	20 81       	ld	r18, Z
    226c:	2b 7f       	andi	r18, 0xFB	; 251
    226e:	fc 01       	movw	r30, r24
    2270:	20 83       	st	Z, r18
    2272:	86 e2       	ldi	r24, 0x26	; 38
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	26 e2       	ldi	r18, 0x26	; 38
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	f9 01       	movw	r30, r18
    227c:	20 81       	ld	r18, Z
    227e:	22 60       	ori	r18, 0x02	; 2
    2280:	fc 01       	movw	r30, r24
    2282:	20 83       	st	Z, r18
    2284:	86 e2       	ldi	r24, 0x26	; 38
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	26 e2       	ldi	r18, 0x26	; 38
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	f9 01       	movw	r30, r18
    228e:	20 81       	ld	r18, Z
    2290:	2e 7f       	andi	r18, 0xFE	; 254
    2292:	fc 01       	movw	r30, r24
    2294:	20 83       	st	Z, r18
		break;
    2296:	8c c0       	rjmp	.+280    	; 0x23b0 <ADC_Initialization+0x282>
		case ADC_PRE8:
		clr_bit(ADCSRA, ADPS2);set_bit(ADCSRA, ADPS1);set_bit(ADCSRA, ADPS0);
    2298:	86 e2       	ldi	r24, 0x26	; 38
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	26 e2       	ldi	r18, 0x26	; 38
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	f9 01       	movw	r30, r18
    22a2:	20 81       	ld	r18, Z
    22a4:	2b 7f       	andi	r18, 0xFB	; 251
    22a6:	fc 01       	movw	r30, r24
    22a8:	20 83       	st	Z, r18
    22aa:	86 e2       	ldi	r24, 0x26	; 38
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	26 e2       	ldi	r18, 0x26	; 38
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	f9 01       	movw	r30, r18
    22b4:	20 81       	ld	r18, Z
    22b6:	22 60       	ori	r18, 0x02	; 2
    22b8:	fc 01       	movw	r30, r24
    22ba:	20 83       	st	Z, r18
    22bc:	86 e2       	ldi	r24, 0x26	; 38
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	26 e2       	ldi	r18, 0x26	; 38
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	f9 01       	movw	r30, r18
    22c6:	20 81       	ld	r18, Z
    22c8:	21 60       	ori	r18, 0x01	; 1
    22ca:	fc 01       	movw	r30, r24
    22cc:	20 83       	st	Z, r18
		break;
    22ce:	70 c0       	rjmp	.+224    	; 0x23b0 <ADC_Initialization+0x282>
		case ADC_PRE16:
		set_bit(ADCSRA, ADPS2);clr_bit(ADCSRA, ADPS1);clr_bit(ADCSRA, ADPS0);
    22d0:	86 e2       	ldi	r24, 0x26	; 38
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	26 e2       	ldi	r18, 0x26	; 38
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	f9 01       	movw	r30, r18
    22da:	20 81       	ld	r18, Z
    22dc:	24 60       	ori	r18, 0x04	; 4
    22de:	fc 01       	movw	r30, r24
    22e0:	20 83       	st	Z, r18
    22e2:	86 e2       	ldi	r24, 0x26	; 38
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	26 e2       	ldi	r18, 0x26	; 38
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	f9 01       	movw	r30, r18
    22ec:	20 81       	ld	r18, Z
    22ee:	2d 7f       	andi	r18, 0xFD	; 253
    22f0:	fc 01       	movw	r30, r24
    22f2:	20 83       	st	Z, r18
    22f4:	86 e2       	ldi	r24, 0x26	; 38
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	26 e2       	ldi	r18, 0x26	; 38
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	f9 01       	movw	r30, r18
    22fe:	20 81       	ld	r18, Z
    2300:	2e 7f       	andi	r18, 0xFE	; 254
    2302:	fc 01       	movw	r30, r24
    2304:	20 83       	st	Z, r18
		break;
    2306:	54 c0       	rjmp	.+168    	; 0x23b0 <ADC_Initialization+0x282>
		case ADC_PRE32:
		set_bit(ADCSRA, ADPS2);clr_bit(ADCSRA, ADPS1);set_bit(ADCSRA, ADPS0);
    2308:	86 e2       	ldi	r24, 0x26	; 38
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	26 e2       	ldi	r18, 0x26	; 38
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	f9 01       	movw	r30, r18
    2312:	20 81       	ld	r18, Z
    2314:	24 60       	ori	r18, 0x04	; 4
    2316:	fc 01       	movw	r30, r24
    2318:	20 83       	st	Z, r18
    231a:	86 e2       	ldi	r24, 0x26	; 38
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	26 e2       	ldi	r18, 0x26	; 38
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	f9 01       	movw	r30, r18
    2324:	20 81       	ld	r18, Z
    2326:	2d 7f       	andi	r18, 0xFD	; 253
    2328:	fc 01       	movw	r30, r24
    232a:	20 83       	st	Z, r18
    232c:	86 e2       	ldi	r24, 0x26	; 38
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	26 e2       	ldi	r18, 0x26	; 38
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	f9 01       	movw	r30, r18
    2336:	20 81       	ld	r18, Z
    2338:	21 60       	ori	r18, 0x01	; 1
    233a:	fc 01       	movw	r30, r24
    233c:	20 83       	st	Z, r18
		break;
    233e:	38 c0       	rjmp	.+112    	; 0x23b0 <ADC_Initialization+0x282>
		case ADC_PRE64:
		set_bit(ADCSRA, ADPS2);set_bit(ADCSRA, ADPS1);clr_bit(ADCSRA, ADPS0);
    2340:	86 e2       	ldi	r24, 0x26	; 38
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	26 e2       	ldi	r18, 0x26	; 38
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	f9 01       	movw	r30, r18
    234a:	20 81       	ld	r18, Z
    234c:	24 60       	ori	r18, 0x04	; 4
    234e:	fc 01       	movw	r30, r24
    2350:	20 83       	st	Z, r18
    2352:	86 e2       	ldi	r24, 0x26	; 38
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	26 e2       	ldi	r18, 0x26	; 38
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	f9 01       	movw	r30, r18
    235c:	20 81       	ld	r18, Z
    235e:	22 60       	ori	r18, 0x02	; 2
    2360:	fc 01       	movw	r30, r24
    2362:	20 83       	st	Z, r18
    2364:	86 e2       	ldi	r24, 0x26	; 38
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	26 e2       	ldi	r18, 0x26	; 38
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	f9 01       	movw	r30, r18
    236e:	20 81       	ld	r18, Z
    2370:	2e 7f       	andi	r18, 0xFE	; 254
    2372:	fc 01       	movw	r30, r24
    2374:	20 83       	st	Z, r18
		break;
    2376:	1c c0       	rjmp	.+56     	; 0x23b0 <ADC_Initialization+0x282>
		case ADC_PRE128:
		set_bit(ADCSRA, ADPS2);set_bit(ADCSRA, ADPS1);set_bit(ADCSRA, ADPS0);
    2378:	86 e2       	ldi	r24, 0x26	; 38
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	26 e2       	ldi	r18, 0x26	; 38
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	f9 01       	movw	r30, r18
    2382:	20 81       	ld	r18, Z
    2384:	24 60       	ori	r18, 0x04	; 4
    2386:	fc 01       	movw	r30, r24
    2388:	20 83       	st	Z, r18
    238a:	86 e2       	ldi	r24, 0x26	; 38
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	26 e2       	ldi	r18, 0x26	; 38
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	f9 01       	movw	r30, r18
    2394:	20 81       	ld	r18, Z
    2396:	22 60       	ori	r18, 0x02	; 2
    2398:	fc 01       	movw	r30, r24
    239a:	20 83       	st	Z, r18
    239c:	86 e2       	ldi	r24, 0x26	; 38
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	26 e2       	ldi	r18, 0x26	; 38
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	f9 01       	movw	r30, r18
    23a6:	20 81       	ld	r18, Z
    23a8:	21 60       	ori	r18, 0x01	; 1
    23aa:	fc 01       	movw	r30, r24
    23ac:	20 83       	st	Z, r18
		break;
    23ae:	00 00       	nop
	}
	// ADC Enable
	set_bit(ADCSRA, ADEN);
    23b0:	86 e2       	ldi	r24, 0x26	; 38
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	26 e2       	ldi	r18, 0x26	; 38
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	f9 01       	movw	r30, r18
    23ba:	20 81       	ld	r18, Z
    23bc:	20 68       	ori	r18, 0x80	; 128
    23be:	fc 01       	movw	r30, r24
    23c0:	20 83       	st	Z, r18
	// ADC interrupt disable
	clr_bit(ADCSRA, ADIE);
    23c2:	86 e2       	ldi	r24, 0x26	; 38
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	26 e2       	ldi	r18, 0x26	; 38
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	f9 01       	movw	r30, r18
    23cc:	20 81       	ld	r18, Z
    23ce:	27 7f       	andi	r18, 0xF7	; 247
    23d0:	fc 01       	movw	r30, r24
    23d2:	20 83       	st	Z, r18
	// ADC auto trigger enable
	set_bit(ADCSRA, ADATE);
    23d4:	86 e2       	ldi	r24, 0x26	; 38
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	26 e2       	ldi	r18, 0x26	; 38
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	f9 01       	movw	r30, r18
    23de:	20 81       	ld	r18, Z
    23e0:	20 62       	ori	r18, 0x20	; 32
    23e2:	fc 01       	movw	r30, r24
    23e4:	20 83       	st	Z, r18
	// ADC Right adjust
	clr_bit(ADMUX, ADLAR);
    23e6:	87 e2       	ldi	r24, 0x27	; 39
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	27 e2       	ldi	r18, 0x27	; 39
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	f9 01       	movw	r30, r18
    23f0:	20 81       	ld	r18, Z
    23f2:	2f 7d       	andi	r18, 0xDF	; 223
    23f4:	fc 01       	movw	r30, r24
    23f6:	20 83       	st	Z, r18
}
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	08 95       	ret

00002402 <ADC_Read>:
Uint16_t ADC_Read(ADC_Channel channel)
{
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	00 d0       	rcall	.+0      	; 0x2408 <ADC_Read+0x6>
    2408:	1f 92       	push	r1
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t reading = 0;
    2410:	1a 82       	std	Y+2, r1	; 0x02
    2412:	19 82       	std	Y+1, r1	; 0x01
	// Choose channel
	switch (channel)
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	88 2f       	mov	r24, r24
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	09 2e       	mov	r0, r25
    241c:	00 0c       	add	r0, r0
    241e:	aa 0b       	sbc	r26, r26
    2420:	bb 0b       	sbc	r27, r27
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	27 e0       	ldi	r18, 0x07	; 7
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	84 1b       	sub	r24, r20
    242c:	95 0b       	sbc	r25, r21
    242e:	28 17       	cp	r18, r24
    2430:	39 07       	cpc	r19, r25
    2432:	08 f4       	brcc	.+2      	; 0x2436 <ADC_Read+0x34>
    2434:	75 c1       	rjmp	.+746    	; 0x2720 <ADC_Read+0x31e>
    2436:	8e 5c       	subi	r24, 0xCE	; 206
    2438:	9f 4f       	sbci	r25, 0xFF	; 255
    243a:	fc 01       	movw	r30, r24
    243c:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__tablejump2__>
	{
		case ADC_CH0:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);clr_bit(ADMUX, MUX2);clr_bit(ADMUX, MUX1);clr_bit(ADMUX, MUX0);// 0 0 0 0 0
    2440:	87 e2       	ldi	r24, 0x27	; 39
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	27 e2       	ldi	r18, 0x27	; 39
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	f9 01       	movw	r30, r18
    244a:	20 81       	ld	r18, Z
    244c:	2f 7e       	andi	r18, 0xEF	; 239
    244e:	fc 01       	movw	r30, r24
    2450:	20 83       	st	Z, r18
    2452:	87 e2       	ldi	r24, 0x27	; 39
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	27 e2       	ldi	r18, 0x27	; 39
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	f9 01       	movw	r30, r18
    245c:	20 81       	ld	r18, Z
    245e:	27 7f       	andi	r18, 0xF7	; 247
    2460:	fc 01       	movw	r30, r24
    2462:	20 83       	st	Z, r18
    2464:	87 e2       	ldi	r24, 0x27	; 39
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	27 e2       	ldi	r18, 0x27	; 39
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	f9 01       	movw	r30, r18
    246e:	20 81       	ld	r18, Z
    2470:	2b 7f       	andi	r18, 0xFB	; 251
    2472:	fc 01       	movw	r30, r24
    2474:	20 83       	st	Z, r18
    2476:	87 e2       	ldi	r24, 0x27	; 39
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	27 e2       	ldi	r18, 0x27	; 39
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	f9 01       	movw	r30, r18
    2480:	20 81       	ld	r18, Z
    2482:	2d 7f       	andi	r18, 0xFD	; 253
    2484:	fc 01       	movw	r30, r24
    2486:	20 83       	st	Z, r18
    2488:	87 e2       	ldi	r24, 0x27	; 39
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	27 e2       	ldi	r18, 0x27	; 39
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	f9 01       	movw	r30, r18
    2492:	20 81       	ld	r18, Z
    2494:	2e 7f       	andi	r18, 0xFE	; 254
    2496:	fc 01       	movw	r30, r24
    2498:	20 83       	st	Z, r18
		break;
    249a:	42 c1       	rjmp	.+644    	; 0x2720 <ADC_Read+0x31e>
		case ADC_CH1:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);clr_bit(ADMUX, MUX2);clr_bit(ADMUX, MUX1);set_bit(ADMUX, MUX0);// 0 0 0 0 1
    249c:	87 e2       	ldi	r24, 0x27	; 39
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	27 e2       	ldi	r18, 0x27	; 39
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	f9 01       	movw	r30, r18
    24a6:	20 81       	ld	r18, Z
    24a8:	2f 7e       	andi	r18, 0xEF	; 239
    24aa:	fc 01       	movw	r30, r24
    24ac:	20 83       	st	Z, r18
    24ae:	87 e2       	ldi	r24, 0x27	; 39
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	27 e2       	ldi	r18, 0x27	; 39
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	f9 01       	movw	r30, r18
    24b8:	20 81       	ld	r18, Z
    24ba:	27 7f       	andi	r18, 0xF7	; 247
    24bc:	fc 01       	movw	r30, r24
    24be:	20 83       	st	Z, r18
    24c0:	87 e2       	ldi	r24, 0x27	; 39
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	27 e2       	ldi	r18, 0x27	; 39
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	f9 01       	movw	r30, r18
    24ca:	20 81       	ld	r18, Z
    24cc:	2b 7f       	andi	r18, 0xFB	; 251
    24ce:	fc 01       	movw	r30, r24
    24d0:	20 83       	st	Z, r18
    24d2:	87 e2       	ldi	r24, 0x27	; 39
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	27 e2       	ldi	r18, 0x27	; 39
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	f9 01       	movw	r30, r18
    24dc:	20 81       	ld	r18, Z
    24de:	2d 7f       	andi	r18, 0xFD	; 253
    24e0:	fc 01       	movw	r30, r24
    24e2:	20 83       	st	Z, r18
    24e4:	87 e2       	ldi	r24, 0x27	; 39
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	27 e2       	ldi	r18, 0x27	; 39
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	f9 01       	movw	r30, r18
    24ee:	20 81       	ld	r18, Z
    24f0:	21 60       	ori	r18, 0x01	; 1
    24f2:	fc 01       	movw	r30, r24
    24f4:	20 83       	st	Z, r18
		break;
    24f6:	14 c1       	rjmp	.+552    	; 0x2720 <ADC_Read+0x31e>
		case ADC_CH2:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);clr_bit(ADMUX, MUX2);set_bit(ADMUX, MUX1);clr_bit(ADMUX, MUX0);// 0 0 0 1 0
    24f8:	87 e2       	ldi	r24, 0x27	; 39
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	27 e2       	ldi	r18, 0x27	; 39
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	f9 01       	movw	r30, r18
    2502:	20 81       	ld	r18, Z
    2504:	2f 7e       	andi	r18, 0xEF	; 239
    2506:	fc 01       	movw	r30, r24
    2508:	20 83       	st	Z, r18
    250a:	87 e2       	ldi	r24, 0x27	; 39
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	27 e2       	ldi	r18, 0x27	; 39
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	f9 01       	movw	r30, r18
    2514:	20 81       	ld	r18, Z
    2516:	27 7f       	andi	r18, 0xF7	; 247
    2518:	fc 01       	movw	r30, r24
    251a:	20 83       	st	Z, r18
    251c:	87 e2       	ldi	r24, 0x27	; 39
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	27 e2       	ldi	r18, 0x27	; 39
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	f9 01       	movw	r30, r18
    2526:	20 81       	ld	r18, Z
    2528:	2b 7f       	andi	r18, 0xFB	; 251
    252a:	fc 01       	movw	r30, r24
    252c:	20 83       	st	Z, r18
    252e:	87 e2       	ldi	r24, 0x27	; 39
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	27 e2       	ldi	r18, 0x27	; 39
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	f9 01       	movw	r30, r18
    2538:	20 81       	ld	r18, Z
    253a:	22 60       	ori	r18, 0x02	; 2
    253c:	fc 01       	movw	r30, r24
    253e:	20 83       	st	Z, r18
    2540:	87 e2       	ldi	r24, 0x27	; 39
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	27 e2       	ldi	r18, 0x27	; 39
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	f9 01       	movw	r30, r18
    254a:	20 81       	ld	r18, Z
    254c:	2e 7f       	andi	r18, 0xFE	; 254
    254e:	fc 01       	movw	r30, r24
    2550:	20 83       	st	Z, r18
		break;
    2552:	e6 c0       	rjmp	.+460    	; 0x2720 <ADC_Read+0x31e>
		case ADC_CH3:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);clr_bit(ADMUX, MUX2);set_bit(ADMUX, MUX1);set_bit(ADMUX, MUX0);// 0 0 0 1 1
    2554:	87 e2       	ldi	r24, 0x27	; 39
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	27 e2       	ldi	r18, 0x27	; 39
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	f9 01       	movw	r30, r18
    255e:	20 81       	ld	r18, Z
    2560:	2f 7e       	andi	r18, 0xEF	; 239
    2562:	fc 01       	movw	r30, r24
    2564:	20 83       	st	Z, r18
    2566:	87 e2       	ldi	r24, 0x27	; 39
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	27 e2       	ldi	r18, 0x27	; 39
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	f9 01       	movw	r30, r18
    2570:	20 81       	ld	r18, Z
    2572:	27 7f       	andi	r18, 0xF7	; 247
    2574:	fc 01       	movw	r30, r24
    2576:	20 83       	st	Z, r18
    2578:	87 e2       	ldi	r24, 0x27	; 39
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	27 e2       	ldi	r18, 0x27	; 39
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	f9 01       	movw	r30, r18
    2582:	20 81       	ld	r18, Z
    2584:	2b 7f       	andi	r18, 0xFB	; 251
    2586:	fc 01       	movw	r30, r24
    2588:	20 83       	st	Z, r18
    258a:	87 e2       	ldi	r24, 0x27	; 39
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	27 e2       	ldi	r18, 0x27	; 39
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	f9 01       	movw	r30, r18
    2594:	20 81       	ld	r18, Z
    2596:	22 60       	ori	r18, 0x02	; 2
    2598:	fc 01       	movw	r30, r24
    259a:	20 83       	st	Z, r18
    259c:	87 e2       	ldi	r24, 0x27	; 39
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	27 e2       	ldi	r18, 0x27	; 39
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	f9 01       	movw	r30, r18
    25a6:	20 81       	ld	r18, Z
    25a8:	21 60       	ori	r18, 0x01	; 1
    25aa:	fc 01       	movw	r30, r24
    25ac:	20 83       	st	Z, r18
		break;
    25ae:	b8 c0       	rjmp	.+368    	; 0x2720 <ADC_Read+0x31e>
		case ADC_CH4:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);set_bit(ADMUX, MUX2);clr_bit(ADMUX, MUX1);clr_bit(ADMUX, MUX0);// 0 0 1 0 0
    25b0:	87 e2       	ldi	r24, 0x27	; 39
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	27 e2       	ldi	r18, 0x27	; 39
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	f9 01       	movw	r30, r18
    25ba:	20 81       	ld	r18, Z
    25bc:	2f 7e       	andi	r18, 0xEF	; 239
    25be:	fc 01       	movw	r30, r24
    25c0:	20 83       	st	Z, r18
    25c2:	87 e2       	ldi	r24, 0x27	; 39
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	27 e2       	ldi	r18, 0x27	; 39
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	f9 01       	movw	r30, r18
    25cc:	20 81       	ld	r18, Z
    25ce:	27 7f       	andi	r18, 0xF7	; 247
    25d0:	fc 01       	movw	r30, r24
    25d2:	20 83       	st	Z, r18
    25d4:	87 e2       	ldi	r24, 0x27	; 39
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	27 e2       	ldi	r18, 0x27	; 39
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	f9 01       	movw	r30, r18
    25de:	20 81       	ld	r18, Z
    25e0:	24 60       	ori	r18, 0x04	; 4
    25e2:	fc 01       	movw	r30, r24
    25e4:	20 83       	st	Z, r18
    25e6:	87 e2       	ldi	r24, 0x27	; 39
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	27 e2       	ldi	r18, 0x27	; 39
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	f9 01       	movw	r30, r18
    25f0:	20 81       	ld	r18, Z
    25f2:	2d 7f       	andi	r18, 0xFD	; 253
    25f4:	fc 01       	movw	r30, r24
    25f6:	20 83       	st	Z, r18
    25f8:	87 e2       	ldi	r24, 0x27	; 39
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	27 e2       	ldi	r18, 0x27	; 39
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	f9 01       	movw	r30, r18
    2602:	20 81       	ld	r18, Z
    2604:	2e 7f       	andi	r18, 0xFE	; 254
    2606:	fc 01       	movw	r30, r24
    2608:	20 83       	st	Z, r18
		break;
    260a:	8a c0       	rjmp	.+276    	; 0x2720 <ADC_Read+0x31e>
		case ADC_CH5:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);set_bit(ADMUX, MUX2);clr_bit(ADMUX, MUX1);set_bit(ADMUX, MUX0);// 0 0 1 0 1
    260c:	87 e2       	ldi	r24, 0x27	; 39
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	27 e2       	ldi	r18, 0x27	; 39
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	f9 01       	movw	r30, r18
    2616:	20 81       	ld	r18, Z
    2618:	2f 7e       	andi	r18, 0xEF	; 239
    261a:	fc 01       	movw	r30, r24
    261c:	20 83       	st	Z, r18
    261e:	87 e2       	ldi	r24, 0x27	; 39
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	27 e2       	ldi	r18, 0x27	; 39
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	f9 01       	movw	r30, r18
    2628:	20 81       	ld	r18, Z
    262a:	27 7f       	andi	r18, 0xF7	; 247
    262c:	fc 01       	movw	r30, r24
    262e:	20 83       	st	Z, r18
    2630:	87 e2       	ldi	r24, 0x27	; 39
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	27 e2       	ldi	r18, 0x27	; 39
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	f9 01       	movw	r30, r18
    263a:	20 81       	ld	r18, Z
    263c:	24 60       	ori	r18, 0x04	; 4
    263e:	fc 01       	movw	r30, r24
    2640:	20 83       	st	Z, r18
    2642:	87 e2       	ldi	r24, 0x27	; 39
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	27 e2       	ldi	r18, 0x27	; 39
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	f9 01       	movw	r30, r18
    264c:	20 81       	ld	r18, Z
    264e:	2d 7f       	andi	r18, 0xFD	; 253
    2650:	fc 01       	movw	r30, r24
    2652:	20 83       	st	Z, r18
    2654:	87 e2       	ldi	r24, 0x27	; 39
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	27 e2       	ldi	r18, 0x27	; 39
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	f9 01       	movw	r30, r18
    265e:	20 81       	ld	r18, Z
    2660:	21 60       	ori	r18, 0x01	; 1
    2662:	fc 01       	movw	r30, r24
    2664:	20 83       	st	Z, r18
		break;
    2666:	5c c0       	rjmp	.+184    	; 0x2720 <ADC_Read+0x31e>
		case ADC_CH6:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);set_bit(ADMUX, MUX2);set_bit(ADMUX, MUX1);clr_bit(ADMUX, MUX0);// 0 0 1 1 0
    2668:	87 e2       	ldi	r24, 0x27	; 39
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	27 e2       	ldi	r18, 0x27	; 39
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	f9 01       	movw	r30, r18
    2672:	20 81       	ld	r18, Z
    2674:	2f 7e       	andi	r18, 0xEF	; 239
    2676:	fc 01       	movw	r30, r24
    2678:	20 83       	st	Z, r18
    267a:	87 e2       	ldi	r24, 0x27	; 39
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	27 e2       	ldi	r18, 0x27	; 39
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	f9 01       	movw	r30, r18
    2684:	20 81       	ld	r18, Z
    2686:	27 7f       	andi	r18, 0xF7	; 247
    2688:	fc 01       	movw	r30, r24
    268a:	20 83       	st	Z, r18
    268c:	87 e2       	ldi	r24, 0x27	; 39
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	27 e2       	ldi	r18, 0x27	; 39
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	f9 01       	movw	r30, r18
    2696:	20 81       	ld	r18, Z
    2698:	24 60       	ori	r18, 0x04	; 4
    269a:	fc 01       	movw	r30, r24
    269c:	20 83       	st	Z, r18
    269e:	87 e2       	ldi	r24, 0x27	; 39
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	27 e2       	ldi	r18, 0x27	; 39
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	f9 01       	movw	r30, r18
    26a8:	20 81       	ld	r18, Z
    26aa:	22 60       	ori	r18, 0x02	; 2
    26ac:	fc 01       	movw	r30, r24
    26ae:	20 83       	st	Z, r18
    26b0:	87 e2       	ldi	r24, 0x27	; 39
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	27 e2       	ldi	r18, 0x27	; 39
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	f9 01       	movw	r30, r18
    26ba:	20 81       	ld	r18, Z
    26bc:	2e 7f       	andi	r18, 0xFE	; 254
    26be:	fc 01       	movw	r30, r24
    26c0:	20 83       	st	Z, r18
		break;
    26c2:	2e c0       	rjmp	.+92     	; 0x2720 <ADC_Read+0x31e>
		case ADC_CH7:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);set_bit(ADMUX, MUX2);set_bit(ADMUX, MUX1);set_bit(ADMUX, MUX0);// 0 0 1 1 1
    26c4:	87 e2       	ldi	r24, 0x27	; 39
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	27 e2       	ldi	r18, 0x27	; 39
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	f9 01       	movw	r30, r18
    26ce:	20 81       	ld	r18, Z
    26d0:	2f 7e       	andi	r18, 0xEF	; 239
    26d2:	fc 01       	movw	r30, r24
    26d4:	20 83       	st	Z, r18
    26d6:	87 e2       	ldi	r24, 0x27	; 39
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	27 e2       	ldi	r18, 0x27	; 39
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	f9 01       	movw	r30, r18
    26e0:	20 81       	ld	r18, Z
    26e2:	27 7f       	andi	r18, 0xF7	; 247
    26e4:	fc 01       	movw	r30, r24
    26e6:	20 83       	st	Z, r18
    26e8:	87 e2       	ldi	r24, 0x27	; 39
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	27 e2       	ldi	r18, 0x27	; 39
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	f9 01       	movw	r30, r18
    26f2:	20 81       	ld	r18, Z
    26f4:	24 60       	ori	r18, 0x04	; 4
    26f6:	fc 01       	movw	r30, r24
    26f8:	20 83       	st	Z, r18
    26fa:	87 e2       	ldi	r24, 0x27	; 39
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	27 e2       	ldi	r18, 0x27	; 39
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	f9 01       	movw	r30, r18
    2704:	20 81       	ld	r18, Z
    2706:	22 60       	ori	r18, 0x02	; 2
    2708:	fc 01       	movw	r30, r24
    270a:	20 83       	st	Z, r18
    270c:	87 e2       	ldi	r24, 0x27	; 39
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	27 e2       	ldi	r18, 0x27	; 39
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	f9 01       	movw	r30, r18
    2716:	20 81       	ld	r18, Z
    2718:	21 60       	ori	r18, 0x01	; 1
    271a:	fc 01       	movw	r30, r24
    271c:	20 83       	st	Z, r18
		break;
    271e:	00 00       	nop
	}
	// ADC Start conversion 
	set_bit(ADCSRA, ADSC);
    2720:	86 e2       	ldi	r24, 0x26	; 38
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	26 e2       	ldi	r18, 0x26	; 38
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	f9 01       	movw	r30, r18
    272a:	20 81       	ld	r18, Z
    272c:	20 64       	ori	r18, 0x40	; 64
    272e:	fc 01       	movw	r30, r24
    2730:	20 83       	st	Z, r18
	// wait until conversion finish
	while (get_bit(ADCSRA, ADIF) == 1)
    2732:	00 00       	nop
    2734:	86 e2       	ldi	r24, 0x26	; 38
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	fc 01       	movw	r30, r24
    273a:	80 81       	ld	r24, Z
    273c:	82 95       	swap	r24
    273e:	8f 70       	andi	r24, 0x0F	; 15
    2740:	88 2f       	mov	r24, r24
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	81 70       	andi	r24, 0x01	; 1
    2746:	99 27       	eor	r25, r25
    2748:	89 2b       	or	r24, r25
    274a:	a1 f7       	brne	.-24     	; 0x2734 <ADC_Read+0x332>
	{
		
	}
	reading = ADC_DT;
    274c:	84 e2       	ldi	r24, 0x24	; 36
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	fc 01       	movw	r30, r24
    2752:	80 81       	ld	r24, Z
    2754:	91 81       	ldd	r25, Z+1	; 0x01
    2756:	9a 83       	std	Y+2, r25	; 0x02
    2758:	89 83       	std	Y+1, r24	; 0x01
	
	
	return reading;
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	9a 81       	ldd	r25, Y+2	; 0x02
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	df 91       	pop	r29
    2766:	cf 91       	pop	r28
    2768:	08 95       	ret

0000276a <DIO_SetPin_Direction>:
*/

#include "DIO_Private.h"

void DIO_SetPin_Direction(DIO_PORT PORT, DIO_PIN PIN, DIO_STATE STATE)
{
    276a:	cf 93       	push	r28
    276c:	df 93       	push	r29
    276e:	00 d0       	rcall	.+0      	; 0x2770 <DIO_SetPin_Direction+0x6>
    2770:	1f 92       	push	r1
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
    2776:	89 83       	std	Y+1, r24	; 0x01
    2778:	6a 83       	std	Y+2, r22	; 0x02
    277a:	4b 83       	std	Y+3, r20	; 0x03
	switch(STATE)
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	88 2f       	mov	r24, r24
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	00 97       	sbiw	r24, 0x00	; 0
    2784:	09 f4       	brne	.+2      	; 0x2788 <DIO_SetPin_Direction+0x1e>
    2786:	6b c0       	rjmp	.+214    	; 0x285e <DIO_SetPin_Direction+0xf4>
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	09 f0       	breq	.+2      	; 0x278e <DIO_SetPin_Direction+0x24>
    278c:	d3 c0       	rjmp	.+422    	; 0x2934 <DIO_SetPin_Direction+0x1ca>
	{
		case DIO_OUTPUT:
		switch(PORT)
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	88 2f       	mov	r24, r24
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	81 30       	cpi	r24, 0x01	; 1
    2796:	91 05       	cpc	r25, r1
    2798:	11 f1       	breq	.+68     	; 0x27de <DIO_SetPin_Direction+0x74>
    279a:	82 30       	cpi	r24, 0x02	; 2
    279c:	91 05       	cpc	r25, r1
    279e:	1c f4       	brge	.+6      	; 0x27a6 <DIO_SetPin_Direction+0x3c>
    27a0:	89 2b       	or	r24, r25
    27a2:	41 f0       	breq	.+16     	; 0x27b4 <DIO_SetPin_Direction+0x4a>
			break;
			case DIO_PORTD:
			set_bit(DDRD, PIN);
			break;
		}
		break;
    27a4:	c7 c0       	rjmp	.+398    	; 0x2934 <DIO_SetPin_Direction+0x1ca>
void DIO_SetPin_Direction(DIO_PORT PORT, DIO_PIN PIN, DIO_STATE STATE)
{
	switch(STATE)
	{
		case DIO_OUTPUT:
		switch(PORT)
    27a6:	82 30       	cpi	r24, 0x02	; 2
    27a8:	91 05       	cpc	r25, r1
    27aa:	71 f1       	breq	.+92     	; 0x2808 <DIO_SetPin_Direction+0x9e>
    27ac:	03 97       	sbiw	r24, 0x03	; 3
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <DIO_SetPin_Direction+0x48>
    27b0:	40 c0       	rjmp	.+128    	; 0x2832 <DIO_SetPin_Direction+0xc8>
			break;
			case DIO_PORTD:
			set_bit(DDRD, PIN);
			break;
		}
		break;
    27b2:	c0 c0       	rjmp	.+384    	; 0x2934 <DIO_SetPin_Direction+0x1ca>
	{
		case DIO_OUTPUT:
		switch(PORT)
		{
			case DIO_PORTA:
			set_bit(DDRA, PIN);
    27b4:	8a e3       	ldi	r24, 0x3A	; 58
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	2a e3       	ldi	r18, 0x3A	; 58
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	f9 01       	movw	r30, r18
    27be:	20 81       	ld	r18, Z
    27c0:	62 2f       	mov	r22, r18
    27c2:	2a 81       	ldd	r18, Y+2	; 0x02
    27c4:	42 2f       	mov	r20, r18
    27c6:	50 e0       	ldi	r21, 0x00	; 0
    27c8:	21 e0       	ldi	r18, 0x01	; 1
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <DIO_SetPin_Direction+0x68>
    27ce:	22 0f       	add	r18, r18
    27d0:	33 1f       	adc	r19, r19
    27d2:	4a 95       	dec	r20
    27d4:	e2 f7       	brpl	.-8      	; 0x27ce <DIO_SetPin_Direction+0x64>
    27d6:	26 2b       	or	r18, r22
    27d8:	fc 01       	movw	r30, r24
    27da:	20 83       	st	Z, r18
			break;
    27dc:	3f c0       	rjmp	.+126    	; 0x285c <DIO_SetPin_Direction+0xf2>
			case DIO_PORTB:
			set_bit(DDRB, PIN);
    27de:	87 e3       	ldi	r24, 0x37	; 55
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	27 e3       	ldi	r18, 0x37	; 55
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	f9 01       	movw	r30, r18
    27e8:	20 81       	ld	r18, Z
    27ea:	62 2f       	mov	r22, r18
    27ec:	2a 81       	ldd	r18, Y+2	; 0x02
    27ee:	42 2f       	mov	r20, r18
    27f0:	50 e0       	ldi	r21, 0x00	; 0
    27f2:	21 e0       	ldi	r18, 0x01	; 1
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <DIO_SetPin_Direction+0x92>
    27f8:	22 0f       	add	r18, r18
    27fa:	33 1f       	adc	r19, r19
    27fc:	4a 95       	dec	r20
    27fe:	e2 f7       	brpl	.-8      	; 0x27f8 <DIO_SetPin_Direction+0x8e>
    2800:	26 2b       	or	r18, r22
    2802:	fc 01       	movw	r30, r24
    2804:	20 83       	st	Z, r18
			break;
    2806:	2a c0       	rjmp	.+84     	; 0x285c <DIO_SetPin_Direction+0xf2>
			case DIO_PORTC:
			set_bit(DDRC, PIN);
    2808:	84 e3       	ldi	r24, 0x34	; 52
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	24 e3       	ldi	r18, 0x34	; 52
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	f9 01       	movw	r30, r18
    2812:	20 81       	ld	r18, Z
    2814:	62 2f       	mov	r22, r18
    2816:	2a 81       	ldd	r18, Y+2	; 0x02
    2818:	42 2f       	mov	r20, r18
    281a:	50 e0       	ldi	r21, 0x00	; 0
    281c:	21 e0       	ldi	r18, 0x01	; 1
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	02 c0       	rjmp	.+4      	; 0x2826 <DIO_SetPin_Direction+0xbc>
    2822:	22 0f       	add	r18, r18
    2824:	33 1f       	adc	r19, r19
    2826:	4a 95       	dec	r20
    2828:	e2 f7       	brpl	.-8      	; 0x2822 <DIO_SetPin_Direction+0xb8>
    282a:	26 2b       	or	r18, r22
    282c:	fc 01       	movw	r30, r24
    282e:	20 83       	st	Z, r18
			break;
    2830:	15 c0       	rjmp	.+42     	; 0x285c <DIO_SetPin_Direction+0xf2>
			case DIO_PORTD:
			set_bit(DDRD, PIN);
    2832:	81 e3       	ldi	r24, 0x31	; 49
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	21 e3       	ldi	r18, 0x31	; 49
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	f9 01       	movw	r30, r18
    283c:	20 81       	ld	r18, Z
    283e:	62 2f       	mov	r22, r18
    2840:	2a 81       	ldd	r18, Y+2	; 0x02
    2842:	42 2f       	mov	r20, r18
    2844:	50 e0       	ldi	r21, 0x00	; 0
    2846:	21 e0       	ldi	r18, 0x01	; 1
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	02 c0       	rjmp	.+4      	; 0x2850 <DIO_SetPin_Direction+0xe6>
    284c:	22 0f       	add	r18, r18
    284e:	33 1f       	adc	r19, r19
    2850:	4a 95       	dec	r20
    2852:	e2 f7       	brpl	.-8      	; 0x284c <DIO_SetPin_Direction+0xe2>
    2854:	26 2b       	or	r18, r22
    2856:	fc 01       	movw	r30, r24
    2858:	20 83       	st	Z, r18
			break;
    285a:	00 00       	nop
		}
		break;
    285c:	6b c0       	rjmp	.+214    	; 0x2934 <DIO_SetPin_Direction+0x1ca>
		case DIO_INPUT:
		switch(PORT)
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	88 2f       	mov	r24, r24
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	81 30       	cpi	r24, 0x01	; 1
    2866:	91 05       	cpc	r25, r1
    2868:	19 f1       	breq	.+70     	; 0x28b0 <DIO_SetPin_Direction+0x146>
    286a:	82 30       	cpi	r24, 0x02	; 2
    286c:	91 05       	cpc	r25, r1
    286e:	1c f4       	brge	.+6      	; 0x2876 <DIO_SetPin_Direction+0x10c>
    2870:	89 2b       	or	r24, r25
    2872:	41 f0       	breq	.+16     	; 0x2884 <DIO_SetPin_Direction+0x11a>
    2874:	5f c0       	rjmp	.+190    	; 0x2934 <DIO_SetPin_Direction+0x1ca>
    2876:	82 30       	cpi	r24, 0x02	; 2
    2878:	91 05       	cpc	r25, r1
    287a:	81 f1       	breq	.+96     	; 0x28dc <DIO_SetPin_Direction+0x172>
    287c:	03 97       	sbiw	r24, 0x03	; 3
    287e:	09 f4       	brne	.+2      	; 0x2882 <DIO_SetPin_Direction+0x118>
    2880:	43 c0       	rjmp	.+134    	; 0x2908 <DIO_SetPin_Direction+0x19e>
    2882:	58 c0       	rjmp	.+176    	; 0x2934 <DIO_SetPin_Direction+0x1ca>
		{
			case DIO_PORTA:
			clr_bit(DDRA, PIN);
    2884:	8a e3       	ldi	r24, 0x3A	; 58
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	2a e3       	ldi	r18, 0x3A	; 58
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	f9 01       	movw	r30, r18
    288e:	20 81       	ld	r18, Z
    2890:	62 2f       	mov	r22, r18
    2892:	2a 81       	ldd	r18, Y+2	; 0x02
    2894:	42 2f       	mov	r20, r18
    2896:	50 e0       	ldi	r21, 0x00	; 0
    2898:	21 e0       	ldi	r18, 0x01	; 1
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <DIO_SetPin_Direction+0x138>
    289e:	22 0f       	add	r18, r18
    28a0:	33 1f       	adc	r19, r19
    28a2:	4a 95       	dec	r20
    28a4:	e2 f7       	brpl	.-8      	; 0x289e <DIO_SetPin_Direction+0x134>
    28a6:	20 95       	com	r18
    28a8:	26 23       	and	r18, r22
    28aa:	fc 01       	movw	r30, r24
    28ac:	20 83       	st	Z, r18
			break;
    28ae:	42 c0       	rjmp	.+132    	; 0x2934 <DIO_SetPin_Direction+0x1ca>
			case DIO_PORTB:
			clr_bit(DDRB, PIN);
    28b0:	87 e3       	ldi	r24, 0x37	; 55
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	27 e3       	ldi	r18, 0x37	; 55
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	f9 01       	movw	r30, r18
    28ba:	20 81       	ld	r18, Z
    28bc:	62 2f       	mov	r22, r18
    28be:	2a 81       	ldd	r18, Y+2	; 0x02
    28c0:	42 2f       	mov	r20, r18
    28c2:	50 e0       	ldi	r21, 0x00	; 0
    28c4:	21 e0       	ldi	r18, 0x01	; 1
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	02 c0       	rjmp	.+4      	; 0x28ce <DIO_SetPin_Direction+0x164>
    28ca:	22 0f       	add	r18, r18
    28cc:	33 1f       	adc	r19, r19
    28ce:	4a 95       	dec	r20
    28d0:	e2 f7       	brpl	.-8      	; 0x28ca <DIO_SetPin_Direction+0x160>
    28d2:	20 95       	com	r18
    28d4:	26 23       	and	r18, r22
    28d6:	fc 01       	movw	r30, r24
    28d8:	20 83       	st	Z, r18
			break;
    28da:	2c c0       	rjmp	.+88     	; 0x2934 <DIO_SetPin_Direction+0x1ca>
			case DIO_PORTC:
			clr_bit(DDRC, PIN);
    28dc:	84 e3       	ldi	r24, 0x34	; 52
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	24 e3       	ldi	r18, 0x34	; 52
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	f9 01       	movw	r30, r18
    28e6:	20 81       	ld	r18, Z
    28e8:	62 2f       	mov	r22, r18
    28ea:	2a 81       	ldd	r18, Y+2	; 0x02
    28ec:	42 2f       	mov	r20, r18
    28ee:	50 e0       	ldi	r21, 0x00	; 0
    28f0:	21 e0       	ldi	r18, 0x01	; 1
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	02 c0       	rjmp	.+4      	; 0x28fa <DIO_SetPin_Direction+0x190>
    28f6:	22 0f       	add	r18, r18
    28f8:	33 1f       	adc	r19, r19
    28fa:	4a 95       	dec	r20
    28fc:	e2 f7       	brpl	.-8      	; 0x28f6 <DIO_SetPin_Direction+0x18c>
    28fe:	20 95       	com	r18
    2900:	26 23       	and	r18, r22
    2902:	fc 01       	movw	r30, r24
    2904:	20 83       	st	Z, r18
			break;
    2906:	16 c0       	rjmp	.+44     	; 0x2934 <DIO_SetPin_Direction+0x1ca>
			case DIO_PORTD:
			clr_bit(DDRD, PIN);
    2908:	81 e3       	ldi	r24, 0x31	; 49
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	21 e3       	ldi	r18, 0x31	; 49
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	f9 01       	movw	r30, r18
    2912:	20 81       	ld	r18, Z
    2914:	62 2f       	mov	r22, r18
    2916:	2a 81       	ldd	r18, Y+2	; 0x02
    2918:	42 2f       	mov	r20, r18
    291a:	50 e0       	ldi	r21, 0x00	; 0
    291c:	21 e0       	ldi	r18, 0x01	; 1
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	02 c0       	rjmp	.+4      	; 0x2926 <DIO_SetPin_Direction+0x1bc>
    2922:	22 0f       	add	r18, r18
    2924:	33 1f       	adc	r19, r19
    2926:	4a 95       	dec	r20
    2928:	e2 f7       	brpl	.-8      	; 0x2922 <DIO_SetPin_Direction+0x1b8>
    292a:	20 95       	com	r18
    292c:	26 23       	and	r18, r22
    292e:	fc 01       	movw	r30, r24
    2930:	20 83       	st	Z, r18
			break;
    2932:	00 00       	nop
		}
	}
}
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	08 95       	ret

00002940 <DIO_SetPin_Value>:

void DIO_SetPin_Value(DIO_PORT PORT, DIO_PIN PIN, DIO_STATUS STATUS)
{
    2940:	cf 93       	push	r28
    2942:	df 93       	push	r29
    2944:	00 d0       	rcall	.+0      	; 0x2946 <DIO_SetPin_Value+0x6>
    2946:	1f 92       	push	r1
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	6a 83       	std	Y+2, r22	; 0x02
    2950:	4b 83       	std	Y+3, r20	; 0x03
	if(STATUS == DIO_HIGH)
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	81 30       	cpi	r24, 0x01	; 1
    2956:	09 f0       	breq	.+2      	; 0x295a <DIO_SetPin_Value+0x1a>
    2958:	68 c0       	rjmp	.+208    	; 0x2a2a <DIO_SetPin_Value+0xea>
	{
		switch(PORT)
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	88 2f       	mov	r24, r24
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	81 30       	cpi	r24, 0x01	; 1
    2962:	91 05       	cpc	r25, r1
    2964:	11 f1       	breq	.+68     	; 0x29aa <DIO_SetPin_Value+0x6a>
    2966:	82 30       	cpi	r24, 0x02	; 2
    2968:	91 05       	cpc	r25, r1
    296a:	1c f4       	brge	.+6      	; 0x2972 <DIO_SetPin_Value+0x32>
    296c:	89 2b       	or	r24, r25
    296e:	41 f0       	breq	.+16     	; 0x2980 <DIO_SetPin_Value+0x40>
    2970:	cb c0       	rjmp	.+406    	; 0x2b08 <DIO_SetPin_Value+0x1c8>
    2972:	82 30       	cpi	r24, 0x02	; 2
    2974:	91 05       	cpc	r25, r1
    2976:	71 f1       	breq	.+92     	; 0x29d4 <DIO_SetPin_Value+0x94>
    2978:	03 97       	sbiw	r24, 0x03	; 3
    297a:	09 f4       	brne	.+2      	; 0x297e <DIO_SetPin_Value+0x3e>
    297c:	40 c0       	rjmp	.+128    	; 0x29fe <DIO_SetPin_Value+0xbe>
    297e:	c4 c0       	rjmp	.+392    	; 0x2b08 <DIO_SetPin_Value+0x1c8>
		{
			case DIO_PORTA:
			set_bit(PORTA, PIN);
    2980:	8b e3       	ldi	r24, 0x3B	; 59
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	2b e3       	ldi	r18, 0x3B	; 59
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	f9 01       	movw	r30, r18
    298a:	20 81       	ld	r18, Z
    298c:	62 2f       	mov	r22, r18
    298e:	2a 81       	ldd	r18, Y+2	; 0x02
    2990:	42 2f       	mov	r20, r18
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	21 e0       	ldi	r18, 0x01	; 1
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	02 c0       	rjmp	.+4      	; 0x299e <DIO_SetPin_Value+0x5e>
    299a:	22 0f       	add	r18, r18
    299c:	33 1f       	adc	r19, r19
    299e:	4a 95       	dec	r20
    29a0:	e2 f7       	brpl	.-8      	; 0x299a <DIO_SetPin_Value+0x5a>
    29a2:	26 2b       	or	r18, r22
    29a4:	fc 01       	movw	r30, r24
    29a6:	20 83       	st	Z, r18
			break;
    29a8:	3f c0       	rjmp	.+126    	; 0x2a28 <DIO_SetPin_Value+0xe8>
			case DIO_PORTB:
			set_bit(PORTB, PIN);
    29aa:	88 e3       	ldi	r24, 0x38	; 56
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	28 e3       	ldi	r18, 0x38	; 56
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	f9 01       	movw	r30, r18
    29b4:	20 81       	ld	r18, Z
    29b6:	62 2f       	mov	r22, r18
    29b8:	2a 81       	ldd	r18, Y+2	; 0x02
    29ba:	42 2f       	mov	r20, r18
    29bc:	50 e0       	ldi	r21, 0x00	; 0
    29be:	21 e0       	ldi	r18, 0x01	; 1
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <DIO_SetPin_Value+0x88>
    29c4:	22 0f       	add	r18, r18
    29c6:	33 1f       	adc	r19, r19
    29c8:	4a 95       	dec	r20
    29ca:	e2 f7       	brpl	.-8      	; 0x29c4 <DIO_SetPin_Value+0x84>
    29cc:	26 2b       	or	r18, r22
    29ce:	fc 01       	movw	r30, r24
    29d0:	20 83       	st	Z, r18
			break;
    29d2:	2a c0       	rjmp	.+84     	; 0x2a28 <DIO_SetPin_Value+0xe8>
			case DIO_PORTC:
			set_bit(PORTC, PIN);
    29d4:	85 e3       	ldi	r24, 0x35	; 53
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	25 e3       	ldi	r18, 0x35	; 53
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	f9 01       	movw	r30, r18
    29de:	20 81       	ld	r18, Z
    29e0:	62 2f       	mov	r22, r18
    29e2:	2a 81       	ldd	r18, Y+2	; 0x02
    29e4:	42 2f       	mov	r20, r18
    29e6:	50 e0       	ldi	r21, 0x00	; 0
    29e8:	21 e0       	ldi	r18, 0x01	; 1
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	02 c0       	rjmp	.+4      	; 0x29f2 <DIO_SetPin_Value+0xb2>
    29ee:	22 0f       	add	r18, r18
    29f0:	33 1f       	adc	r19, r19
    29f2:	4a 95       	dec	r20
    29f4:	e2 f7       	brpl	.-8      	; 0x29ee <DIO_SetPin_Value+0xae>
    29f6:	26 2b       	or	r18, r22
    29f8:	fc 01       	movw	r30, r24
    29fa:	20 83       	st	Z, r18
			break;
    29fc:	15 c0       	rjmp	.+42     	; 0x2a28 <DIO_SetPin_Value+0xe8>
			case DIO_PORTD:
			set_bit(PORTD, PIN);
    29fe:	82 e3       	ldi	r24, 0x32	; 50
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	22 e3       	ldi	r18, 0x32	; 50
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	f9 01       	movw	r30, r18
    2a08:	20 81       	ld	r18, Z
    2a0a:	62 2f       	mov	r22, r18
    2a0c:	2a 81       	ldd	r18, Y+2	; 0x02
    2a0e:	42 2f       	mov	r20, r18
    2a10:	50 e0       	ldi	r21, 0x00	; 0
    2a12:	21 e0       	ldi	r18, 0x01	; 1
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	02 c0       	rjmp	.+4      	; 0x2a1c <DIO_SetPin_Value+0xdc>
    2a18:	22 0f       	add	r18, r18
    2a1a:	33 1f       	adc	r19, r19
    2a1c:	4a 95       	dec	r20
    2a1e:	e2 f7       	brpl	.-8      	; 0x2a18 <DIO_SetPin_Value+0xd8>
    2a20:	26 2b       	or	r18, r22
    2a22:	fc 01       	movw	r30, r24
    2a24:	20 83       	st	Z, r18
			break;
    2a26:	00 00       	nop
    2a28:	6f c0       	rjmp	.+222    	; 0x2b08 <DIO_SetPin_Value+0x1c8>
		}
	}
	else if(STATUS == DIO_LOW)
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	88 23       	and	r24, r24
    2a2e:	09 f0       	breq	.+2      	; 0x2a32 <DIO_SetPin_Value+0xf2>
    2a30:	6b c0       	rjmp	.+214    	; 0x2b08 <DIO_SetPin_Value+0x1c8>
	{
		switch(PORT)
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	88 2f       	mov	r24, r24
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	81 30       	cpi	r24, 0x01	; 1
    2a3a:	91 05       	cpc	r25, r1
    2a3c:	19 f1       	breq	.+70     	; 0x2a84 <DIO_SetPin_Value+0x144>
    2a3e:	82 30       	cpi	r24, 0x02	; 2
    2a40:	91 05       	cpc	r25, r1
    2a42:	1c f4       	brge	.+6      	; 0x2a4a <DIO_SetPin_Value+0x10a>
    2a44:	89 2b       	or	r24, r25
    2a46:	41 f0       	breq	.+16     	; 0x2a58 <DIO_SetPin_Value+0x118>
    2a48:	5f c0       	rjmp	.+190    	; 0x2b08 <DIO_SetPin_Value+0x1c8>
    2a4a:	82 30       	cpi	r24, 0x02	; 2
    2a4c:	91 05       	cpc	r25, r1
    2a4e:	81 f1       	breq	.+96     	; 0x2ab0 <DIO_SetPin_Value+0x170>
    2a50:	03 97       	sbiw	r24, 0x03	; 3
    2a52:	09 f4       	brne	.+2      	; 0x2a56 <DIO_SetPin_Value+0x116>
    2a54:	43 c0       	rjmp	.+134    	; 0x2adc <DIO_SetPin_Value+0x19c>
    2a56:	58 c0       	rjmp	.+176    	; 0x2b08 <DIO_SetPin_Value+0x1c8>
		{
			case DIO_PORTA:
			clr_bit(PORTA, PIN);
    2a58:	8b e3       	ldi	r24, 0x3B	; 59
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	2b e3       	ldi	r18, 0x3B	; 59
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	f9 01       	movw	r30, r18
    2a62:	20 81       	ld	r18, Z
    2a64:	62 2f       	mov	r22, r18
    2a66:	2a 81       	ldd	r18, Y+2	; 0x02
    2a68:	42 2f       	mov	r20, r18
    2a6a:	50 e0       	ldi	r21, 0x00	; 0
    2a6c:	21 e0       	ldi	r18, 0x01	; 1
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <DIO_SetPin_Value+0x136>
    2a72:	22 0f       	add	r18, r18
    2a74:	33 1f       	adc	r19, r19
    2a76:	4a 95       	dec	r20
    2a78:	e2 f7       	brpl	.-8      	; 0x2a72 <DIO_SetPin_Value+0x132>
    2a7a:	20 95       	com	r18
    2a7c:	26 23       	and	r18, r22
    2a7e:	fc 01       	movw	r30, r24
    2a80:	20 83       	st	Z, r18
			break;
    2a82:	42 c0       	rjmp	.+132    	; 0x2b08 <DIO_SetPin_Value+0x1c8>
			case DIO_PORTB:
			clr_bit(PORTB, PIN);
    2a84:	88 e3       	ldi	r24, 0x38	; 56
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	28 e3       	ldi	r18, 0x38	; 56
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	f9 01       	movw	r30, r18
    2a8e:	20 81       	ld	r18, Z
    2a90:	62 2f       	mov	r22, r18
    2a92:	2a 81       	ldd	r18, Y+2	; 0x02
    2a94:	42 2f       	mov	r20, r18
    2a96:	50 e0       	ldi	r21, 0x00	; 0
    2a98:	21 e0       	ldi	r18, 0x01	; 1
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <DIO_SetPin_Value+0x162>
    2a9e:	22 0f       	add	r18, r18
    2aa0:	33 1f       	adc	r19, r19
    2aa2:	4a 95       	dec	r20
    2aa4:	e2 f7       	brpl	.-8      	; 0x2a9e <DIO_SetPin_Value+0x15e>
    2aa6:	20 95       	com	r18
    2aa8:	26 23       	and	r18, r22
    2aaa:	fc 01       	movw	r30, r24
    2aac:	20 83       	st	Z, r18
			break;
    2aae:	2c c0       	rjmp	.+88     	; 0x2b08 <DIO_SetPin_Value+0x1c8>
			case DIO_PORTC:
			clr_bit(PORTC, PIN);
    2ab0:	85 e3       	ldi	r24, 0x35	; 53
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	25 e3       	ldi	r18, 0x35	; 53
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	f9 01       	movw	r30, r18
    2aba:	20 81       	ld	r18, Z
    2abc:	62 2f       	mov	r22, r18
    2abe:	2a 81       	ldd	r18, Y+2	; 0x02
    2ac0:	42 2f       	mov	r20, r18
    2ac2:	50 e0       	ldi	r21, 0x00	; 0
    2ac4:	21 e0       	ldi	r18, 0x01	; 1
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	02 c0       	rjmp	.+4      	; 0x2ace <DIO_SetPin_Value+0x18e>
    2aca:	22 0f       	add	r18, r18
    2acc:	33 1f       	adc	r19, r19
    2ace:	4a 95       	dec	r20
    2ad0:	e2 f7       	brpl	.-8      	; 0x2aca <DIO_SetPin_Value+0x18a>
    2ad2:	20 95       	com	r18
    2ad4:	26 23       	and	r18, r22
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	20 83       	st	Z, r18
			break;
    2ada:	16 c0       	rjmp	.+44     	; 0x2b08 <DIO_SetPin_Value+0x1c8>
			case DIO_PORTD:
			clr_bit(PORTD, PIN);
    2adc:	82 e3       	ldi	r24, 0x32	; 50
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	22 e3       	ldi	r18, 0x32	; 50
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	f9 01       	movw	r30, r18
    2ae6:	20 81       	ld	r18, Z
    2ae8:	62 2f       	mov	r22, r18
    2aea:	2a 81       	ldd	r18, Y+2	; 0x02
    2aec:	42 2f       	mov	r20, r18
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	21 e0       	ldi	r18, 0x01	; 1
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <DIO_SetPin_Value+0x1ba>
    2af6:	22 0f       	add	r18, r18
    2af8:	33 1f       	adc	r19, r19
    2afa:	4a 95       	dec	r20
    2afc:	e2 f7       	brpl	.-8      	; 0x2af6 <DIO_SetPin_Value+0x1b6>
    2afe:	20 95       	com	r18
    2b00:	26 23       	and	r18, r22
    2b02:	fc 01       	movw	r30, r24
    2b04:	20 83       	st	Z, r18
			break;
    2b06:	00 00       	nop
		}
	}
}
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	df 91       	pop	r29
    2b10:	cf 91       	pop	r28
    2b12:	08 95       	ret

00002b14 <__cmpsf2>:
    2b14:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__fp_cmp>
    2b18:	08 f4       	brcc	.+2      	; 0x2b1c <__cmpsf2+0x8>
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	08 95       	ret

00002b1e <__fixunssfsi>:
    2b1e:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <__fp_splitA>
    2b22:	88 f0       	brcs	.+34     	; 0x2b46 <__fixunssfsi+0x28>
    2b24:	9f 57       	subi	r25, 0x7F	; 127
    2b26:	98 f0       	brcs	.+38     	; 0x2b4e <__fixunssfsi+0x30>
    2b28:	b9 2f       	mov	r27, r25
    2b2a:	99 27       	eor	r25, r25
    2b2c:	b7 51       	subi	r27, 0x17	; 23
    2b2e:	b0 f0       	brcs	.+44     	; 0x2b5c <__fixunssfsi+0x3e>
    2b30:	e1 f0       	breq	.+56     	; 0x2b6a <__fixunssfsi+0x4c>
    2b32:	66 0f       	add	r22, r22
    2b34:	77 1f       	adc	r23, r23
    2b36:	88 1f       	adc	r24, r24
    2b38:	99 1f       	adc	r25, r25
    2b3a:	1a f0       	brmi	.+6      	; 0x2b42 <__fixunssfsi+0x24>
    2b3c:	ba 95       	dec	r27
    2b3e:	c9 f7       	brne	.-14     	; 0x2b32 <__fixunssfsi+0x14>
    2b40:	14 c0       	rjmp	.+40     	; 0x2b6a <__fixunssfsi+0x4c>
    2b42:	b1 30       	cpi	r27, 0x01	; 1
    2b44:	91 f0       	breq	.+36     	; 0x2b6a <__fixunssfsi+0x4c>
    2b46:	0e 94 04 16 	call	0x2c08	; 0x2c08 <__fp_zero>
    2b4a:	b1 e0       	ldi	r27, 0x01	; 1
    2b4c:	08 95       	ret
    2b4e:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__fp_zero>
    2b52:	67 2f       	mov	r22, r23
    2b54:	78 2f       	mov	r23, r24
    2b56:	88 27       	eor	r24, r24
    2b58:	b8 5f       	subi	r27, 0xF8	; 248
    2b5a:	39 f0       	breq	.+14     	; 0x2b6a <__fixunssfsi+0x4c>
    2b5c:	b9 3f       	cpi	r27, 0xF9	; 249
    2b5e:	cc f3       	brlt	.-14     	; 0x2b52 <__fixunssfsi+0x34>
    2b60:	86 95       	lsr	r24
    2b62:	77 95       	ror	r23
    2b64:	67 95       	ror	r22
    2b66:	b3 95       	inc	r27
    2b68:	d9 f7       	brne	.-10     	; 0x2b60 <__fixunssfsi+0x42>
    2b6a:	3e f4       	brtc	.+14     	; 0x2b7a <__fixunssfsi+0x5c>
    2b6c:	90 95       	com	r25
    2b6e:	80 95       	com	r24
    2b70:	70 95       	com	r23
    2b72:	61 95       	neg	r22
    2b74:	7f 4f       	sbci	r23, 0xFF	; 255
    2b76:	8f 4f       	sbci	r24, 0xFF	; 255
    2b78:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7a:	08 95       	ret

00002b7c <__fp_cmp>:
    2b7c:	99 0f       	add	r25, r25
    2b7e:	00 08       	sbc	r0, r0
    2b80:	55 0f       	add	r21, r21
    2b82:	aa 0b       	sbc	r26, r26
    2b84:	e0 e8       	ldi	r30, 0x80	; 128
    2b86:	fe ef       	ldi	r31, 0xFE	; 254
    2b88:	16 16       	cp	r1, r22
    2b8a:	17 06       	cpc	r1, r23
    2b8c:	e8 07       	cpc	r30, r24
    2b8e:	f9 07       	cpc	r31, r25
    2b90:	c0 f0       	brcs	.+48     	; 0x2bc2 <__fp_cmp+0x46>
    2b92:	12 16       	cp	r1, r18
    2b94:	13 06       	cpc	r1, r19
    2b96:	e4 07       	cpc	r30, r20
    2b98:	f5 07       	cpc	r31, r21
    2b9a:	98 f0       	brcs	.+38     	; 0x2bc2 <__fp_cmp+0x46>
    2b9c:	62 1b       	sub	r22, r18
    2b9e:	73 0b       	sbc	r23, r19
    2ba0:	84 0b       	sbc	r24, r20
    2ba2:	95 0b       	sbc	r25, r21
    2ba4:	39 f4       	brne	.+14     	; 0x2bb4 <__fp_cmp+0x38>
    2ba6:	0a 26       	eor	r0, r26
    2ba8:	61 f0       	breq	.+24     	; 0x2bc2 <__fp_cmp+0x46>
    2baa:	23 2b       	or	r18, r19
    2bac:	24 2b       	or	r18, r20
    2bae:	25 2b       	or	r18, r21
    2bb0:	21 f4       	brne	.+8      	; 0x2bba <__fp_cmp+0x3e>
    2bb2:	08 95       	ret
    2bb4:	0a 26       	eor	r0, r26
    2bb6:	09 f4       	brne	.+2      	; 0x2bba <__fp_cmp+0x3e>
    2bb8:	a1 40       	sbci	r26, 0x01	; 1
    2bba:	a6 95       	lsr	r26
    2bbc:	8f ef       	ldi	r24, 0xFF	; 255
    2bbe:	81 1d       	adc	r24, r1
    2bc0:	81 1d       	adc	r24, r1
    2bc2:	08 95       	ret

00002bc4 <__fp_split3>:
    2bc4:	57 fd       	sbrc	r21, 7
    2bc6:	90 58       	subi	r25, 0x80	; 128
    2bc8:	44 0f       	add	r20, r20
    2bca:	55 1f       	adc	r21, r21
    2bcc:	59 f0       	breq	.+22     	; 0x2be4 <__fp_splitA+0x10>
    2bce:	5f 3f       	cpi	r21, 0xFF	; 255
    2bd0:	71 f0       	breq	.+28     	; 0x2bee <__fp_splitA+0x1a>
    2bd2:	47 95       	ror	r20

00002bd4 <__fp_splitA>:
    2bd4:	88 0f       	add	r24, r24
    2bd6:	97 fb       	bst	r25, 7
    2bd8:	99 1f       	adc	r25, r25
    2bda:	61 f0       	breq	.+24     	; 0x2bf4 <__fp_splitA+0x20>
    2bdc:	9f 3f       	cpi	r25, 0xFF	; 255
    2bde:	79 f0       	breq	.+30     	; 0x2bfe <__fp_splitA+0x2a>
    2be0:	87 95       	ror	r24
    2be2:	08 95       	ret
    2be4:	12 16       	cp	r1, r18
    2be6:	13 06       	cpc	r1, r19
    2be8:	14 06       	cpc	r1, r20
    2bea:	55 1f       	adc	r21, r21
    2bec:	f2 cf       	rjmp	.-28     	; 0x2bd2 <__fp_split3+0xe>
    2bee:	46 95       	lsr	r20
    2bf0:	f1 df       	rcall	.-30     	; 0x2bd4 <__fp_splitA>
    2bf2:	08 c0       	rjmp	.+16     	; 0x2c04 <__fp_splitA+0x30>
    2bf4:	16 16       	cp	r1, r22
    2bf6:	17 06       	cpc	r1, r23
    2bf8:	18 06       	cpc	r1, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	f1 cf       	rjmp	.-30     	; 0x2be0 <__fp_splitA+0xc>
    2bfe:	86 95       	lsr	r24
    2c00:	71 05       	cpc	r23, r1
    2c02:	61 05       	cpc	r22, r1
    2c04:	08 94       	sec
    2c06:	08 95       	ret

00002c08 <__fp_zero>:
    2c08:	e8 94       	clt

00002c0a <__fp_szero>:
    2c0a:	bb 27       	eor	r27, r27
    2c0c:	66 27       	eor	r22, r22
    2c0e:	77 27       	eor	r23, r23
    2c10:	cb 01       	movw	r24, r22
    2c12:	97 f9       	bld	r25, 7
    2c14:	08 95       	ret

00002c16 <__gesf2>:
    2c16:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__fp_cmp>
    2c1a:	08 f4       	brcc	.+2      	; 0x2c1e <__gesf2+0x8>
    2c1c:	8f ef       	ldi	r24, 0xFF	; 255
    2c1e:	08 95       	ret

00002c20 <__mulsf3>:
    2c20:	0e 94 23 16 	call	0x2c46	; 0x2c46 <__mulsf3x>
    2c24:	0c 94 94 16 	jmp	0x2d28	; 0x2d28 <__fp_round>
    2c28:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <__fp_pscA>
    2c2c:	38 f0       	brcs	.+14     	; 0x2c3c <__mulsf3+0x1c>
    2c2e:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <__fp_pscB>
    2c32:	20 f0       	brcs	.+8      	; 0x2c3c <__mulsf3+0x1c>
    2c34:	95 23       	and	r25, r21
    2c36:	11 f0       	breq	.+4      	; 0x2c3c <__mulsf3+0x1c>
    2c38:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__fp_inf>
    2c3c:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__fp_nan>
    2c40:	11 24       	eor	r1, r1
    2c42:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__fp_szero>

00002c46 <__mulsf3x>:
    2c46:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <__fp_split3>
    2c4a:	70 f3       	brcs	.-36     	; 0x2c28 <__mulsf3+0x8>

00002c4c <__mulsf3_pse>:
    2c4c:	95 9f       	mul	r25, r21
    2c4e:	c1 f3       	breq	.-16     	; 0x2c40 <__mulsf3+0x20>
    2c50:	95 0f       	add	r25, r21
    2c52:	50 e0       	ldi	r21, 0x00	; 0
    2c54:	55 1f       	adc	r21, r21
    2c56:	62 9f       	mul	r22, r18
    2c58:	f0 01       	movw	r30, r0
    2c5a:	72 9f       	mul	r23, r18
    2c5c:	bb 27       	eor	r27, r27
    2c5e:	f0 0d       	add	r31, r0
    2c60:	b1 1d       	adc	r27, r1
    2c62:	63 9f       	mul	r22, r19
    2c64:	aa 27       	eor	r26, r26
    2c66:	f0 0d       	add	r31, r0
    2c68:	b1 1d       	adc	r27, r1
    2c6a:	aa 1f       	adc	r26, r26
    2c6c:	64 9f       	mul	r22, r20
    2c6e:	66 27       	eor	r22, r22
    2c70:	b0 0d       	add	r27, r0
    2c72:	a1 1d       	adc	r26, r1
    2c74:	66 1f       	adc	r22, r22
    2c76:	82 9f       	mul	r24, r18
    2c78:	22 27       	eor	r18, r18
    2c7a:	b0 0d       	add	r27, r0
    2c7c:	a1 1d       	adc	r26, r1
    2c7e:	62 1f       	adc	r22, r18
    2c80:	73 9f       	mul	r23, r19
    2c82:	b0 0d       	add	r27, r0
    2c84:	a1 1d       	adc	r26, r1
    2c86:	62 1f       	adc	r22, r18
    2c88:	83 9f       	mul	r24, r19
    2c8a:	a0 0d       	add	r26, r0
    2c8c:	61 1d       	adc	r22, r1
    2c8e:	22 1f       	adc	r18, r18
    2c90:	74 9f       	mul	r23, r20
    2c92:	33 27       	eor	r19, r19
    2c94:	a0 0d       	add	r26, r0
    2c96:	61 1d       	adc	r22, r1
    2c98:	23 1f       	adc	r18, r19
    2c9a:	84 9f       	mul	r24, r20
    2c9c:	60 0d       	add	r22, r0
    2c9e:	21 1d       	adc	r18, r1
    2ca0:	82 2f       	mov	r24, r18
    2ca2:	76 2f       	mov	r23, r22
    2ca4:	6a 2f       	mov	r22, r26
    2ca6:	11 24       	eor	r1, r1
    2ca8:	9f 57       	subi	r25, 0x7F	; 127
    2caa:	50 40       	sbci	r21, 0x00	; 0
    2cac:	9a f0       	brmi	.+38     	; 0x2cd4 <__mulsf3_pse+0x88>
    2cae:	f1 f0       	breq	.+60     	; 0x2cec <__mulsf3_pse+0xa0>
    2cb0:	88 23       	and	r24, r24
    2cb2:	4a f0       	brmi	.+18     	; 0x2cc6 <__mulsf3_pse+0x7a>
    2cb4:	ee 0f       	add	r30, r30
    2cb6:	ff 1f       	adc	r31, r31
    2cb8:	bb 1f       	adc	r27, r27
    2cba:	66 1f       	adc	r22, r22
    2cbc:	77 1f       	adc	r23, r23
    2cbe:	88 1f       	adc	r24, r24
    2cc0:	91 50       	subi	r25, 0x01	; 1
    2cc2:	50 40       	sbci	r21, 0x00	; 0
    2cc4:	a9 f7       	brne	.-22     	; 0x2cb0 <__mulsf3_pse+0x64>
    2cc6:	9e 3f       	cpi	r25, 0xFE	; 254
    2cc8:	51 05       	cpc	r21, r1
    2cca:	80 f0       	brcs	.+32     	; 0x2cec <__mulsf3_pse+0xa0>
    2ccc:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__fp_inf>
    2cd0:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__fp_szero>
    2cd4:	5f 3f       	cpi	r21, 0xFF	; 255
    2cd6:	e4 f3       	brlt	.-8      	; 0x2cd0 <__mulsf3_pse+0x84>
    2cd8:	98 3e       	cpi	r25, 0xE8	; 232
    2cda:	d4 f3       	brlt	.-12     	; 0x2cd0 <__mulsf3_pse+0x84>
    2cdc:	86 95       	lsr	r24
    2cde:	77 95       	ror	r23
    2ce0:	67 95       	ror	r22
    2ce2:	b7 95       	ror	r27
    2ce4:	f7 95       	ror	r31
    2ce6:	e7 95       	ror	r30
    2ce8:	9f 5f       	subi	r25, 0xFF	; 255
    2cea:	c1 f7       	brne	.-16     	; 0x2cdc <__mulsf3_pse+0x90>
    2cec:	fe 2b       	or	r31, r30
    2cee:	88 0f       	add	r24, r24
    2cf0:	91 1d       	adc	r25, r1
    2cf2:	96 95       	lsr	r25
    2cf4:	87 95       	ror	r24
    2cf6:	97 f9       	bld	r25, 7
    2cf8:	08 95       	ret

00002cfa <__fp_inf>:
    2cfa:	97 f9       	bld	r25, 7
    2cfc:	9f 67       	ori	r25, 0x7F	; 127
    2cfe:	80 e8       	ldi	r24, 0x80	; 128
    2d00:	70 e0       	ldi	r23, 0x00	; 0
    2d02:	60 e0       	ldi	r22, 0x00	; 0
    2d04:	08 95       	ret

00002d06 <__fp_nan>:
    2d06:	9f ef       	ldi	r25, 0xFF	; 255
    2d08:	80 ec       	ldi	r24, 0xC0	; 192
    2d0a:	08 95       	ret

00002d0c <__fp_pscA>:
    2d0c:	00 24       	eor	r0, r0
    2d0e:	0a 94       	dec	r0
    2d10:	16 16       	cp	r1, r22
    2d12:	17 06       	cpc	r1, r23
    2d14:	18 06       	cpc	r1, r24
    2d16:	09 06       	cpc	r0, r25
    2d18:	08 95       	ret

00002d1a <__fp_pscB>:
    2d1a:	00 24       	eor	r0, r0
    2d1c:	0a 94       	dec	r0
    2d1e:	12 16       	cp	r1, r18
    2d20:	13 06       	cpc	r1, r19
    2d22:	14 06       	cpc	r1, r20
    2d24:	05 06       	cpc	r0, r21
    2d26:	08 95       	ret

00002d28 <__fp_round>:
    2d28:	09 2e       	mov	r0, r25
    2d2a:	03 94       	inc	r0
    2d2c:	00 0c       	add	r0, r0
    2d2e:	11 f4       	brne	.+4      	; 0x2d34 <__fp_round+0xc>
    2d30:	88 23       	and	r24, r24
    2d32:	52 f0       	brmi	.+20     	; 0x2d48 <__fp_round+0x20>
    2d34:	bb 0f       	add	r27, r27
    2d36:	40 f4       	brcc	.+16     	; 0x2d48 <__fp_round+0x20>
    2d38:	bf 2b       	or	r27, r31
    2d3a:	11 f4       	brne	.+4      	; 0x2d40 <__fp_round+0x18>
    2d3c:	60 ff       	sbrs	r22, 0
    2d3e:	04 c0       	rjmp	.+8      	; 0x2d48 <__fp_round+0x20>
    2d40:	6f 5f       	subi	r22, 0xFF	; 255
    2d42:	7f 4f       	sbci	r23, 0xFF	; 255
    2d44:	8f 4f       	sbci	r24, 0xFF	; 255
    2d46:	9f 4f       	sbci	r25, 0xFF	; 255
    2d48:	08 95       	ret

00002d4a <__tablejump2__>:
    2d4a:	ee 0f       	add	r30, r30
    2d4c:	ff 1f       	adc	r31, r31
    2d4e:	05 90       	lpm	r0, Z+
    2d50:	f4 91       	lpm	r31, Z
    2d52:	e0 2d       	mov	r30, r0
    2d54:	09 94       	ijmp

00002d56 <ltoa>:
    2d56:	25 32       	cpi	r18, 0x25	; 37
    2d58:	31 05       	cpc	r19, r1
    2d5a:	20 f4       	brcc	.+8      	; 0x2d64 <ltoa+0xe>
    2d5c:	22 30       	cpi	r18, 0x02	; 2
    2d5e:	10 f0       	brcs	.+4      	; 0x2d64 <ltoa+0xe>
    2d60:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__ltoa_ncheck>
    2d64:	fa 01       	movw	r30, r20
    2d66:	10 82       	st	Z, r1
    2d68:	ca 01       	movw	r24, r20
    2d6a:	08 95       	ret

00002d6c <__ltoa_ncheck>:
    2d6c:	bb 27       	eor	r27, r27
    2d6e:	2a 30       	cpi	r18, 0x0A	; 10
    2d70:	51 f4       	brne	.+20     	; 0x2d86 <__ltoa_ncheck+0x1a>
    2d72:	99 23       	and	r25, r25
    2d74:	42 f4       	brpl	.+16     	; 0x2d86 <__ltoa_ncheck+0x1a>
    2d76:	bd e2       	ldi	r27, 0x2D	; 45
    2d78:	90 95       	com	r25
    2d7a:	80 95       	com	r24
    2d7c:	70 95       	com	r23
    2d7e:	61 95       	neg	r22
    2d80:	7f 4f       	sbci	r23, 0xFF	; 255
    2d82:	8f 4f       	sbci	r24, 0xFF	; 255
    2d84:	9f 4f       	sbci	r25, 0xFF	; 255
    2d86:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__ultoa_common>

00002d8a <__ultoa_ncheck>:
    2d8a:	bb 27       	eor	r27, r27

00002d8c <__ultoa_common>:
    2d8c:	fa 01       	movw	r30, r20
    2d8e:	a6 2f       	mov	r26, r22
    2d90:	62 17       	cp	r22, r18
    2d92:	71 05       	cpc	r23, r1
    2d94:	81 05       	cpc	r24, r1
    2d96:	91 05       	cpc	r25, r1
    2d98:	33 0b       	sbc	r19, r19
    2d9a:	30 fb       	bst	r19, 0
    2d9c:	66 f0       	brts	.+24     	; 0x2db6 <__ultoa_common+0x2a>
    2d9e:	aa 27       	eor	r26, r26
    2da0:	66 0f       	add	r22, r22
    2da2:	77 1f       	adc	r23, r23
    2da4:	88 1f       	adc	r24, r24
    2da6:	99 1f       	adc	r25, r25
    2da8:	aa 1f       	adc	r26, r26
    2daa:	a2 17       	cp	r26, r18
    2dac:	10 f0       	brcs	.+4      	; 0x2db2 <__ultoa_common+0x26>
    2dae:	a2 1b       	sub	r26, r18
    2db0:	63 95       	inc	r22
    2db2:	38 50       	subi	r19, 0x08	; 8
    2db4:	a9 f7       	brne	.-22     	; 0x2da0 <__ultoa_common+0x14>
    2db6:	a0 5d       	subi	r26, 0xD0	; 208
    2db8:	aa 33       	cpi	r26, 0x3A	; 58
    2dba:	08 f0       	brcs	.+2      	; 0x2dbe <__ultoa_common+0x32>
    2dbc:	a9 5d       	subi	r26, 0xD9	; 217
    2dbe:	a1 93       	st	Z+, r26
    2dc0:	36 f7       	brtc	.-52     	; 0x2d8e <__ultoa_common+0x2>
    2dc2:	b1 11       	cpse	r27, r1
    2dc4:	b1 93       	st	Z+, r27
    2dc6:	10 82       	st	Z, r1
    2dc8:	ca 01       	movw	r24, r20
    2dca:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <strrev>

00002dce <strrev>:
    2dce:	dc 01       	movw	r26, r24
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	67 2f       	mov	r22, r23
    2dd4:	71 91       	ld	r23, Z+
    2dd6:	77 23       	and	r23, r23
    2dd8:	e1 f7       	brne	.-8      	; 0x2dd2 <strrev+0x4>
    2dda:	32 97       	sbiw	r30, 0x02	; 2
    2ddc:	04 c0       	rjmp	.+8      	; 0x2de6 <strrev+0x18>
    2dde:	7c 91       	ld	r23, X
    2de0:	6d 93       	st	X+, r22
    2de2:	70 83       	st	Z, r23
    2de4:	62 91       	ld	r22, -Z
    2de6:	ae 17       	cp	r26, r30
    2de8:	bf 07       	cpc	r27, r31
    2dea:	c8 f3       	brcs	.-14     	; 0x2dde <strrev+0x10>
    2dec:	08 95       	ret

00002dee <_exit>:
    2dee:	f8 94       	cli

00002df0 <__stop_program>:
    2df0:	ff cf       	rjmp	.-2      	; 0x2df0 <__stop_program>
